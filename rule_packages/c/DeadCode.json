{
  "MISRA-C-2012": {
    "RULE-2-1": {
      "properties": {
        "obligation": "required"
      },
      "queries": [
        {
          "description": "Unreachable code complicates the program and can indicate a possible mistake on the part of the programmer.",
          "kind": "problem",
          "name": "A project shall not contain unreachable code",
          "precision": "very-high",
          "severity": "warning",
          "short_name": "UnreachableCode",
          "tags": [
            "readability",
            "maintainability"
          ],
          "implementation_scope": {
            "description": "This query reports basic blocks in the program which are unreachable. For basic blocks within templates, the block is only consider unreachable if it is unreachable in all templates. Code generated by macros is ignored for this query, because it may be the case that basic blocks are reachable only in some expansions."
          },
          "shared_implementation_short_name": "UnreachableCode"
        }
      ],
      "title": "A project shall not contain unreachable code"
    },
    "RULE-2-2": {
      "properties": {
        "obligation": "required"
      },
      "queries": [
        {
          "description": "Dead code complicates the program and can indicate a possible mistake on the part of the programmer.",
          "kind": "problem",
          "name": "There shall be no dead code",
          "precision": "very-high",
          "severity": "warning",
          "short_name": "DeadCode",
          "tags": [
            "readability",
            "maintainability"
          ],
          "implementation_scope": {
            "description": "This query identifies dead statements in the program of the following kinds:",
            "items": [
              "Declarations of a non-static stack variable whose initializing expression is pure (i.e. has no side-effects) and that is never subsequently accessed in live code.",
              "Blocks that contain only dead statements.",
              "Do loops whose condition is pure, and whose body contains only dead statements.",
              "If statements whose condition is pure, and whose then and else clauses (where they exist) only contain dead statements.",
              "Label statements to which the code never jumps.",
              "While loops whose condition is pure, and whose body contains only dead statements.",
              "Expression statements whose expressions are pure.",
              "Writes to a non-static stack variable that is never subsequently read in live code."
            ]
          },
          "shared_implementation_short_name": "DeadCode"
        }
      ],
      "title": "There shall be no dead code"
    },
    "RULE-2-3": {
      "properties": {
        "obligation": "advisory"
      },
      "queries": [
        {
          "description": "Unused type declarations are either redundant or indicate a possible mistake on the part of the programmer.",
          "kind": "problem",
          "name": "A project should not contain unused type declarations",
          "precision": "very-high",
          "severity": "warning",
          "short_name": "UnusedTypeDeclarations",
          "tags": [
            "readability",
            "maintainability"
          ],
          "shared_implementation_short_name": "UnusedTypeDeclarations"
        }
      ],
      "title": "A project should not contain unused type declarations"
    },
    "RULE-2-4": {
      "properties": {
        "obligation": "advisory"
      },
      "queries": [
        {
          "description": "Unused tag declarations are either redundant or indicate a possible mistake on the part of the programmer.",
          "kind": "problem",
          "name": "A project should not contain unused tag declarations",
          "precision": "very-high",
          "severity": "warning",
          "short_name": "UnusedTagDeclaration",
          "tags": [
            "readability",
            "maintainability"
          ]
        }
      ],
      "title": "A project should not contain unused tag declarations"
    },
    "RULE-2-5": {
      "properties": {
        "obligation": "advisory"
      },
      "queries": [
        {
          "description": "Unused macro declarations are either redundant or indicate a possible mistake on the part of the programmer.",
          "kind": "problem",
          "name": "A project should not contain unused macro declarations",
          "precision": "very-high",
          "severity": "warning",
          "short_name": "UnusedMacroDeclaration",
          "tags": [
            "readability",
            "maintainability"
          ]
        }
      ],
      "title": "A project should not contain unused macro declarations"
    },
    "RULE-2-6": {
      "properties": {
        "obligation": "advisory"
      },
      "queries": [
        {
          "description": "Unused label declarations are either redundant or indicate a possible mistake on the part of the programmer.",
          "kind": "problem",
          "name": "A function should not contain unused label declarations",
          "precision": "very-high",
          "severity": "warning",
          "short_name": "UnusedLabelDeclaration",
          "tags": [
            "readability",
            "maintainability"
          ]
        }
      ],
      "title": "A function should not contain unused label declarations"
    },
    "RULE-2-7": {
      "properties": {
        "obligation": "advisory"
      },
      "queries": [
        {
          "description": "Unused parameters can indicate a mistake when implementing the function.",
          "kind": "problem",
          "name": "There should be no unused parameters in functions",
          "precision": "very-high",
          "severity": "warning",
          "short_name": "UnusedParameter",
          "tags": [
            "readability",
            "maintainability"
          ],
          "shared_implementation_short_name": "UnusedParameter"
        }
      ],
      "title": "There should be no unused parameters in functions"
    }
  }
}