{
  "MISRA-C++-2023": {
    "RULE-8-2-1": {
      "properties": {
        "enforcement": "decidable",
        "obligation": "required"
      },
      "queries": [
        {
          "description": "Casting from a virtual base class to a derived class using anything other than dynamic_cast causes undefined behavior.",
          "kind": "problem",
          "name": "A virtual base class shall only be cast to a derived class by means of dynamic_cast",
          "precision": "very-high",
          "severity": "error",
          "short_name": "VirtualBaseClassCastToDerived",
          "tags": [
            "scope/single-translation-unit"
          ],
          "shared_implementation_short_name": "PointerToAVirtualBaseClassCastToAPointer"
        }
      ],
      "title": "A virtual base class shall only be cast to a derived class by means of dynamic_cast"
    },
    "RULE-8-2-2": {
      "properties": {
        "enforcement": "decidable",
        "obligation": "required"
      },
      "queries": [
        {
          "description": "Using C-style casts or functional notation casts allows unsafe type conversions and makes code harder to maintain compared to using named casts like const_cast, dynamic_cast, static_cast and reinterpret_cast.",
          "kind": "problem",
          "name": "C-style casts and functional notation casts shall not be used",
          "precision": "very-high",
          "severity": "error",
          "short_name": "NoCStyleOrFunctionalCasts",
          "tags": [
            "scope/single-translation-unit"
          ]
        }
      ],
      "title": "C-style casts and functional notation casts shall not be used"
    },
    "RULE-8-2-6": {
      "properties": {
        "enforcement": "decidable",
        "obligation": "required"
      },
      "queries": [
        {
          "description": "Casting from an integral type, enumerated type, or pointer to void type to a pointer type leads to unspecified behavior and is error prone.",
          "kind": "problem",
          "name": "An object with integral, enumerated, or pointer to void type shall not be cast to a pointer type",
          "precision": "very-high",
          "severity": "error",
          "short_name": "IntToPointerCastProhibited",
          "tags": [
            "scope/single-translation-unit"
          ]
        }
      ],
      "title": "An object with integral, enumerated, or pointer to void type shall not be cast to a pointer type"
    },
    "RULE-8-2-7": {
      "properties": {
        "enforcement": "decidable",
        "obligation": "advisory"
      },
      "queries": [
        {
          "description": "Casting between pointer types and integral types makes code behavior harder to understand and may cause pointer tracking tools to become unreliable.",
          "kind": "problem",
          "name": "A cast should not convert a pointer type to an integral type",
          "precision": "very-high",
          "severity": "error",
          "short_name": "NoPointerToIntegralCast",
          "tags": [
            "scope/single-translation-unit"
          ]
        }
      ],
      "title": "A cast should not convert a pointer type to an integral type"
    },
    "RULE-8-2-8": {
      "properties": {
        "enforcement": "decidable",
        "obligation": "required"
      },
      "queries": [
        {
          "description": "Casting object pointers to integral types other than std::uintptr_t or std::intptr_t can lead to implementation-defined behavior and potential loss of pointer information.",
          "kind": "problem",
          "name": "An object pointer type shall not be cast to an integral type other than std::uintptr_t or",
          "precision": "very-high",
          "severity": "error",
          "short_name": "PointerToIntegralCast",
          "tags": [
            "scope/single-translation-unit"
          ]
        }
      ],
      "title": "An object pointer type shall not be cast to an integral type other than std::uintptr_t or std::intptr_t"
    },
    "RULE-9-2-1": {
      "properties": {
        "enforcement": "decidable",
        "obligation": "required"
      },
      "queries": [
        {
          "description": "Using an explicit type conversion as an expression statement creates a temporary object that is immediately discarded, which can lead to unintended premature resource cleanup.",
          "kind": "problem",
          "name": "An explicit type conversion shall not be an expression statement",
          "precision": "very-high",
          "severity": "error",
          "short_name": "NoStandaloneTypeCastExpression",
          "tags": [
            "scope/single-translation-unit"
          ],
          "implementation_scope": {
            "description": "Expression statements in if statement initializers are not currently supported."
          }
        }
      ],
      "title": "An explicit type conversion shall not be an expression statement"
    }
  }
}