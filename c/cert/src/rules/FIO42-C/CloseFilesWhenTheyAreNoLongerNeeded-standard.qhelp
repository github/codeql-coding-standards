<!DOCTYPE qhelp SYSTEM "qhelp.dtd">
<qhelp>
 <section title="Description">
  <p>A call to the <code>fopen()</code> or <code>freopen()</code> function must be matched with a call to <code>fclose()</code> before the lifetime of the last pointer that stores the return value of the call has ended or before normal program termination, whichever occurs first.</p>
  <p>In general, this rule should also be applied to other functions with open and close resources, such as the POSIX <code>open()</code> and <code>close()</code> functions, or the Microsoft Windows <code>CreateFile()</code> and <code>CloseHandle()</code> functions.</p>
 </section>
 <section title="Noncompliant Code Example">
  <p>This code example is noncompliant because the file opened by the call to <code>fopen()</code> is not closed before function <code>func()</code> returns:</p>
  <sample language="cpp">#include &lt;stdio.h&gt;
 
int func(const char *filename) {
  FILE *f = fopen(filename, "r"); 
  if (NULL == f) {
    return -1;
  }
  /* ... */
  return 0;
}</sample>
 </section>
 <section title="Compliant Solution">
  <p>In this compliant solution, the file pointed to by <code>f</code> is closed before returning to the caller:</p>
  <sample language="cpp">#include &lt;stdio.h&gt;
 
int func(const char *filename) {
  FILE *f = fopen(filename, "r"); 
  if (NULL == f) {
    return -1;
  }
  /* ... */
  if (fclose(f) == EOF) {
    return -1;
  }
  return 0;
}</sample>
 </section>
 <section title="Noncompliant Code Example (exit())">
  <p>This code example is noncompliant because the resource allocated by the call to <code>fopen()</code> is not closed before the program terminates.  Although <code>exit()</code> closes the file, the program has no way of determining if an error occurs while flushing or closing the file.</p>
  <sample language="cpp">#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
  
int main(void) {
  FILE *f = fopen(filename, "w"); 
  if (NULL == f) {
    exit(EXIT_FAILURE);
  }
  /* ... */
  exit(EXIT_SUCCESS);
}</sample>
 </section>
 <section title="Compliant Solution (exit())">
  <p>In this compliant solution, the program closes <code>f</code> explicitly before calling <code>exit()</code>, allowing any error that occurs when flushing or closing the file to be handled appropriately:</p>
  <sample language="cpp">#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;

int main(void) {
  FILE *f = fopen(filename, "w"); 
  if (NULL == f) {
    /* Handle error */
  }
  /* ... */
  if (fclose(f) == EOF) {
    /* Handle error */
  }
  exit(EXIT_SUCCESS);
}</sample>
 </section>
 <section title="Noncompliant Code Example (POSIX)">
  <p>This code example is noncompliant because the resource allocated by the call to <code>open()</code> is not closed before function <code>func()</code> returns:</p>
  <sample language="cpp">#include &lt;stdio.h&gt;
#include &lt;fcntl.h&gt;
 
int func(const char *filename) {
  int fd = open(filename, O_RDONLY, S_IRUSR);
  if (-1 == fd) {
    return -1;
  }
  /* ... */
  return 0;
}</sample>
 </section>
 <section title="Compliant Solution (POSIX)">
  <p>In this compliant solution, <code>fd</code> is closed before returning to the caller:</p>
  <sample language="cpp">#include &lt;stdio.h&gt;
#include &lt;fcntl.h&gt;
#include &lt;unistd.h&gt;
 
int func(const char *filename) {
  int fd = open(filename, O_RDONLY, S_IRUSR);
  if (-1 == fd) {
    return -1
  }
  /* ... */
  if (-1 == close(fd)) {
    return -1;
  }
  return 0;
}</sample>
 </section>
 <section title="Noncompliant Code Example (Windows)">
  <p>In this noncompliant code example, the file opened by the Microsoft Windows <code><a href="http://msdn.microsoft.com/en-us/library/windows/desktop/aa363858(v=vs.85).aspx">CreateFile()</a></code> function is not closed before <code>func()</code> returns:</p>
  <sample language="cpp">#include &lt;Windows.h&gt;

int func(LPCTSTR filename) {
  HANDLE hFile = CreateFile(filename, GENERIC_READ, 0, NULL,
                            OPEN_EXISTING,
                            FILE_ATTRIBUTE_NORMAL, NULL);
  if (INVALID_HANDLE_VALUE == hFile) {
    return -1;
  }
  /* ... */
  return 0;
}</sample>
 </section>
 <section title="Compliant Solution (Windows)">
  <p>In this compliant solution, <code>hFile</code> is closed by invoking the <code><a href="http://msdn.microsoft.com/en-us/library/windows/desktop/ms724211(v=vs.85).aspx">CloseHandle()</a></code> function before returning to the caller:</p>
  <sample language="cpp">#include &lt;Windows.h&gt;
 
int func(LPCTSTR filename) {
  HANDLE hFile = CreateFile(filename, GENERIC_READ, 0, NULL,
                            OPEN_EXISTING,
                            FILE_ATTRIBUTE_NORMAL, NULL);
  if (INVALID_HANDLE_VALUE == hFile) {
    return -1;
  } 
  /* ... */ 
  if (!CloseHandle(hFile)) {
    return -1;
  }
 
  return 0;
}</sample>
 </section>
 <section title="Risk Assessment">
  <p>Failing to properly close files may allow an attacker to exhaust system resources and can increase the risk that data written into in-memory file buffers will not be flushed in the event of <a href="https://wiki.sei.cmu.edu/confluence/display/c/BB.+Definitions#BB.Definitions-abnormaltermination">abnormal program termination</a>.</p>
  <table>
   <tbody>
    <tr>
     <th>
      Rule
     </th>
     <th>
      Severity
     </th>
     <th>
      Likelihood
     </th>
     <th>
      Remediation Cost
     </th>
     <th>
      Priority
     </th>
     <th>
      Level
     </th>
    </tr>
    <tr>
     <td>
      FIO42-C
     </td>
     <td>
      Medium
     </td>
     <td>
      Unlikely
     </td>
     <td>
      Medium
     </td>
     <td>
      <strong>P4</strong>
     </td>
     <td>
      <strong>L3</strong>
     </td>
    </tr>
   </tbody>
  </table>
 </section>
 <section title="Automated Detection">
  <p>This rule is stricter than rule [fileclose] in <a href="https://wiki.sei.cmu.edu/confluence/display/c/AA.+Bibliography#AA.Bibliography-ISO-IECTS17961">ISO/IEC TS 17961:2013</a>. Analyzers that conform to the technical standard may not detect all violations of this rule.</p>
  <table>
   <tbody>
    <tr>
     <th>
      Tool
     </th>
     <th>
      Version
     </th>
     <th>
      Checker
     </th>
     <th>
      Description
     </th>
    </tr>
    <tr>
     <td>
      <a href="https://wiki.sei.cmu.edu/confluence/pages/viewpage.action?pageId=87152428">
       Astr√©e
      </a>
     </td>
     <td>
      20.10
     </td>
     <td>
     </td>
     <td>
      Supported, but no explicit checker
     </td>
    </tr>
    <tr>
     <td>
      <a href="https://wiki.sei.cmu.edu/confluence/display/c/CodeSonar">
       CodeSonar
      </a>
     </td>
     <td>
      6.2p0
     </td>
     <td>
      <strong>ALLOC.LEAK</strong>
     </td>
     <td>
      Leak
     </td>
    </tr>
    <tr>
     <td>
      <a href="https://wiki.sei.cmu.edu/confluence/display/c/Rose">
       Compass/ROSE
      </a>
     </td>
     <td>
     </td>
     <td>
     </td>
     <td>
     </td>
    </tr>
    <tr>
     <td>
      <a href="https://wiki.sei.cmu.edu/confluence/display/c/Coverity">
       Coverity
      </a>
     </td>
     <td>
      2017.07
     </td>
     <td>
      <strong>RESOURCE_LEAK (partial)</strong>
     </td>
     <td>
      Partially implemented
     </td>
    </tr>
    <tr>
     <td>
      <a href="https://wiki.sei.cmu.edu/confluence/display/c/Helix+QAC">
       Helix QAC
      </a>
     </td>
     <td>
      2021.3
     </td>
     <td>
      <strong>C2701, C2702, C2703</strong>
      <strong>C++2701, C++2702, C++2703</strong>
     </td>
     <td>
     </td>
    </tr>
    <tr>
     <td>
      <a href="https://wiki.sei.cmu.edu/confluence/display/c/Klocwork">
       Klocwork
      </a>
     </td>
     <td>
      2021.4
     </td>
     <td>
      <strong><a href="https://support.roguewave.com/documentation/klocwork/en/current/certcandcsecurecodingstandardidsmappedtoklocworkcandccheckers/">RH.LEAK</a></strong>
     </td>
     <td>
     </td>
    </tr>
    <tr>
     <td>
      <a href="https://wiki.sei.cmu.edu/confluence/display/c/LDRA">
       LDRA tool suite
      </a>
     </td>
     <td>
      9.7.1
     </td>
     <td>
      <strong>49 D</strong>
     </td>
     <td>
      Partially implemented
     </td>
    </tr>
    <tr>
     <td>
      <a href="https://wiki.sei.cmu.edu/confluence/display/c/Parasoft">
       Parasoft C/C++test
      </a>
     </td>
     <td>
      2021.2
     </td>
     <td>
      <strong>CERT_C-FIO42-a</strong>
     </td>
     <td>
      Ensure resources are freed
     </td>
    </tr>
    <tr>
     <td>
      <a href="https://wiki.sei.cmu.edu/confluence/display/c/PC-lint+Plus">
       PC-lint Plus
      </a>
     </td>
     <td>
      1.4
     </td>
     <td>
      <strong>429</strong>
     </td>
     <td>
      Partially supported
     </td>
    </tr>
    <tr>
     <td>
      <a href="https://wiki.sei.cmu.edu/confluence/display/c/Polyspace+Bug+Finder">
       Polyspace Bug Finder
      </a>
     </td>
     <td>
      R2021a
     </td>
     <td>
      <a href="https://www.mathworks.com/help/bugfinder/ref/certcrulefio42c.html">
       CERT C: Rule FIO42-C
      </a>
     </td>
     <td>
      Checks for resource leak (rule partially covered)
     </td>
    </tr>
    <tr>
     <td>
      <a href="https://wiki.sei.cmu.edu/confluence/display/c/PRQA+QA-C">
       PRQA QA-C
      </a>
     </td>
     <td>
      9.7
     </td>
     <td>
      <strong>2701, 2702, 2703</strong>
     </td>
     <td>
     </td>
    </tr>
    <tr>
     <td>
      <a href="https://wiki.sei.cmu.edu/confluence/pages/viewpage.action?pageId=88046345">
       PRQA QA-C++
      </a>
     </td>
     <td>
      4.4
     </td>
     <td>
      <strong>2701, 2702, 2703</strong>
     </td>
     <td>
     </td>
    </tr>
    <tr>
     <td>
      <a href="https://wiki.sei.cmu.edu/confluence/pages/viewpage.action?pageId=87151949">
       SonarQube C/C++ Plugin
      </a>
     </td>
     <td>
      3.11
     </td>
     <td>
      <strong><a href="https://www.sonarsource.com/products/codeanalyzers/sonarcfamilyforcpp/rules-c.html#RSPEC-2095">S2095</a></strong>
     </td>
     <td>
     </td>
    </tr>
   </tbody>
  </table>
 </section>
 <section title="Related Vulnerabilities">
  <p>Search for <a href="https://wiki.sei.cmu.edu/confluence/display/c/BB.+Definitions#BB.Definitions-vulnerability">vulnerabilities</a> resulting from the violation of this rule on the <a href="https://www.kb.cert.org/vulnotes/bymetric?searchview&amp;query=FIELD+KEYWORDS+contains+FIO42-C">CERT website</a>.</p>
 </section>
 <section title="Related Guidelines">
  <p><a href="https://wiki.sei.cmu.edu/confluence/display/c/How+this+Coding+Standard+is+Organized#HowthisCodingStandardisOrganized-RelatedGuidelines">Key here</a> (explains table format and definitions)</p>
  <table>
   <tbody>
    <tr>
     <th>
      Taxonomy
     </th>
     <th>
      Taxonomy item
     </th>
     <th>
      Relationship
     </th>
    </tr>
    <tr>
     <td>
      <a href="https://wiki.sei.cmu.edu/confluence/pages/viewpage.action?pageId=88046682">
       CERT C
      </a>
     </td>
     <td>
      <a href="https://wiki.sei.cmu.edu/confluence/display/cplusplus/FIO51-CPP.+Close+files+when+they+are+no+longer+needed">
       FIO51-CPP. Close files when they are no longer needed
      </a>
     </td>
     <td>
      Prior to 2018-01-12: CERT: Unspecified Relationship
     </td>
    </tr>
    <tr>
     <td>
      <a href="https://wiki.sei.cmu.edu/confluence/display/java/SEI+CERT+Oracle+Coding+Standard+for+Java">
       CERT Oracle Secure Coding Standard for Java
      </a>
     </td>
     <td>
      <a href="https://wiki.sei.cmu.edu/confluence/display/java/FIO04-J.+Release+resources+when+they+are+no+longer+needed">
       FIO04-J. Release resources when they are no longer needed
      </a>
     </td>
     <td>
      Prior to 2018-01-12: CERT: Unspecified Relationship
     </td>
    </tr>
    <tr>
     <td>
      <a href="https://wiki.sei.cmu.edu/confluence/display/c/AA.+Bibliography#AA.Bibliography-ISO-IECTS17961">
       ISO/IEC TS 17961:2013
      </a>
     </td>
     <td>
      Failing to close files or free dynamic memory when they are no longer needed [fileclose]
     </td>
     <td>
      Prior to 2018-01-12: CERT: Unspecified Relationship
     </td>
    </tr>
    <tr>
     <td>
      <a href="https://cwe.mitre.org/data/index.html">
       CWE 2.11
      </a>
     </td>
     <td>
      <a href="http://cwe.mitre.org/data/definitions/404.html">
       CWE-404
      </a>
      , Improper Resource Shutdown or Release
     </td>
     <td>
      2017-07-06: CERT: Rule subset of CWE
     </td>
    </tr>
    <tr>
     <td>
      <a href="http://cwe.mitre.org/">
       CWE 2.11
      </a>
     </td>
     <td>
      <a href="https://cwe.mitre.org/data/index.html459.html">
       CWE-459
      </a>
     </td>
     <td>
      2017-07-06: CERT: Rule subset of CWE
     </td>
    </tr>
    <tr>
     <td>
      <a href="http://cwe.mitre.org/">
       CWE 2.11
      </a>
     </td>
     <td>
      <a href="https://cwe.mitre.org/data/index.html772.html">
       CWE-772
      </a>
     </td>
     <td>
      2017-07-06: CERT: Rule subset of CWE
     </td>
    </tr>
    <tr>
     <td>
      <a href="http://cwe.mitre.org/">
       CWE 2.11
      </a>
     </td>
     <td>
      <a href="https://cwe.mitre.org/data/index.html773.html">
       CWE-773
      </a>
     </td>
     <td>
      2017-07-06: CERT: Rule subset of CWE
     </td>
    </tr>
    <tr>
     <td>
      <a href="http://cwe.mitre.org/">
       CWE 2.11
      </a>
     </td>
     <td>
      <a href="https://cwe.mitre.org/data/index.html775.html">
       CWE-775
      </a>
     </td>
     <td>
      2017-07-06: CERT: Rule subset of CWE
     </td>
    </tr>
    <tr>
     <td>
      <a href="http://cwe.mitre.org/">
       CWE 2.11
      </a>
     </td>
     <td>
      <a href="https://cwe.mitre.org/data/definitions/403.html">
       CWE-403
      </a>
     </td>
     <td>
      2017-10-30:MITRE:Unspecified Relationship
      2018-10-18:CERT:
      Partial overlap
     </td>
    </tr>
   </tbody>
  </table>
 </section>
 <section title="CERT-CWE Mapping Notes">
  <p><a href="https://wiki.sei.cmu.edu/confluence/pages/viewpage.action?pageId=87152408#HowthisCodingStandardisOrganized-CERT-CWEMappingNotes">Key here</a> for mapping notes</p>
  <p><strong>CWE-773/CWE-775 and FIO42-C</strong></p>
  <p>CWE-773 = CWE-775</p>
  <p>CWE-773 = Union( FIO42-C, list) where list =</p>
  <ul>
   <li>Failure to free resource handles besides files</li>
  </ul>
  <p><strong>CWE-404/CWE-459/CWE-771/CWE-772 and FIO42-C/MEM31-C</strong></p>
  <p>Intersection( FIO42-C, MEM31-C) = √ò</p>
  <p>CWE-404 = CWE-459 = CWE-771 = CWE-772</p>
  <p>CWE-404 = Union( FIO42-C, MEM31-C list) where list =</p>
  <ul>
   <li>Failure to free resources besides files or memory chunks, such as mutexes)</li>
  </ul>
  <p><strong>CWE-403 and FIO42-C</strong></p>
  <p>CWE-403 - FIO42-C = list, where list =</p>
  <ul>
   <li>A process opens and closes a sensitive file descriptor, but also executes a child process while the file descriptor is open.</li>
  </ul>
  <p>FIO42-C - CWE-403 = SPECIAL_CASES, where SPECIAL_CASES =</p>
  <ul>
   <li>A program opens a file descriptor and fails to close it, but does not invoke any child processes while the file descriptor is open.</li>
  </ul>
 </section>
 <section title="Bibliography">
  <table>
   <tbody>
    <tr>
     <td>
      [
      <a href="https://wiki.sei.cmu.edu/confluence/display/c/AA.+Bibliography#AA.Bibliography-IEEEStd1003.1-2013">
       IEEE Std 1003.1:2013
      </a>
      ]
     </td>
     <td>
      XSH, System Interfaces,
      <code>open</code>
     </td>
    </tr>
   </tbody>
  </table>
 </section>
</qhelp>