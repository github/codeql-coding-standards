<!DOCTYPE qhelp SYSTEM "qhelp.dtd">
<qhelp>
 <section title="Description">
  <p>Pseudorandom number generators use mathematical algorithms to produce a sequence of numbers with good statistical properties, but the numbers produced are not genuinely random.</p>
  <p>The C Standard <code>rand()</code> function makes no guarantees as to the quality of the random sequence produced. The numbers generated by some implementations of <code>rand()</code> have a comparatively short cycle and the numbers can be predictable. Applications that have strong pseudorandom number requirements must use a generator that is known to be sufficient for their needs.</p>
 </section>
 <section title="Noncompliant Code Example">
  <p>The following noncompliant code generates an ID with a numeric part produced by calling the <code>rand()</code> function. The IDs produced are predictable and have limited randomness.</p>
  <sample language="cpp">#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
 
enum { len = 12 };
 
void func(void) {
  /*
   * id will hold the ID, starting with the characters
   *  "ID" followed by a random integer.
   */
  char id[len];  
  int r;
  int num;
  /* ... */
  r = rand();  /* Generate a random integer */
  num = snprintf(id, len, "ID%-d", r);  /* Generate the ID */
  /* ... */
}</sample>
 </section>
 <section title="Compliant Solution (POSIX)">
  <p>This compliant solution replaces the <code>rand()</code> function with the POSIX <code>random()</code> function:</p>
  <sample language="cpp">#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;time.h&gt;

enum { len = 12 }; 

void func(void) {
  /*
   * id will hold the ID, starting with the characters
   *  "ID" followed by a random integer.
   */
  char id[len];  
  int r;
  int num;
  /* ... */
  struct timespec ts;
  if (timespec_get(&amp;ts, TIME_UTC) == 0) {
    /* Handle error */
  }
  srandom(ts.tv_nsec ^ ts.tv_sec);  /* Seed the PRNG */
  /* ... */
  r = random();  /* Generate a random integer */
  num = snprintf(id, len, "ID%-d", r);  /* Generate the ID */
  /* ... */
}</sample>
  <p>The POSIX <code>random()</code> function is a better pseudorandom number generator. Although on some platforms the low dozen bits generated by <code>rand()</code> go through a cyclic pattern, all the bits generated by <code>random()</code> are usable. The <code>rand48</code> family of functions provides another alternative for pseudorandom numbers.</p>
  <p>Although not specified by POSIX, <a href="http://www.openbsd.org/cgi-bin/man.cgi?query=arc4random">arc4random()</a> is another possibility for systems that support it. The <code>arc4random(3)</code> manual page [<a href="https://wiki.sei.cmu.edu/confluence/display/c/AA.+Bibliography#AA.Bibliography-OpenBSD">OpenBSD</a>] states</p>
  <blockquote>
   <p>... provides higher quality of data than those described in rand(3), random(3), and drand48(3).</p>
  </blockquote>
  <p>To achieve the best random numbers possible, an <a href="https://wiki.sei.cmu.edu/confluence/display/c/BB.+Definitions#BB.Definitions-implementation">implementation</a>-specific function must be used. When unpredictability is crucial and speed is not an issue, as in the creation of strong cryptographic keys, use a true entropy source, such as <code>/dev/random</code>, or a hardware device capable of generating random numbers. The <code>/dev/random</code> device can block for a long time if there are not enough events going on to generate sufficient entropy.</p>
 </section>
 <section title="Compliant Solution (Windows)">
  <p>On Windows platforms, the <a href="https://docs.microsoft.com/en-us/windows/desktop/api/bcrypt/nf-bcrypt-bcryptgenrandom">BCryptGenRandom()</a> function can be used to generate cryptographically strong random numbers. The Microsoft Developer Network <code>BCryptGenRandom()</code> reference [<a href="https://wiki.sei.cmu.edu/confluence/display/c/AA.+Bibliography#AA.Bibliography-MSDN">MSDN</a>] states:</p>
  <blockquote>
   <p>The default random number provider implements an algorithm for generating random numbers that complies with the NIST SP800-90 standard, specifically the CTR_DRBG portion of that standard.</p>
  </blockquote>
  <sample language="cpp">#include &lt;Windows.h&gt;
#include &lt;bcrypt.h&gt;
#include &lt;stdio.h&gt;

#pragma comment(lib, "Bcrypt")

void func(void) {
  BCRYPT_ALG_HANDLE Prov;
  int Buffer;
  if (!BCRYPT_SUCCESS(
          BCryptOpenAlgorithmProvider(&amp;Prov, BCRYPT_RNG_ALGORITHM,
                                      NULL, 0))) {
    /* handle error */
  }
  if (!BCRYPT_SUCCESS(BCryptGenRandom(Prov, (PUCHAR) (&amp;Buffer),
                                      sizeof(Buffer), 0))) {
    /* handle error */
  }
  printf("Random number: %d\n", Buffer);
  BCryptCloseAlgorithmProvider(Prov, 0);
}</sample>
 </section>
 <section title="Risk Assessment">
  <p>The use of the <code>rand()</code> function can result in predictable random numbers.</p>
  <table>
   <tbody>
    <tr>
     <th>
      Rule
     </th>
     <th>
      Severity
     </th>
     <th>
      Likelihood
     </th>
     <th>
      Remediation Cost
     </th>
     <th>
      Priority
     </th>
     <th>
      Level
     </th>
    </tr>
    <tr>
     <td>
      MSC30-C
     </td>
     <td>
      Medium
     </td>
     <td>
      Unlikely
     </td>
     <td>
      Low
     </td>
     <td>
      <strong>P6</strong>
     </td>
     <td>
      <strong>L2</strong>
     </td>
    </tr>
   </tbody>
  </table>
 </section>
 <section title="Automated Detection">
  <table>
   <tbody>
    <tr>
     <th>
      Tool
     </th>
     <th>
      Version
     </th>
     <th>
      Checker
     </th>
     <th>
      Description
     </th>
    </tr>
    <tr>
     <td>
      <a href="https://wiki.sei.cmu.edu/confluence/pages/viewpage.action?pageId=87152428">
       Astrée
      </a>
     </td>
     <td>
      20.10
     </td>
     <td>
      <strong>stdlib-use-rand</strong>
     </td>
     <td>
      Fully checked
     </td>
    </tr>
    <tr>
     <td>
      <a href="https://wiki.sei.cmu.edu/confluence/display/c/Axivion+Bauhaus+Suite">
       Axivion Bauhaus Suite
      </a>
     </td>
     <td>
      7.2.0
     </td>
     <td>
      <strong>CertC-MSC30</strong>
     </td>
     <td>
     </td>
    </tr>
    <tr>
     <td>
      <a href="https://wiki.sei.cmu.edu/confluence/display/c/Clang">
       Clang
      </a>
     </td>
     <td>
      4.0 (prerelease)
     </td>
     <td>
      <code>cert-msc30-c</code>
     </td>
     <td>
      Checked by
      <code>clang-tidy</code>
     </td>
    </tr>
    <tr>
     <td>
      <a href="https://wiki.sei.cmu.edu/confluence/display/c/CodeSonar">
       CodeSonar
      </a>
     </td>
     <td>
      6.2p0
     </td>
     <td>
      <strong>BADFUNC.RANDOM.RAND</strong>
     </td>
     <td>
      Use of rand
     </td>
    </tr>
    <tr>
     <td>
      <a href="https://wiki.sei.cmu.edu/confluence/display/c/Rose">
       Compass/ROSE
      </a>
     </td>
     <td>
     </td>
     <td>
     </td>
     <td>
     </td>
    </tr>
    <tr>
     <td>
      <a href="https://wiki.sei.cmu.edu/confluence/display/c/Coverity">
       Coverity
      </a>
     </td>
     <td>
      2017.07
     </td>
     <td>
      <strong>DONTCALL</strong>
     </td>
     <td>
      Implemented - weak support
     </td>
    </tr>
    <tr>
     <td>
      <a href="https://wiki.sei.cmu.edu/confluence/display/c/ECLAIR">
       ECLAIR
      </a>
     </td>
     <td>
      1.2
     </td>
     <td>
      <strong>CC2.MSC30</strong>
     </td>
     <td>
      Fully implemented
     </td>
    </tr>
    <tr>
     <td>
      <a href="https://wiki.sei.cmu.edu/confluence/display/c/Helix+QAC">
       Helix QAC
      </a>
     </td>
     <td>
      2022.1
     </td>
     <td>
      <strong>C5022</strong>
      <strong>C++5029</strong>
     </td>
     <td>
     </td>
    </tr>
    <tr>
     <td>
      <a href="https://wiki.sei.cmu.edu/confluence/display/c/Klocwork">
       Klocwork
      </a>
     </td>
     <td>
      2022.1
     </td>
     <td>
      <strong>CERT.MSC.STD_RAND_CALL</strong>
     </td>
     <td>
     </td>
    </tr>
    <tr>
     <td>
      <a href="https://wiki.sei.cmu.edu/confluence/display/c/LDRA">
       LDRA tool suite
      </a>
     </td>
     <td>
      9.7.1
     </td>
     <td>
      <strong>44 S</strong>
     </td>
     <td>
      Enhanced enforcement
     </td>
    </tr>
    <tr>
     <td>
      <a href="https://wiki.sei.cmu.edu/confluence/display/c/Parasoft">
       Parasoft C/C++test
      </a>
     </td>
     <td>
      2021.2
     </td>
     <td>
      <strong>CERT_C-MSC30-a</strong>
     </td>
     <td>
      Do not use the rand() function for generating pseudorandom numbers
     </td>
    </tr>
    <tr>
     <td>
      <a href="https://wiki.sei.cmu.edu/confluence/display/c/PC-lint+Plus">
       PC-lint Plus
      </a>
     </td>
     <td>
      1.4
     </td>
     <td>
      <strong>586</strong>
     </td>
     <td>
      Fully supported
     </td>
    </tr>
    <tr>
     <td>
      <a href="https://wiki.sei.cmu.edu/confluence/display/c/Polyspace+Bug+Finder">
       Polyspace Bug Finder
      </a>
     </td>
     <td>
      R2021a
     </td>
     <td>
      <a href="https://www.mathworks.com/help/bugfinder/ref/certcrulemsc30c.html">
       CERT C: Rule MSC30-C
      </a>
     </td>
     <td>
      Checks for vulnerable pseudo-random number generator (rule fully covered)
     </td>
    </tr>
    <tr>
     <td>
      <a href="https://wiki.sei.cmu.edu/confluence/display/c/PRQA+QA-C">
       PRQA QA-C
      </a>
     </td>
     <td>
      9.7
     </td>
     <td>
      <strong>5022</strong>
     </td>
     <td>
      Fully implemented
     </td>
    </tr>
    <tr>
     <td>
      <a href="https://wiki.sei.cmu.edu/confluence/pages/viewpage.action?pageId=88046345">
       PRQA QA-C++
      </a>
     </td>
     <td>
      4.4
     </td>
     <td>
      <strong>5029</strong>
     </td>
     <td>
     </td>
    </tr>
    <tr>
     <td>
      <a href="https://wiki.sei.cmu.edu/confluence/display/c/RuleChecker">
       RuleChecker
      </a>
     </td>
     <td>
      20.10
     </td>
     <td>
      <strong>stdlib-use-rand</strong>
     </td>
     <td>
      Fully checked
     </td>
    </tr>
   </tbody>
  </table>
 </section>
 <section title="Related Vulnerabilities">
  <p>Search for <a href="https://wiki.sei.cmu.edu/confluence/display/c/BB.+Definitions#BB.Definitions-vulnerability">vulnerabilities</a> resulting from the violation of this rule on the <a href="https://www.kb.cert.org/vulnotes/bymetric?searchview&amp;query=FIELD+KEYWORDS+contains+MSC30-C">CERT website</a>.</p>
 </section>
 <section title="Related Guidelines">
  <p><a href="https://wiki.sei.cmu.edu/confluence/display/c/How+this+Coding+Standard+is+Organized#HowthisCodingStandardisOrganized-RelatedGuidelines">Key here</a> (explains table format and definitions)</p>
  <table>
   <tbody>
    <tr>
     <th>
      Taxonomy
     </th>
     <th>
      Taxonomy item
     </th>
     <th>
      Relationship
     </th>
    </tr>
    <tr>
     <td>
      <a href="https://wiki.sei.cmu.edu/confluence/pages/viewpage.action?pageId=88046682">
       CERT C
      </a>
     </td>
     <td>
      <a href="https://wiki.sei.cmu.edu/confluence/display/cplusplus/MSC50-CPP.+Do+not+use+std%3A%3Arand%28%29+for+generating+pseudorandom+numbers">
       MSC50-CPP. Do not use std::rand() for generating pseudorandom numbers
      </a>
     </td>
     <td>
      Prior to 2018-01-12: CERT: Unspecified Relationship
     </td>
    </tr>
    <tr>
     <td>
      <a href="https://wiki.sei.cmu.edu/confluence/display/java/SEI+CERT+Oracle+Coding+Standard+for+Java">
       CERT Oracle Secure Coding Standard for Java
      </a>
     </td>
     <td>
      <a href="https://wiki.sei.cmu.edu/confluence/display/java/MSC02-J.+Generate+strong+random+numbers">
       MSC02-J. Generate strong random numbers
      </a>
     </td>
     <td>
      Prior to 2018-01-12: CERT: Unspecified Relationship
     </td>
    </tr>
    <tr>
     <td>
      <a href="https://cwe.mitre.org/data/index.html">
       CWE 2.11
      </a>
     </td>
     <td>
      <a href="http://cwe.mitre.org/data/definitions/327.html">
       CWE-327
      </a>
      , Use of a Broken or Risky Cryptographic Algorithm
     </td>
     <td>
      2017-05-16: CERT: Rule subset of CWE
     </td>
    </tr>
    <tr>
     <td>
      <a href="https://cwe.mitre.org/data/index.html">
       CWE 2.11
      </a>
     </td>
     <td>
      <a href="http://cwe.mitre.org/">
       CWE-330
      </a>
      , Use of Insufficiently Random Values
     </td>
     <td>
      2017-06-28: CERT: Rule subset of CWE
     </td>
    </tr>
    <tr>
     <td>
      <a href="https://cwe.mitre.org/data/index.html">
       CWE 2.11
      </a>
     </td>
     <td>
      <a href="https://cwe.mitre.org/data/definitions/338.html">
       CWE-338
      </a>
      , Use of Cryptographically Weak Pseudo-Random Number Generator (PRNG)
     </td>
     <td>
      2017-06-28: CERT: Rule subset of CWE
     </td>
    </tr>
    <tr>
     <td>
      <a href="http://cwe.mitre.org/">
       CWE 2.11
      </a>
     </td>
     <td>
      <a href="https://cwe.mitre.org/data/index.html676.html">
       CWE-676
      </a>
     </td>
     <td>
      2017-05-18: CERT: Rule subset of CWE
     </td>
    </tr>
   </tbody>
  </table>
 </section>
 <section title="CERT-CWE Mapping Notes">
  <p><a href="https://wiki.sei.cmu.edu/confluence/pages/viewpage.action?pageId=87152408#HowthisCodingStandardisOrganized-CERT-CWEMappingNotes">Key here</a> for mapping notes</p>
  <p><strong>CWE-327 and MSC30-C</strong></p>
  <ul>
   <li>CWE-327 forbids “broken or risky cryptographic algorithms” but does not specify what constitutes such an algo.</li>
  </ul>
  <ul>
   <li>Per CERT judgement, rand() qualifies, so:</li>
  </ul>
  <ul>
   <li>CWE-327 = Union( MSC30-C, list) where list =</li>
  </ul>
  <ul>
   <li>Invocation of broken/risky crypto algorithms besides rand()</li>
  </ul>
  <p><strong>CWE-338 and MSC30-C</strong></p>
  <p>CWE-338 = Union( MSC30-C, list) where list =</p>
  <ul>
   <li>Use of a weak PRNG besides standard C rand().</li>
  </ul>
  <p><strong>CWE-330 and MSC30-C</strong></p>
  <p>Independent( MSC30-C, MSC32-C, CON33-C)</p>
  <p>CWE-330 = Union( MSC30-C, MSC32-C, CON33-C, list) where list = other improper use or creation of random values. (EG the would qualify)</p>
  <p>MSC30-C, MSC32-C and CON33-C are independent, they have no intersections. They each specify distinct errors regarding PRNGs.</p>
  <p><strong>CWE-676 and MSC30-C</strong></p>
  <ul>
   <li>Independent( ENV33-C, CON33-C, STR31-C, EXP33-C, MSC30-C, ERR34-C)</li>
  </ul>
  <ul>
   <li>MSC30-C implies that rand() is dangerous.</li>
  </ul>
  <ul>
   <li>CWE-676 = Union( MSC30-C, list) where list =</li>
  </ul>
  <ul>
   <li>Invocation of other dangerous functions, besides rand().</li>
  </ul>
 </section>
 <section title="Bibliography">
  <table>
   <tbody>
    <tr>
     <td>
      [
      <a href="https://wiki.sei.cmu.edu/confluence/display/c/AA.+Bibliography#AA.Bibliography-MSDN">
       MSDN
      </a>
      ]
     </td>
     <td>
      "
      <a href="https://docs.microsoft.com/en-us/windows/desktop/api/bcrypt/nf-bcrypt-bcryptgenrandom">
       BCryptGenRandom() Function
      </a>
      "
     </td>
    </tr>
    <tr>
     <td>
      [
      <a href="https://wiki.sei.cmu.edu/confluence/display/c/AA.+Bibliography#AA.Bibliography-OpenBSD">
       OpenBSD
      </a>
      ]
     </td>
     <td>
      <a href="http://www.openbsd.org/cgi-bin/man.cgi?query=arc4random">
       arc4random()
      </a>
     </td>
    </tr>
   </tbody>
  </table>
 </section>
</qhelp>