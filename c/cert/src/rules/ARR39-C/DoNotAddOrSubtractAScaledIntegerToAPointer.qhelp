<!DOCTYPE qhelp SYSTEM "qhelp.dtd">
<qhelp>
 <section title="Description">
  <p>Pointer arithmetic is appropriate only when the pointer argument refers to an array (see <a href="https://wiki.sei.cmu.edu/confluence/display/c/ARR37-C.+Do+not+add+or+subtract+an+integer+to+a+pointer+to+a+non-array+object">ARR37-C. Do not add or subtract an integer to a pointer to a non-array object</a>), including an array of bytes. When performing pointer arithmetic, the size of the value to add to or subtract from a pointer is automatically scaled to the size of the type of the referenced array object. Adding or subtracting a scaled integer value to or from a pointer is invalid because it may yield a pointer that does not point to an element within or one past the end of the array. (See <a href="https://wiki.sei.cmu.edu/confluence/display/c/ARR30-C.+Do+not+form+or+use+out-of-bounds+pointers+or+array+subscripts">ARR30-C. Do not form or use out-of-bounds pointers or array subscripts</a>.)</p>
  <p>Adding a pointer to an array of a type other than character to the result of the <code>sizeof</code> operator or <code>offsetof</code> macro, which returns a size and an offset, respectively, violates this rule. However, adding an array pointer to the number of array elements, for example, by using the <code>arr[sizeof(arr)/sizeof(arr[0])])</code> idiom, is allowed provided that <code>arr</code> refers to an array and not a pointer.</p>
 </section>
 <section title="Noncompliant Code Example">
  <p>In this noncompliant code example, <code>sizeof(buf)</code> is added to the array <code>buf</code>. This example is noncompliant because <code>sizeof(buf)</code> is scaled by <code>int</code> and then scaled again when added to <code>buf</code>.</p>
  <sample language="cpp">enum { INTBUFSIZE = 80 };

extern int getdata(void);
int buf[INTBUFSIZE];
 
void func(void) {
  int *buf_ptr = buf;

  while (buf_ptr &lt; (buf + sizeof(buf))) {
    *buf_ptr++ = getdata();
  }
}</sample>
 </section>
 <section title="Compliant Solution">
  <p>This compliant solution uses an unscaled integer to obtain a pointer to the end of the array:</p>
  <sample language="cpp">enum { INTBUFSIZE = 80 };

extern int getdata(void);
int buf[INTBUFSIZE];

void func(void) {
  int *buf_ptr = buf;

  while (buf_ptr &lt; (buf + INTBUFSIZE)) {
    *buf_ptr++ = getdata();
  }
}</sample>
 </section>
 <section title="Noncompliant Code Example">
  <p>In this noncompliant code example, <code>skip</code> is added to the pointer <code>s</code>. However, <code>skip</code> represents the byte offset of <code>ull_b</code> in <code>struct big</code>. When added to <code>s</code>, <code>skip</code> is scaled by the size of <code>struct big</code>.</p>
  <sample language="cpp">#include &lt;string.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;stddef.h&gt;
 
struct big {
  unsigned long long ull_a;
  unsigned long long ull_b;
  unsigned long long ull_c;
  int si_e;
  int si_f;
};

void func(void) {
  size_t skip = offsetof(struct big, ull_b);
  struct big *s = (struct big *)malloc(sizeof(struct big));
  if (s == NULL) {
    /* Handle malloc() error */
  }

  memset(s + skip, 0, sizeof(struct big) - skip);
  /* ... */
  free(s);
  s = NULL;
}</sample>
 </section>
 <section title="Compliant Solution">
  <p>This compliant solution uses an <code>unsigned char *</code> to calculate the offset instead of using a <code>struct big *</code>, which would result in scaled arithmetic:</p>
  <sample language="cpp">#include &lt;string.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;stddef.h&gt;
 
struct big {
  unsigned long long ull_a;
  unsigned long long ull_b;
  unsigned long long ull_c;
  int si_d;
  int si_e;
};

void func(void) {
  size_t skip = offsetof(struct big, ull_b);
  unsigned char *ptr = (unsigned char *)malloc(
    sizeof(struct big)
  );
  if (ptr == NULL) {
     /* Handle malloc() error */
  }

  memset(ptr + skip, 0, sizeof(struct big) - skip);
  /* ... */
  free(ptr);
  ptr = NULL;
}</sample>
 </section>
 <section title="Noncompliant Code Example">
  <p>In this noncompliant code example, <code>wcslen(error_msg) * sizeof(wchar_t)</code> bytes are scaled by the size of <code>wchar_t</code> when added to <code>error_msg</code>:</p>
  <sample language="cpp">#include &lt;wchar.h&gt;
#include &lt;stdio.h&gt;
 
enum { WCHAR_BUF = 128 };
 
void func(void) {
  wchar_t error_msg[WCHAR_BUF];

  wcscpy(error_msg, L"Error: ");
  fgetws(error_msg + wcslen(error_msg) * sizeof(wchar_t), 
         WCHAR_BUF - 7, stdin);
  /* ... */
}</sample>
 </section>
 <section title="Compliant Solution">
  <p>This compliant solution does not scale the length of the string; <code>wcslen()</code> returns the number of characters and the addition to <code>error_msg</code> is scaled:</p>
  <sample language="cpp">#include &lt;wchar.h&gt;
#include &lt;stdio.h&gt;

enum { WCHAR_BUF = 128 };
const wchar_t ERROR_PREFIX[7] = L"Error: ";

void func(void) {
  const size_t prefix_len = wcslen(ERROR_PREFIX);
  wchar_t error_msg[WCHAR_BUF];

  wcscpy(error_msg, ERROR_PREFIX);
  fgetws(error_msg + prefix_len,
        WCHAR_BUF - prefix_len, stdin);
  /* ... */
}</sample>
 </section>
 <section title="Risk Assessment">
  <p>Failure to understand and properly use pointer arithmetic can allow an attacker to execute arbitrary code.</p>
  <table>
   <tbody>
    <tr>
     <th>
      Rule
     </th>
     <th>
      Severity
     </th>
     <th>
      Likelihood
     </th>
     <th>
      Remediation Cost
     </th>
     <th>
      Priority
     </th>
     <th>
      Level
     </th>
    </tr>
    <tr>
     <td>
      ARR39-C
     </td>
     <td>
      High
     </td>
     <td>
      Probable
     </td>
     <td>
      High
     </td>
     <td>
      <strong>P6</strong>
     </td>
     <td>
      <strong>L2</strong>
     </td>
    </tr>
   </tbody>
  </table>
 </section>
 <section title="Automated Detection">
  <table>
   <tbody>
    <tr>
     <th>
      Tool
     </th>
     <th>
      Version
     </th>
     <th>
      Checker
     </th>
     <th>
      Description
     </th>
    </tr>
    <tr>
     <td>
      <a href="https://wiki.sei.cmu.edu/confluence/pages/viewpage.action?pageId=87152428">
       Astrée
      </a>
     </td>
     <td>
      22.04
     </td>
     <td>
      <strong>scaled-pointer-arithmetic </strong>
     </td>
     <td>
      Partially checked
      Besides direct rule violations, Astrée reports all (resulting) out-of-bound array accesses.
     </td>
    </tr>
    <tr>
     <td>
      <a href="https://wiki.sei.cmu.edu/confluence/display/c/Axivion+Bauhaus+Suite">
       Axivion Bauhaus Suite
      </a>
     </td>
     <td>
      7.2.0
     </td>
     <td>
      <strong>CertC-ARR39</strong>
     </td>
     <td>
      Fully implemented
     </td>
    </tr>
    <tr>
     <td>
      <a href="https://wiki.sei.cmu.edu/confluence/display/c/CodeSonar">
       CodeSonar
      </a>
     </td>
     <td>
      7.1p0
     </td>
     <td>
      <strong>LANG.MEM.BO</strong>
      <strong>LANG.MEM.BU</strong>
      <strong>LANG.MEM.TBA</strong>
      <strong>LANG.MEM.TO</strong>
      <strong>LANG.MEM.TULANG.STRUCT.PARITH</strong>
      <strong>LANG.STRUCT.PBB</strong>
      <strong>LANG.STRUCT.PPE</strong>
      <strong>BADFUNC.BO.*</strong>
     </td>
     <td>
      Buffer overrun
      Buffer underrun
      Tainted buffer access
      Type overrun
      Type underrun
      Pointer Arithmetic
      Pointer before beginning of object
      Pointer past end of object
      A collection of warning classes that report uses of library functions prone to internal buffer overflows.
     </td>
    </tr>
    <tr>
     <td>
      <a href="https://wiki.sei.cmu.edu/confluence/display/c/Coverity">
       Coverity
      </a>
     </td>
     <td>
      2017.07
     </td>
     <td>
      <strong>BAD_SIZEOF</strong>
     </td>
     <td>
      Partially implemented
     </td>
    </tr>
    <tr>
     <td>
      <a href="https://wiki.sei.cmu.edu/confluence/display/c/Helix+QAC">
       Helix QAC
      </a>
     </td>
     <td>
      2022.2
     </td>
     <td>
      <strong>C4955, C4956, C4957</strong>
      <strong>C++4955, C++4956, C++4957</strong>
     </td>
     <td>
     </td>
    </tr>
    <tr>
     <td>
      <a href="https://wiki.sei.cmu.edu/confluence/display/c/Klocwork">
       Klocwork
      </a>
     </td>
     <td>
      2022.2
     </td>
     <td>
      <strong>MISRA.PTR.ARITH.2012</strong>
     </td>
     <td>
     </td>
    </tr>
    <tr>
     <td>
      <a href="https://wiki.sei.cmu.edu/confluence/pages/viewpage.action?pageId=87152309">
       LDRA tool suite
      </a>
     </td>
     <td>
      9.7.1
     </td>
     <td>
      <strong>47 S, 489 S, 567 S,64 X, 66 X, 68 X,69 X, 70 X, 71 X</strong>
     </td>
     <td>
      Partially implemented
     </td>
    </tr>
    <tr>
     <td>
      <a href="https://wiki.sei.cmu.edu/confluence/display/c/Parasoft">
       Parasoft C/C++test
      </a>
     </td>
     <td>
      2022.1
     </td>
     <td>
      <strong>CERT_C-ARR39-a</strong>
      <strong>CERT_C-ARR39-b</strong>
      <strong>CERT_C-ARR39-c</strong>
     </td>
     <td>
      Avoid accessing arrays out of bounds
      Pointer arithmetic should not be used
      Do not add or subtract a scaled integer to a pointer
     </td>
    </tr>
    <tr>
     <td>
      Polyspace Bug Finder
     </td>
     <td>
      R2022a
     </td>
     <td>
      <a href="https://www.mathworks.com/help/bugfinder/ref/certcrulearr39c.html">
       CERT C: Rule ARR39-C
      </a>
     </td>
     <td>
      Checks for:
      Incorrect pointer scalingncorrect pointer scaling, pointer access out of boundsointer access out of bounds, possible misuse of sizeofossible misuse of sizeof.
      Rule partially covered.
     </td>
    </tr>
    <tr>
     <td>
      <a href="https://wiki.sei.cmu.edu/confluence/display/c/PRQA+QA-C">
       PRQA QA-C
      </a>
     </td>
     <td>
      9.7
     </td>
     <td>
      <strong> 4955, 4956, 4957</strong>
     </td>
     <td>
     </td>
    </tr>
    <tr>
     <td>
      <a href="https://wiki.sei.cmu.edu/confluence/pages/viewpage.action?pageId=88046345">
       PRQA QA-C++
      </a>
     </td>
     <td>
      4.4
     </td>
     <td>
      <strong>4955, 4956, 4957</strong>
     </td>
     <td>
     </td>
    </tr>
    <tr>
     <td>
      <a href="https://wiki.sei.cmu.edu/confluence/display/c/RuleChecker">
       RuleChecker
      </a>
     </td>
     <td>
      22.04
     </td>
     <td>
      <strong>scaled-pointer-arithmetic</strong>
     </td>
     <td>
      Partially checked
     </td>
    </tr>
    <tr>
     <td>
      <a href="https://wiki.sei.cmu.edu/confluence/display/c/TrustInSoft+Analyzer">
       TrustInSoft Analyzer
      </a>
     </td>
     <td>
      1.38
     </td>
     <td>
      <strong>index_in_address</strong>
     </td>
     <td>
      Exhaustively detects undefined behavior (see
      <a href="https://taas.trust-in-soft.com/tsnippet/t/f1268747">
       one compliant and one non-compliant example
      </a>
      ).
     </td>
    </tr>
   </tbody>
  </table>
 </section>
 <section title="Related Vulnerabilities">
  <p>Search for <a href="https://wiki.sei.cmu.edu/confluence/display/c/BB.+Definitions#BB.Definitions-vulnerability">vulnerabilities</a> resulting from the violation of this rule on the <a href="https://www.kb.cert.org/vulnotes/bymetric?searchview&amp;query=FIELD+KEYWORDS+contains+EXP41-C">CERT website</a>.</p>
 </section>
 <section title="Related Guidelines">
  <p><a href="https://wiki.sei.cmu.edu/confluence/display/c/How+this+Coding+Standard+is+Organized#HowthisCodingStandardisOrganized-RelatedGuidelines">Key here</a> (explains table format and definitions)</p>
  <table>
   <tbody>
    <tr>
     <th>
      Taxonomy
     </th>
     <th>
      Taxonomy item
     </th>
     <th>
      Relationship
     </th>
    </tr>
    <tr>
     <td>
      <a href="https://wiki.sei.cmu.edu/confluence/display/c/SEI+CERT+C+Coding+Standard">
       CERT C Secure Coding Standard
      </a>
     </td>
     <td>
      <a href="https://wiki.sei.cmu.edu/confluence/display/c/ARR30-C.+Do+not+form+or+use+out-of-bounds+pointers+or+array+subscripts">
       ARR30-C. Do not form or use out-of-bounds pointers or array subscripts
      </a>
     </td>
     <td>
      Prior to 2018-01-12: CERT: Unspecified Relationship
     </td>
    </tr>
    <tr>
     <td>
      <a href="https://wiki.sei.cmu.edu/confluence/display/c/SEI+CERT+C+Coding+Standard">
       CERT C Secure Coding Standard
      </a>
     </td>
     <td>
      <a href="https://wiki.sei.cmu.edu/confluence/display/c/ARR37-C.+Do+not+add+or+subtract+an+integer+to+a+pointer+to+a+non-array+object">
       ARR37-C. Do not add or subtract an integer to a pointer to a non-array object
      </a>
     </td>
     <td>
      Prior to 2018-01-12: CERT: Unspecified Relationship
     </td>
    </tr>
    <tr>
     <td>
      <a href="https://wiki.sei.cmu.edu/confluence/display/c/AA.+Bibliography#AA.Bibliography-ISO-IECTR24772-2013">
       ISO/IEC TR 24772:2013
      </a>
     </td>
     <td>
      Pointer Casting and Pointer Type Changes [HFC]
     </td>
     <td>
      Prior to 2018-01-12: CERT: Unspecified Relationship
     </td>
    </tr>
    <tr>
     <td>
      <a href="https://wiki.sei.cmu.edu/confluence/display/c/AA.+Bibliography#AA.Bibliography-ISO-IECTR24772-2013">
       ISO/IEC TR 24772:2013
      </a>
     </td>
     <td>
      Pointer Arithmetic [RVG]
     </td>
     <td>
      Prior to 2018-01-12: CERT: Unspecified Relationship
     </td>
    </tr>
    <tr>
     <td>
      <a href="https://wiki.sei.cmu.edu/confluence/display/c/AA.+Bibliography#AA.Bibliography-MISRA12">
       MISRA C:2012
      </a>
     </td>
     <td>
      Rule 18.1 (required)
     </td>
     <td>
      Prior to 2018-01-12: CERT: Unspecified Relationship
     </td>
    </tr>
    <tr>
     <td>
      <a href="https://wiki.sei.cmu.edu/confluence/display/c/AA.+Bibliography#AA.Bibliography-MISRA12">
       MISRA C:2012
      </a>
     </td>
     <td>
      Rule 18.2 (required)
     </td>
     <td>
      Prior to 2018-01-12: CERT: Unspecified Relationship
     </td>
    </tr>
    <tr>
     <td>
      <a href="https://wiki.sei.cmu.edu/confluence/display/c/AA.+Bibliography#AA.Bibliography-MISRA12">
       MISRA C:2012
      </a>
     </td>
     <td>
      Rule 18.3 (required)
     </td>
     <td>
      Prior to 2018-01-12: CERT: Unspecified Relationship
     </td>
    </tr>
    <tr>
     <td>
      <a href="https://wiki.sei.cmu.edu/confluence/display/c/AA.+Bibliography#AA.Bibliography-MISRA12">
       MISRA C:2012
      </a>
     </td>
     <td>
      Rule 18.4 (advisory)
     </td>
     <td>
      Prior to 2018-01-12: CERT: Unspecified Relationship
     </td>
    </tr>
    <tr>
     <td>
      <a href="https://cwe.mitre.org/data/index.html">
       CWE 2.11
      </a>
     </td>
     <td>
      <a href="http://cwe.mitre.org/data/definitions/468.html">
       CWE-468
      </a>
      , Incorrect Pointer Scaling
     </td>
     <td>
      2017-07-07: CERT: Exact
     </td>
    </tr>
   </tbody>
  </table>
 </section>
 <section title="Bibliography">
  <table>
   <tbody>
    <tr>
     <td>
      [
      <a href="https://wiki.sei.cmu.edu/confluence/display/c/AA.+Bibliography#AA.Bibliography-Dowd06">
       Dowd 2006
      </a>
      ]
     </td>
     <td>
      Chapter 6, "C Language Issues"
     </td>
    </tr>
    <tr>
     <td>
      [
      <a href="https://wiki.sei.cmu.edu/confluence/display/c/AA.+Bibliography#AA.Bibliography-Murenin07">
       Murenin 07
      </a>
      ]
     </td>
     <td>
     </td>
    </tr>
   </tbody>
  </table>
 </section>
</qhelp>