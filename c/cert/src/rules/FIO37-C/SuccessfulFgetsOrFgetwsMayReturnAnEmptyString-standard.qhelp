<!DOCTYPE qhelp SYSTEM "qhelp.dtd">
<qhelp>
 <section title="Description">
  <p>Errors can occur when incorrect assumptions are made about the type of data being read. These assumptions may be violated, for example, when binary data has been read from a file instead of text from a user's terminal or the output of a process is piped to <code>stdin.</code> (See <a href="https://wiki.sei.cmu.edu/confluence/display/c/FIO14-C.+Understand+the+difference+between+text+mode+and+binary+mode+with+file+streams">FIO14-C. Understand the difference between text mode and binary mode with file streams</a>.) On some systems, it may also be possible to input a null byte (as well as other binary codes) from the keyboard.</p>
  <p>Subclause 7.21.7.2 of the C Standard [<a href="https://wiki.sei.cmu.edu/confluence/display/c/AA.+Bibliography#AA.Bibliography-ISO-IEC9899-2011">ISO/IEC 9899:2011</a>] says,</p>
  <blockquote>
   <p>The <code>fgets</code> function returns <code>s</code> if successful. If end-of-file is encountered and no characters have been read into the array, the contents of the array remain unchanged and a null pointer is returned.</p>
  </blockquote>
  <p>The wide-character function <code>fgetws()</code> has the same behavior. Therefore, if <code>fgets()</code> or <code>fgetws()</code> returns a non-null pointer, it is safe to assume that the array contains data. However, it is erroneous to assume that the array contains a nonempty string because the data may contain null characters.</p>
 </section>
 <section title="Noncompliant Code Example">
  <p>This noncompliant code example attempts to remove the trailing newline (<code>\n</code>) from an input line. The <code>fgets()</code> function is typically used to read a newline-terminated line of input from a stream. It takes a size parameter for the destination buffer and copies, at most, <code>size - 1</code> characters from a stream to a character array.</p>
  <sample language="cpp">#include &lt;stdio.h&gt;
#include &lt;string.h&gt;
 
enum { BUFFER_SIZE = 1024 };

void func(void) {
  char buf[BUFFER_SIZE];

  if (fgets(buf, sizeof(buf), stdin) == NULL) {
    /* Handle error */
  }
  buf[strlen(buf) - 1] = '\0';
}</sample>
  <p>The <code>strlen()</code> function computes the length of a string by determining the number of characters that precede the terminating null character. A problem occurs if the first character read from the input by <code>fgets()</code> happens to be a null character. This may occur, for example, if a binary data file is read by the <code>fgets()</code> call [<a href="https://wiki.sei.cmu.edu/confluence/display/c/AA.+Bibliography#AA.Bibliography-Lai06">Lai 2006</a>]. If the first character in <code>buf</code> is a null character, <code>strlen(buf)</code> returns 0, the expression <code>strlen(buf) - 1</code> wraps around to a large positive value, and a write-outside-array-bounds error occurs.</p>
 </section>
 <section title="Compliant Solution">
  <p>This compliant solution uses <code>strchr()</code> to replace the newline character in the string if it exists:</p>
  <sample language="cpp">#include &lt;stdio.h&gt;
#include &lt;string.h&gt;
 
enum { BUFFER_SIZE = 1024 };

void func(void) {
  char buf[BUFFER_SIZE];
  char *p;

  if (fgets(buf, sizeof(buf), stdin)) {
    p = strchr(buf, '\n');
    if (p) {
      *p = '\0';
    }
  } else {
    /* Handle error */
  }
}</sample>
 </section>
 <section title="Risk Assessment">
  <p>Incorrectly assuming that character data has been read can result in an out-of-bounds memory write or other flawed logic.</p>
  <table>
   <tbody>
    <tr>
     <th>
      Rule
     </th>
     <th>
      Severity
     </th>
     <th>
      Likelihood
     </th>
     <th>
      Remediation Cost
     </th>
     <th>
      Priority
     </th>
     <th>
      Level
     </th>
    </tr>
    <tr>
     <td>
      FIO37-C
     </td>
     <td>
      High
     </td>
     <td>
      Probable
     </td>
     <td>
      Medium
     </td>
     <td>
      <strong>P12</strong>
     </td>
     <td>
      <strong>L1</strong>
     </td>
    </tr>
   </tbody>
  </table>
 </section>
 <section title="Automated Detection">
  <table>
   <tbody>
    <tr>
     <th>
      Tool
     </th>
     <th>
      Version
     </th>
     <th>
      Checker
     </th>
     <th>
      Description
     </th>
    </tr>
    <tr>
     <td>
      <a href="https://wiki.sei.cmu.edu/confluence/pages/viewpage.action?pageId=87152428">
       Astrée
      </a>
     </td>
     <td>
      20.10
     </td>
     <td>
     </td>
     <td>
      Supported: Astrée reports defects due to returned (empty) strings.
     </td>
    </tr>
    <tr>
     <td>
      <a href="https://wiki.sei.cmu.edu/confluence/display/c/Axivion+Bauhaus+Suite">
       Axivion Bauhaus Suite
      </a>
     </td>
     <td>
      7.2.0
     </td>
     <td>
      <strong>CertC-FIO37</strong>
     </td>
     <td>
     </td>
    </tr>
    <tr>
     <td>
      <a href="https://wiki.sei.cmu.edu/confluence/display/c/CodeSonar">
       CodeSonar
      </a>
     </td>
     <td>
      6.2p0
     </td>
     <td>
      <strong>(general)</strong>
     </td>
     <td>
      Considers the possibility that
      <code>fgets()</code>
      and
      <code>fgetws()</code>
      may return empty strings (Warnings of various classes may be triggered depending on subsequent operations on those strings. For example, the noncompliant code example cited above would trigger a buffer underrun warning.)
     </td>
    </tr>
    <tr>
     <td>
      <a href="https://wiki.sei.cmu.edu/confluence/display/c/Rose">
       Compass/ROSE
      </a>
     </td>
     <td>
     </td>
     <td>
     </td>
     <td>
      Could detect some violations of this rule (In particular, it could detect the noncompliant code example by searching for
      <code>fgets()</code>
      , followed by
      <code>strlen() - 1</code>
      , which could be −1. The crux of this rule is that a string returned by
      <code>fgets()</code>
      could still be empty, because the first
      <code>char</code>
      is '
      <code>\0</code>
      '. There are probably other code examples that violate this guideline; they would need to be enumerated before ROSE could detect them.)
     </td>
    </tr>
    <tr>
     <td>
      <a href="https://wiki.sei.cmu.edu/confluence/display/c/Helix+QAC">
       Helix QAC
      </a>
     </td>
     <td>
      2022.1
     </td>
     <td>
      <strong>C4911, C4912, C4913</strong>
      <strong>C++4911, C++4912, C++4913</strong>
     </td>
     <td>
     </td>
    </tr>
    <tr>
     <td>
      <a href="https://wiki.sei.cmu.edu/confluence/display/c/LDRA">
       LDRA tool suite
      </a>
     </td>
     <td>
      9.7.1
     </td>
     <td>
      <strong>44 S</strong>
     </td>
     <td>
      Enhanced enforcement
     </td>
    </tr>
    <tr>
     <td>
      <a href="https://wiki.sei.cmu.edu/confluence/display/c/Parasoft">
       Parasoft C/C++test
      </a>
     </td>
     <td>
      2021.2
     </td>
     <td>
      <strong>CERT_C-FIO37-a</strong>
     </td>
     <td>
      Avoid accessing arrays out of bounds
     </td>
    </tr>
    <tr>
     <td>
      <a href="https://wiki.sei.cmu.edu/confluence/display/c/Polyspace+Bug+Finder">
       Polyspace Bug Finder
      </a>
     </td>
     <td>
      R2022a
     </td>
     <td>
      <a href="https://www.mathworks.com/help/bugfinder/ref/certcrulefio37c.html">
       CERT C: Rule FIO37-C
      </a>
     </td>
     <td>
      Checks for use of indeterminate string (rule fully covered)
     </td>
    </tr>
    <tr>
     <td>
      <a href="https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=142409849">
       PRQA QA-C++
      </a>
     </td>
     <td>
      4.4
     </td>
     <td>
      <strong>2844</strong>
     </td>
     <td>
     </td>
    </tr>
   </tbody>
  </table>
 </section>
 <section title="Related Vulnerabilities">
  <p>Search for <a href="https://wiki.sei.cmu.edu/confluence/display/c/BB.+Definitions#BB.Definitions-vulnerability">vulnerabilities</a> resulting from the violation of this rule on the <a href="https://www.kb.cert.org/vulnotes/bymetric?searchview&amp;query=FIELD+KEYWORDS+contains+FIO37-C">CERT website</a>.</p>
 </section>
 <section title="Related Guidelines">
  <p><a href="https://wiki.sei.cmu.edu/confluence/display/c/How+this+Coding+Standard+is+Organized#HowthisCodingStandardisOrganized-RelatedGuidelines">Key here</a> (explains table format and definitions)</p>
  <table>
   <tbody>
    <tr>
     <th>
      Taxonomy
     </th>
     <th>
      Taxonomy item
     </th>
     <th>
      Relationship
     </th>
    </tr>
    <tr>
     <td>
      <a href="https://wiki.sei.cmu.edu/confluence/display/c/SEI+CERT+C+Coding+Standard">
       CERT C Secure Coding Standard
      </a>
     </td>
     <td>
      <a href="https://wiki.sei.cmu.edu/confluence/display/c/FIO14-C.+Understand+the+difference+between+text+mode+and+binary+mode+with+file+streams">
       FIO14-C. Understand the difference between text mode and binary mode with file streams
      </a>
     </td>
     <td>
      Prior to 2018-01-12: CERT: Unspecified Relationship
     </td>
    </tr>
    <tr>
     <td>
      <a href="https://wiki.sei.cmu.edu/confluence/display/c/SEI+CERT+C+Coding+Standard">
       CERT C Secure Coding Standard
      </a>
     </td>
     <td>
      <a href="https://wiki.sei.cmu.edu/confluence/pages/viewpage.action?pageId=87152445">
       FIO20-C. Avoid unintentional truncation when using fgets() or fgetws()
      </a>
     </td>
     <td>
      Prior to 2018-01-12: CERT: Unspecified Relationship
     </td>
    </tr>
    <tr>
     <td>
      <a href="https://cwe.mitre.org/data/index.html">
       CWE 2.11
      </a>
     </td>
     <td>
      <a href="http://cwe.mitre.org/data/definitions/241.html">
       CWE-241
      </a>
      , Improper Handling of Unexpected Data Type
     </td>
     <td>
      2017-07-05: CERT: Rule subset of CWE
     </td>
    </tr>
   </tbody>
  </table>
 </section>
 <section title="CERT-CWE Mapping Notes">
  <p><a href="https://wiki.sei.cmu.edu/confluence/pages/viewpage.action?pageId=87152408#HowthisCodingStandardisOrganized-CERT-CWEMappingNotes">Key here</a> for mapping notes</p>
  <p><strong>CWE-241 and FIO37-C</strong></p>
  <p>CWE-241 = Union( FIO37-C, list) where list =</p>
  <ul>
   <li>Improper handling of unexpected data type that does not come from the fgets() function.</li>
  </ul>
 </section>
 <section title="Bibliography">
  <table>
   <tbody>
    <tr>
     <td>
      [
      <a href="https://wiki.sei.cmu.edu/confluence/display/c/AA.+Bibliography#AA.Bibliography-ISO-IEC9899-2011">
       ISO/IEC 9899:2011
      </a>
      ]
     </td>
     <td>
      Subclause 7.21.7.2, "The
      <code>fgets</code>
      Function"
      Subclause 7.29.3.2, "The
      <code>fgetws</code>
      Function"
     </td>
    </tr>
    <tr>
     <td>
      [
      <a href="https://wiki.sei.cmu.edu/confluence/display/c/AA.+Bibliography#AA.Bibliography-Lai06">
       Lai 2006
      </a>
      ]
     </td>
     <td>
     </td>
    </tr>
    <tr>
     <td>
      [
      <a href="https://wiki.sei.cmu.edu/confluence/display/c/AA.+Bibliography#AA.Bibliography-Seacord2013">
       Seacord 2013
      </a>
      ]
     </td>
     <td>
      Chapter 2, "Strings"
     </td>
    </tr>
   </tbody>
  </table>
 </section>
</qhelp>