<!DOCTYPE qhelp SYSTEM "qhelp.dtd">
<qhelp>
 <section title="Description">
  <p>If control reaches the closing curly brace (<code>}</code>) of a non-<code>void</code> function without evaluating a <code>return</code> statement, using the return value of the function call is <a href="https://wiki.sei.cmu.edu/confluence/display/c/BB.+Definitions#BB.Definitions-undefinedbehavior">undefined behavior. </a>(See <a href="https://wiki.sei.cmu.edu/confluence/display/c/CC.+Undefined+Behavior#CC.UndefinedBehavior-ub_88">undefined behavior 88</a>.)</p>
 </section>
 <section title="Noncompliant Code Example">
  <p>In this noncompliant code example, control reaches the end of the <code>checkpass()</code> function when the two strings passed to <code>strcmp()</code> are not equal, resulting in undefined behavior. Many compilers will generate code for the <code>checkpass()</code> function, returning various values along the execution path where no <code>return</code> statement is defined.</p>
  <sample language="cpp">#include &lt;string.h&gt;
#include &lt;stdio.h&gt;
 
int checkpass(const char *password) {
  if (strcmp(password, "pass") == 0) {
    return 1;
  }
}

void func(const char *userinput) {
  if (checkpass(userinput)) {
    printf("Success\n");
  }
}</sample>
  <p>This error is frequently diagnosed by compilers. (See <a href="https://wiki.sei.cmu.edu/confluence/display/c/MSC00-C.+Compile+cleanly+at+high+warning+levels">MSC00-C. Compile cleanly at high warning levels</a>.)</p>
 </section>
 <section title="Compliant Solution">
  <p>This compliant solution ensures that the <code>checkpass()</code> function always returns a value:</p>
  <sample language="cpp">#include &lt;string.h&gt;
#include &lt;stdio.h&gt;
 
int checkpass(const char *password) {
  if (strcmp(password, "pass") == 0) {
    return 1;
  }
  return 0;
}

void func(const char *userinput) {
  if (checkpass(userinput)) {
    printf("Success!\n");
  }
}</sample>
 </section>
 <section title="Noncompliant Code Example">
  <p>In this noncompliant code example, control reaches the end of the <code>getlen()</code> function when <code>input</code> does not contain the integer <code>delim</code>. Because the potentially undefined return value of <code>getlen()</code> is later used as an index into an array, a buffer overflow may occur.</p>
  <sample language="cpp">#include &lt;stddef.h&gt;
 
size_t getlen(const int *input, size_t maxlen, int delim) {
  for (size_t i = 0; i &lt; maxlen; ++i) {
    if (input[i] == delim) {
      return i;
    }
  }
}
 
void func(int userdata) {
  size_t i;
  int data[] = { 1, 1, 1 };
  i = getlen(data, sizeof(data), 0);
  data[i] = userdata;
}</sample>
  <p><strong>Implementation Details (GCC)</strong></p>
  <p>Violating this rule can have unexpected consequences, as in the following example:</p>
  <sample language="cpp">#include &lt;stdio.h&gt;

size_t getlen(const int *input, size_t maxlen, int delim) {
  for (size_t i = 0; i &lt; maxlen; ++i) {
    if (input[i] == delim) {
      return i;
    }
  }
}

int main(int argc, char **argv) {
  size_t i;
  int data[] = { 1, 1, 1 };

  i = getlen(data, sizeof(data), 0);
  printf("Returned: %zu\n", i);
  data[i] = 0;

  return 0;
}</sample>
  <p>When this program is compiled with <code>-Wall</code> on most versions of the GCC compiler, the following warning is generated:</p>
  <sample language="cpp">example.c: In function 'getlen':
example.c:12: warning: control reaches end of non-void function
</sample>
  <p>None of the inputs to the function equal the delimiter, so when run with GCC 5.3 on Linux, control reaches the end of the <code>getlen()</code> function, which is undefined behavior and in this test returns <code>3</code>, causing an out-of-bounds write to the <code>data</code> array.</p>
 </section>
 <section title="Compliant Solution">
  <p>This compliant solution changes the interface of <code>getlen()</code> to store the result in a user-provided pointer and returns a status indicator to report success or failure. The best method for handling this type of error is specific to the application and the type of error. (See <a href="https://wiki.sei.cmu.edu/confluence/display/c/ERR00-C.+Adopt+and+implement+a+consistent+and+comprehensive+error-handling+policy">ERR00-C. Adopt and implement a consistent and comprehensive error-handling policy</a> for more on error handling.)</p>
  <sample language="cpp">#include &lt;stddef.h&gt;
 
int getlen(const int *input, size_t maxlen, int delim,
           size_t *result) {
  if (result == NULL) {
    return -1;
  }
  for (size_t i = 0; i &lt; maxlen; ++i) {
    if (input[i] == delim) {
      *result = i;
      return 0;
    }
  }
  return -1;
}

void func(int userdata) {
  size_t i;
  int data[] = {1, 1, 1};
  if (getlen(data, sizeof(data), 0, &amp;i) != 0) {
    /* Handle error */
  } else {
    data[i] = userdata;
  }
}
</sample>
 </section>
 <section title="Exceptions">
  <p><strong>MSC37-C-EX1:</strong> According to the C Standard, 5.1.2.2.3, paragraph 1 [<a href="https://wiki.sei.cmu.edu/confluence/display/c/AA.+Bibliography#AA.Bibliography-ISO-IEC9899-2011">ISO/IEC 9899:2011</a>], "Reaching the <code>}</code> that terminates the main function returns a value of 0." As a result, it is permissible for control to reach the end of the <code>main()</code> function without executing a return statement.</p>
  <p><strong>MSC37-C-EX2: </strong>It is permissible for a control path to not return a value if that code path is never taken and a function marked <code>_Noreturn</code> is called as part of that code path. For example:</p>
  <sample language="cpp">#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
 
_Noreturn void unreachable(const char *msg) {
  printf("Unreachable code reached: %s\n", msg);
  exit(1);
}

enum E {
  One,
  Two,
  Three
};
 
int f(enum E e) {
  switch (e) {
  case One: return 1;
  case Two: return 2;
  case Three: return 3;
  }
  unreachable("Can never get here");
}</sample>
 </section>
 <section title="Risk Assessment">
  <p>Using the return value from a non-<code>void</code> function where control reaches the end of the function without evaluating a <code>return</code> statement can lead to buffer overflow <a href="https://wiki.sei.cmu.edu/confluence/display/c/BB.+Definitions#BB.Definitions-vulnerability">vulnerabilities</a> as well as other <a href="https://wiki.sei.cmu.edu/confluence/display/c/BB.+Definitions#BB.Definitions-unexpectedbehavior">unexpected program behaviors</a>.</p>
  <table>
   <tbody>
    <tr>
     <th>
      Rule
     </th>
     <th>
      Severity
     </th>
     <th>
      Likelihood
     </th>
     <th>
      Remediation Cost
     </th>
     <th>
      Priority
     </th>
     <th>
      Level
     </th>
    </tr>
    <tr>
     <td>
      MSC37-C
     </td>
     <td>
      High
     </td>
     <td>
      Unlikely
     </td>
     <td>
      Low
     </td>
     <td>
      <strong>P9</strong>
     </td>
     <td>
      <strong>L2</strong>
     </td>
    </tr>
   </tbody>
  </table>
 </section>
 <section title="Related Vulnerabilities">
  <p>Search for <a href="https://wiki.sei.cmu.edu/confluence/display/c/BB.+Definitions#BB.Definitions-vulnerability">vulnerabilities</a> resulting from the violation of this rule on the <a href="https://www.kb.cert.org/vulnotes/bymetric?searchview&amp;query=FIELD+KEYWORDS+contains+MSC37-C">CERT website</a>.</p>
 </section>
 <section title="Automated Detection">
  <table>
   <tbody>
    <tr>
     <th>
      Tool
     </th>
     <th>
      Version
     </th>
     <th>
      Checker
     </th>
     <th>
      Description
     </th>
    </tr>
    <tr>
     <td>
      <a href="https://wiki.sei.cmu.edu/confluence/pages/viewpage.action?pageId=87152428">
       Astrée
      </a>
     </td>
     <td>
      20.10
     </td>
     <td>
      <strong>return-implicit</strong>
     </td>
     <td>
      Fully checked
     </td>
    </tr>
    <tr>
     <td>
      <a href="https://wiki.sei.cmu.edu/confluence/display/c/Axivion+Bauhaus+Suite">
       Axivion Bauhaus Suite
      </a>
     </td>
     <td>
      7.2.0
     </td>
     <td>
      <strong>CertC-MSC37</strong>
     </td>
     <td>
     </td>
    </tr>
    <tr>
     <td>
      <a href="https://wiki.sei.cmu.edu/confluence/display/c/CodeSonar">
       CodeSonar
      </a>
     </td>
     <td>
      6.2p0
     </td>
     <td>
      <strong>LANG.STRUCT.MRS</strong>
     </td>
     <td>
      Missing return statement
     </td>
    </tr>
    <tr>
     <td>
      <a href="https://wiki.sei.cmu.edu/confluence/display/c/Coverity">
       Coverity
      </a>
     </td>
     <td>
      2017.07
     </td>
     <td>
      <strong>MISSING_RETURN</strong>
     </td>
     <td>
      Implemented
     </td>
    </tr>
    <tr>
     <td>
      <a href="https://wiki.sei.cmu.edu/confluence/display/c/Helix+QAC">
       Helix QAC
      </a>
     </td>
     <td>
      2022.1
     </td>
     <td>
      <strong>C2888</strong>
      <strong>C++2888, C++4022</strong>
     </td>
     <td>
     </td>
    </tr>
    <tr>
     <td>
      <a href="https://wiki.sei.cmu.edu/confluence/display/c/Klocwork">
       Klocwork
      </a>
     </td>
     <td>
      2022.1
     </td>
     <td>
      <strong>FUNCRET.GEN</strong>
      <strong>FUNCRET.IMPLICIT</strong>
     </td>
     <td>
     </td>
    </tr>
    <tr>
     <td>
      <a href="https://wiki.sei.cmu.edu/confluence/display/c/LDRA">
       LDRA tool suite
      </a>
     </td>
     <td>
      9.7.1
     </td>
     <td>
      <strong>2 D, 36 S, 66 S</strong>
     </td>
     <td>
      Fully implemented
     </td>
    </tr>
    <tr>
     <td>
      <a href="https://wiki.sei.cmu.edu/confluence/display/c/Parasoft">
       Parasoft C/C++test
      </a>
     </td>
     <td>
      2021.2
     </td>
     <td>
      <strong>CERT_C-MSC37-a</strong>
     </td>
     <td>
      All exit paths from a function with non-void return type shall have an explicit return statement with an expression
     </td>
    </tr>
    <tr>
     <td>
      <a href="https://wiki.sei.cmu.edu/confluence/display/c/PC-lint+Plus">
       PC-lint Plus
      </a>
     </td>
     <td>
      1.4
     </td>
     <td>
      <strong>533</strong>
     </td>
     <td>
      Fully supported
     </td>
    </tr>
    <tr>
     <td>
      <a href="https://wiki.sei.cmu.edu/confluence/display/c/Polyspace+Bug+Finder">
       Polyspace Bug Finder
      </a>
     </td>
     <td>
      R2021a
     </td>
     <td>
      <a href="https://www.mathworks.com/help/bugfinder/ref/certcrulemsc37c.html">
       CERT C: Rule MSC37-C
      </a>
     </td>
     <td>
      Checks for missing return statement (rule fully covered)
     </td>
    </tr>
    <tr>
     <td>
      <a href="https://wiki.sei.cmu.edu/confluence/display/c/PRQA+QA-C">
       PRQA QA-C
      </a>
     </td>
     <td>
      9.7
     </td>
     <td>
      <strong>2888</strong>
     </td>
     <td>
     </td>
    </tr>
    <tr>
     <td>
      <a href="https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=142409849">
       PRQA QA-C++
      </a>
     </td>
     <td>
      4.4
     </td>
     <td>
      <strong>2888, 4022 </strong>
     </td>
     <td>
     </td>
    </tr>
    <tr>
     <td>
      <a href="https://wiki.sei.cmu.edu/confluence/display/c/RuleChecker">
       RuleChecker
      </a>
     </td>
     <td>
      20.10
     </td>
     <td>
      <strong>return-implicit</strong>
     </td>
     <td>
      Fully checked
     </td>
    </tr>
    <tr>
     <td>
      <a href="https://wiki.sei.cmu.edu/confluence/pages/viewpage.action?pageId=87151949">
       SonarQube C/C++ Plugin
      </a>
     </td>
     <td>
      3.11
     </td>
     <td>
      <strong><a href="https://www.sonarsource.com/products/codeanalyzers/sonarcfamilyforcpp/rules-c.html#RSPEC-935">S935</a></strong>
     </td>
     <td>
     </td>
    </tr>
    <tr>
     <td>
      <a href="https://wiki.sei.cmu.edu/confluence/display/c/TrustInSoft+Analyzer">
       TrustInSoft Analyzer
      </a>
     </td>
     <td>
      1.38
     </td>
     <td>
      <strong>Body of function falls-through</strong>
     </td>
     <td>
      Exhaustively verified.
     </td>
    </tr>
   </tbody>
  </table>
 </section>
 <section title="Related Guidelines">
  <p><a href="https://wiki.sei.cmu.edu/confluence/display/c/How+this+Coding+Standard+is+Organized#HowthisCodingStandardisOrganized-RelatedGuidelines">Key here</a> (explains table format and definitions)</p>
  <table>
   <tbody>
    <tr>
     <th>
      Taxonomy
     </th>
     <th>
      Taxonomy item
     </th>
     <th>
      Relationship
     </th>
    </tr>
    <tr>
     <td>
      <a href="https://wiki.sei.cmu.edu/confluence/display/c/SEI+CERT+C+Coding+Standard">
       CERT C Secure Coding Standard
      </a>
     </td>
     <td>
      <a href="https://wiki.sei.cmu.edu/confluence/display/c/MSC01-C.+Strive+for+logical+completeness">
       MSC01-C. Strive for logical completeness
      </a>
     </td>
     <td>
      Prior to 2018-01-12: CERT: Unspecified Relationship
     </td>
    </tr>
    <tr>
     <td>
      <a href="http://cwe.mitre.org/">
       CWE 2.11
      </a>
     </td>
     <td>
      <a href="https://cwe.mitre.org/data/index.html758.html">
       CWE-758
      </a>
     </td>
     <td>
      2017-07-07: CERT: Rule subset of CWE
     </td>
    </tr>
   </tbody>
  </table>
 </section>
 <section title="CERT-CWE Mapping Notes">
  <p><a href="https://wiki.sei.cmu.edu/confluence/pages/viewpage.action?pageId=87152408#HowthisCodingStandardisOrganized-CERT-CWEMappingNotes">Key here</a> for mapping notes</p>
  <p><strong>CWE-758 and MSC37-C</strong></p>
  <p>Independent( INT34-C, INT36-C, MEM30-C, MSC37-C, FLP32-C, EXP33-C, EXP30-C, ERR34-C, ARR32-C)</p>
  <p>CWE-758 = Union( MSC37-C, list) where list =</p>
  <p>Undefined behavior that results from anything other than failing to return a value from a function that expects one</p>
 </section>
 <section title="Bibliography">
  <table>
   <tbody>
    <tr>
     <td>
      [
      <a href="https://wiki.sei.cmu.edu/confluence/display/c/AA.+Bibliography#AA.Bibliography-ISO-IEC9899-2011">
       ISO/IEC 9899:2011
      </a>
      ]
     </td>
     <td>
      5.1.2.2.3, "Program Termination"
     </td>
    </tr>
   </tbody>
  </table>
 </section>
</qhelp>