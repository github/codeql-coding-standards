<!DOCTYPE qhelp SYSTEM "qhelp.dtd">
<qhelp>
 <section title="Description">
  <p>A pseudorandom number generator (PRNG) is a deterministic algorithm capable of generating sequences of numbers that approximate the properties of random numbers. Each sequence is completely determined by the initial state of the PRNG and the algorithm for changing the state. Most PRNGs make it possible to set the initial state, also called the <em>seed state</em>. Setting the initial state is called <em>seeding</em> the PRNG.</p>
  <p>Calling a PRNG in the same initial state, either without seeding it explicitly or by seeding it with a constant value, results in generating the same sequence of random numbers in different runs of the program. Consider a PRNG function that is seeded with some initial seed value and is consecutively called to produce a sequence of random numbers. If the PRNG is subsequently seeded with the same initial seed value, then it will generate the same sequence.</p>
  <p>Consequently, after the first run of an improperly seeded PRNG, an attacker can predict the sequence of random numbers that will be generated in the future runs. Improperly seeding or failing to seed the PRNG can lead to <a href="https://wiki.sei.cmu.edu/confluence/display/cplusplus/BB.+Definitions#BB.Definitions-vulnerability">vulnerabilities</a>, especially in security protocols.</p>
  <p>The solution is to ensure that a PRNG is always properly seeded with an initial seed value that will not be predictable or controllable by an attacker. A properly seeded PRNG will generate a different sequence of random numbers each time it is run.</p>
  <p>Not all random number generators can be seeded. True random number generators that rely on hardware to produce completely unpredictable results do not need to be and cannot be seeded. Some high-quality PRNGs, such as the <code>/dev/random</code> device on some UNIX systems, also cannot be seeded. This rule applies only to algorithmic PRNGs that can be seeded.</p>
 </section>
 <section title="Noncompliant Code Example">
  <p>This noncompliant code example generates a sequence of 10 pseudorandom numbers using the <a href="https://en.wikipedia.org/wiki/Mersenne_twister">Mersenne Twister</a> engine. No matter how many times this code is executed, it always produces the same sequence because the default seed is used for the engine.</p>
  <sample language="cpp">#include &lt;random&gt;
#include &lt;iostream&gt;

void f() {
  std::mt19937 engine;
  
  for (int i = 0; i &lt; 10; ++i) {
    std::cout &lt;&lt; engine() &lt;&lt; ", ";
  }
}</sample>
  <p>The output of this example follows.</p>
  <sample language="cpp">1st run: 3499211612, 581869302, 3890346734, 3586334585, 545404204, 4161255391, 3922919429, 949333985, 2715962298, 1323567403, 
2nd run: 3499211612, 581869302, 3890346734, 3586334585, 545404204, 4161255391, 3922919429, 949333985, 2715962298, 1323567403, 
...
nth run: 3499211612, 581869302, 3890346734, 3586334585, 545404204, 4161255391, 3922919429, 949333985, 2715962298, 1323567403, </sample>
 </section>
 <section title="Noncompliant Code Example">
  <p>This noncompliant code example improves the previous noncompliant code example by seeding the random number generation engine with the current time. However, this approach is still unsuitable when an attacker can control the time at which the seeding is executed. Predictable seed values can result in <a href="https://wiki.sei.cmu.edu/confluence/display/cplusplus/BB.+Definitions#BB.Definitions-exploit">exploits</a> when the subverted PRNG is used.</p>
  <sample language="cpp">#include &lt;ctime&gt;
#include &lt;random&gt;
#include &lt;iostream&gt;

void f() {
  std::time_t t;
  std::mt19937 engine(std::time(&amp;t));
  
  for (int i = 0; i &lt; 10; ++i) {
    std::cout &lt;&lt; engine() &lt;&lt; ", ";
  }
}</sample>
 </section>
 <section title="Compliant Solution">
  <p>This compliant solution uses <code>std::random_device</code> to generate a random value for seeding the Mersenne Twister engine object. The values generated by <code>std::random_device</code> are nondeterministic random numbers when possible, relying on random number generation devices, such as <code>/dev/random</code>. When such a device is not available, <code>std::random_device</code> may employ a random number engine; however, the initial value generated should have sufficient randomness to serve as a seed value.</p>
  <sample language="cpp">#include &lt;random&gt;
#include &lt;iostream&gt;

void f() {
  std::random_device dev;
  std::mt19937 engine(dev());
  
  for (int i = 0; i &lt; 10; ++i) {
    std::cout &lt;&lt; engine() &lt;&lt; ", ";
  }
} </sample>
  <p>The output of this example follows.</p>
  <sample language="cpp">1st run: 3921124303, 1253168518, 1183339582, 197772533, 83186419, 2599073270, 3238222340, 101548389, 296330365, 3335314032, 
2nd run: 2392369099, 2509898672, 2135685437, 3733236524, 883966369, 2529945396, 764222328, 138530885, 4209173263, 1693483251, 
3rd run: 914243768, 2191798381, 2961426773, 3791073717, 2222867426, 1092675429, 2202201605, 850375565, 3622398137, 422940882,
...</sample>
 </section>
 <section title="Risk Assessment">
  <table>
   <tbody>
    <tr>
     <th>
      Rule
     </th>
     <th>
      Severity
     </th>
     <th>
      Likelihood
     </th>
     <th>
      Remediation Cost
     </th>
     <th>
      Priority
     </th>
     <th>
      Level
     </th>
    </tr>
    <tr>
     <td>
      MSC51-CPP
     </td>
     <td>
      Medium
     </td>
     <td>
      Likely
     </td>
     <td>
      Low
     </td>
     <td>
      <strong>P18</strong>
     </td>
     <td>
      <strong>L1</strong>
     </td>
    </tr>
   </tbody>
  </table>
 </section>
 <section title="Automated Detection">
  <table>
   <tbody>
    <tr>
     <th>
      Tool
     </th>
     <th>
      Version
     </th>
     <th>
      Checker
     </th>
     <th>
      Description
     </th>
    </tr>
    <tr>
     <td>
      <a href="https://wiki.sei.cmu.edu/confluence/pages/viewpage.action?pageId=222953724">
       Astr√©e
      </a>
     </td>
     <td>
      20.10
     </td>
     <td>
      <strong>default-construction</strong>
     </td>
     <td>
      Partially checked
     </td>
    </tr>
    <tr>
     <td>
      <a href="https://wiki.sei.cmu.edu/confluence/display/cplusplus/Axivion+Bauhaus+Suite">
       Axivion Bauhaus Suite
      </a>
     </td>
     <td>
      7.2.0
     </td>
     <td>
      <strong>CertC++-MSC51</strong>
     </td>
     <td>
     </td>
    </tr>
    <tr>
     <td>
      <a href="https://wiki.sei.cmu.edu/confluence/display/cplusplus/Helix+QAC">
       Helix QAC
      </a>
     </td>
     <td>
      2021.2
     </td>
     <td>
      <strong>C++5041</strong>
     </td>
     <td>
     </td>
    </tr>
    <tr>
     <td>
      <a href="https://wiki.sei.cmu.edu/confluence/display/cplusplus/Polyspace+Bug+Finder">
       Polyspace Bug Finder
      </a>
     </td>
     <td>
      R2021b
     </td>
     <td>
      <a href="https://www.mathworks.com/help/bugfinder/ref/certcmsc51cpp.html">
       CERT C++: MSC51-CPP
      </a>
     </td>
     <td>
      Checks for:
      Deterministic random output from constant seedeterministic random output from constant seed, predictable random output from predictable seedredictable random output from predictable seed.
      Rule partially covered.
     </td>
    </tr>
    <tr>
     <td>
      <a href="https://wiki.sei.cmu.edu/confluence/display/cplusplus/Parasoft">
       Parasoft C/C++test
      </a>
     </td>
     <td>
      2021.2
     </td>
     <td>
      <strong>CERT_CPP-MSC51-a</strong>
     </td>
     <td>
      Properly seed pseudorandom number generators
     </td>
    </tr>
    <tr>
     <td>
      <a href="https://wiki.sei.cmu.edu/confluence/display/cplusplus/PVS-Studio">
       PVS-Studio
      </a>
     </td>
     <td>
      7.17
     </td>
     <td>
      <strong><a href="https://pvs-studio.com/en/docs/warnings/v1057/">V1057</a></strong>
     </td>
     <td>
     </td>
    </tr>
    <tr>
     <td>
      <a href="https://wiki.sei.cmu.edu/confluence/display/cplusplus/RuleChecker">
       RuleChecker
      </a>
     </td>
     <td>
      20.10
     </td>
     <td>
      <strong>default-construction</strong>
     </td>
     <td>
      Partially checked
     </td>
    </tr>
   </tbody>
  </table>
 </section>
 <section title="Related Vulnerabilities">
  <p>Using a predictable seed value, such as the current time, result in numerous <a href="https://wiki.sei.cmu.edu/confluence/display/cplusplus/BB.+Definitions#BB.Definitions-vulnerability">vulnerabilities</a>, such as the one described by <a href="http://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2008-1637">CVE-2008-1637</a>.</p>
  <p>Search for vulnerabilities resulting from the violation of this rule on the <a href="https://www.kb.cert.org/vulnotes/bymetric?searchview&amp;query=FIELD+KEYWORDS+contains+MSC51-CPP">CERT website</a>.</p>
 </section>
 <section title="Related Guidelines">
  <table>
   <tbody>
    <tr>
     <td>
      <a href="https://wiki.sei.cmu.edu/confluence/display/c/SEI+CERT+C+Coding+Standard">
       SEI CERT C Coding Standard
      </a>
     </td>
     <td>
      <a href="https://wiki.sei.cmu.edu/confluence/display/c/MSC32-C.+Properly+seed+pseudorandom+number+generators">
       MSC32-C. Properly seed pseudorandom number generators
      </a>
     </td>
    </tr>
    <tr>
     <td>
      <a href="http://cwe.mitre.org/">
       MITRE CWE
      </a>
     </td>
     <td>
      <a href="http://cwe.mitre.org/data/definitions/327.html">
       CWE-327
      </a>
      , Use of a Broken or Risky Cryptographic Algorithm
      <a href="http://cwe.mitre.org/data/definitions/330.html">
       CWE-330
      </a>
      , Use of Insufficiently Random Values
      <a href="http://cwe.mitre.org/data/definitions/337.html">
       CWE-337
      </a>
      , Predictable Seed in PRNG
     </td>
    </tr>
   </tbody>
  </table>
 </section>
 <section title="Bibliography">
  <table>
   <tbody>
    <tr>
     <td>
      [
      <a href="https://wiki.sei.cmu.edu/confluence/display/cplusplus/AA.+Bibliography#AA.Bibliography-ISO-IEC9899-1999">
       ISO/IEC 9899:2011
      </a>
      ]
     </td>
     <td>
      Subclause 7.22.2, "Pseudo-random Sequence Generation Functions"
     </td>
    </tr>
    <tr>
     <td>
      [
      <a href="https://wiki.sei.cmu.edu/confluence/display/cplusplus/AA.+Bibliography#AA.Bibliography-ISO%2FIEC14882-2014">
       ISO/IEC 14882-2014
      </a>
      ]
     </td>
     <td>
      Subclause 26.5, "Random Number Generation"
     </td>
    </tr>
   </tbody>
  </table>
 </section>
</qhelp>