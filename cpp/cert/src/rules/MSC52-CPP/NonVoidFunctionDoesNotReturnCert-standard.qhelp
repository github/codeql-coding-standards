<!DOCTYPE qhelp SYSTEM "qhelp.dtd">
<qhelp>
 <section title="Description">
  <p>
   The C++ Standard, [stmt.return], paragraph 2 [
   <a href="https://wiki.sei.cmu.edu/confluence/display/cplusplus/AA.+Bibliography#AA.Bibliography-ISO%2FIEC14882-2014">
    ISO/IEC 14882-2014
   </a>
   ], states the following:
  </p>
  <blockquote>
   <p>
    Flowing off the end of a function is equivalent to a
    <code>
     return
    </code>
    with no value; this results in undefined behavior in a value-returning function.
   </p>
  </blockquote>
  <p>
   A value-returning function must return a value from all code paths; otherwise, it will result in
   <a href="https://wiki.sei.cmu.edu/confluence/display/cplusplus/BB.+Definitions#BB.Definitions-undefinedbehavior">
    undefined behavior
   </a>
   . This includes returning through less-common code paths, such as from a
   <em>
    <a href="https://en.cppreference.com/w/cpp/language/function-try-block">
     function-try-block
    </a>
   </em>
   , as explained in the C++ Standard, [except.handle], paragraph 15:
  </p>
  <blockquote>
   <p>
    Flowing off the end of a
    <em>
     function-try-block
    </em>
    is equivalent to a
    <code>
     return
    </code>
    with no value; this results in undefined behavior in a value-returning function (6.6.3).
   </p>
  </blockquote>
 </section>
 <section title="Noncompliant Code Example">
  <p>
   In this noncompliant code example, the programmer forgot to return the input value for positive input, so not all code paths return a value.
  </p>
  <sample language="cpp">
   int absolute_value(int a) {
  if (a &lt; 0) {
    return -a;
  }
}
  </sample>
 </section>
 <section title="Compliant Solution">
  <p>
   In this compliant solution, all code paths now return a value.
  </p>
  <sample language="cpp">
   int absolute_value(int a) {
  if (a &lt; 0) {
    return -a;
  }
  return a;
}
  </sample>
 </section>
 <section title="Noncompliant Code Example">
  <p>
   In this noncompliant code example, the
   <em>
    function-try-block
   </em>
   handler does not return a value, resulting in
   <a href="https://wiki.sei.cmu.edu/confluence/display/cplusplus/BB.+Definitions#BB.Definitions-undefinedbehavior">
    undefined behavior
   </a>
   when an exception is thrown.
  </p>
  <sample language="cpp">
   #include &lt;vector&gt;
 
std::size_t f(std::vector&lt;int&gt; &amp;v, std::size_t s) try {
  v.resize(s);
  return s;
} catch (...) {
}
  </sample>
 </section>
 <section title="Compliant Solution">
  <p>
   In this compliant solution, the exception handler of the
   <em>
    function-try-block
   </em>
   also returns a value.
  </p>
  <sample language="cpp">
   #include &lt;vector&gt;
 
std::size_t f(std::vector&lt;int&gt; &amp;v, std::size_t s) try {
  v.resize(s);
  return s;
} catch (...) {
  return 0;
}
  </sample>
 </section>
 <section title="Exceptions">
  <p>
   <strong>
    MSC54-CPP-EX1:
   </strong>
   Flowing off the end of the
   <code>
    main()
   </code>
   function is equivalent to a
   <code>
    return 0;
   </code>
   statement, according to the C++ Standard, [basic.start.main], paragraph 5 [
   <a href="https://wiki.sei.cmu.edu/confluence/display/cplusplus/AA.+Bibliography#AA.Bibliography-ISO%2FIEC14882-2014">
    ISO/IEC 14882-2014
   </a>
   ].  Thus, flowing off the end of the
   <code>
    main()
   </code>
   function does not result in
   <a href="https://wiki.sei.cmu.edu/confluence/display/cplusplus/BB.+Definitions#BB.Definitions-undefinedbehavior">
    undefined behavior
   </a>
   .
  </p>
  <p>
   <strong>
    MSC54-CPP-EX2:
   </strong>
   It is permissible for a control path to not return a value if that code path is never expected to be taken and a function marked
   <code>
    [[noreturn]]
   </code>
   is called as part of that code path or if an exception is thrown, as is illustrated in the following code example.
  </p>
  <sample language="cpp">
   #include &lt;cstdlib&gt;
#include &lt;iostream&gt;
[[noreturn]] void unreachable(const char *msg) {
  std::cout &lt;&lt; "Unreachable code reached: " &lt;&lt; msg &lt;&lt; std::endl;
  std::exit(1);
}

enum E {
  One,
  Two,
  Three
};

int f(E e) {
  switch (e) {
  case One: return 1;
  case Two: return 2;
  case Three: return 3;
  }
  unreachable("Can never get here");
}
  </sample>
 </section>
 <section title="Risk Assessment">
  <p>
   Failing to return a value from a code path in a value-returning function results in
   <a href="https://wiki.sei.cmu.edu/confluence/display/cplusplus/BB.+Definitions#BB.Definitions-undefinedbehavior">
    undefined behavior
   </a>
   that might be
   <a href="https://wiki.sei.cmu.edu/confluence/display/cplusplus/BB.+Definitions#BB.Definitions-exploit">
    exploited
   </a>
   to cause data integrity violations.
  </p>
  <table>
   <tbody>
    <tr>
     <th>
      Rule
     </th>
     <th>
      Severity
     </th>
     <th>
      Likelihood
     </th>
     <th>
      Remediation Cost
     </th>
     <th>
      Priority
     </th>
     <th>
      Level
     </th>
    </tr>
    <tr>
     <td>
      MSC52-CPP
     </td>
     <td>
      Medium
     </td>
     <td>
      Probable
     </td>
     <td>
      Medium
     </td>
     <td>
      <strong>
       P8
      </strong>
     </td>
     <td>
      <strong>
       L2
      </strong>
     </td>
    </tr>
   </tbody>
  </table>
 </section>
 <section title="Automated Detection">
  <table>
   <tbody>
    <tr>
     <th>
      Tool
     </th>
     <th>
      Version
     </th>
     <th>
      Checker
     </th>
     <th>
      Description
     </th>
    </tr>
    <tr>
     <td>
      <a href="https://wiki.sei.cmu.edu/confluence/pages/viewpage.action?pageId=222953724">
       Astrée
      </a>
     </td>
     <td>
      20.10
     </td>
     <td>
      <strong>
       return-implicit
      </strong>
     </td>
     <td>
      Fully checked
     </td>
    </tr>
    <tr>
     <td>
      <a href="https://wiki.sei.cmu.edu/confluence/display/cplusplus/Axivion+Bauhaus+Suite">
       Axivion Bauhaus Suite
      </a>
     </td>
     <td>
      7.2.0
     </td>
     <td>
      <strong>
       CertC++-MSC52
      </strong>
     </td>
     <td>
     </td>
    </tr>
    <tr>
     <td>
      <a href="https://wiki.sei.cmu.edu/confluence/display/cplusplus/Clang">
       Clang
      </a>
     </td>
     <td>
      3.9
     </td>
     <td>
      <strong>
       -Wreturn-type
      </strong>
     </td>
     <td>
      Does not catch all instances of this rule, such as
      <em>
       function-try-blocks
      </em>
     </td>
    </tr>
    <tr>
     <td>
      <a href="https://wiki.sei.cmu.edu/confluence/display/cplusplus/CodeSonar">
       CodeSonar
      </a>
     </td>
     <td>
      6.1p0
     </td>
     <td>
      <strong>
       LANG.STRUCT.MRS
      </strong>
     </td>
     <td>
      Missing return statement
     </td>
    </tr>
    <tr>
     <td>
      <a href="https://wiki.sei.cmu.edu/confluence/display/cplusplus/Helix+QAC">
       Helix QAC
      </a>
     </td>
     <td>
      2021.2
     </td>
     <td>
      <strong>
       C++2888
      </strong>
     </td>
     <td>
     </td>
    </tr>
    <tr>
     <td>
      <a href="https://www.securecoding.cert.org/confluence/display/cplusplus/Klocwork">
       Klocwork
      </a>
     </td>
     <td>
      2021.4
     </td>
     <td>
      <strong>
       FUNCRET.GEN
      </strong>
      <strong>
       FUNCRET.IMPLICIT
      </strong>
     </td>
     <td>
     </td>
    </tr>
    <tr>
     <td>
      <a href="https://wiki.sei.cmu.edu/confluence/display/cplusplus/LDRA">
       LDRA tool suite
      </a>
     </td>
     <td>
     </td>
     <td>
      <strong>
       2 D, 36 S
      </strong>
     </td>
     <td>
      Fully implemented
     </td>
    </tr>
    <tr>
     <td>
      <a href="https://wiki.sei.cmu.edu/confluence/display/cplusplus/Parasoft">
       Parasoft C/C++test
      </a>
     </td>
     <td>
      2021.2
     </td>
     <td>
      <strong>
       CERT_CPP-MSC52-a
      </strong>
     </td>
     <td>
      All exit paths from a function with non-void return type shall have an explicit return statement with an expression
     </td>
    </tr>
    <tr>
     <td>
      <a href="https://wiki.sei.cmu.edu/confluence/display/cplusplus/Polyspace+Bug+Finder">
       Polyspace Bug Finder
      </a>
     </td>
     <td>
      R2021b
     </td>
     <td>
      <a href="https://www.mathworks.com/help/bugfinder/ref/certcmsc52cpp.html">
       CERT C++: MSC52-CPP
      </a>
     </td>
     <td>
      Checks for missing return statements (rule partially covered)
     </td>
    </tr>
    <tr>
     <td>
      <a href="https://wiki.sei.cmu.edu/confluence/pages/viewpage.action?pageId=88046388">
       SonarQube C/C++ Plugin
      </a>
     </td>
     <td>
      4.10
     </td>
     <td>
      <strong>
       <a href="https://www.sonarsource.com/products/codeanalyzers/sonarcfamilyforcpp/rules-cpp.html#RSPEC-935">
        S935
       </a>
      </strong>
     </td>
     <td>
     </td>
    </tr>
    <tr>
     <td>
      <a href="https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=142409849">
       PRQA QA-C++
      </a>
     </td>
     <td>
      4.4
     </td>
     <td>
      <strong>
       1510
      </strong>
     </td>
     <td>
     </td>
    </tr>
    <tr>
     <td>
      <a href="https://wiki.sei.cmu.edu/confluence/display/cplusplus/PVS-Studio">
       PVS-Studio
      </a>
     </td>
     <td>
      7.16
     </td>
     <td>
      <strong>
       <a href="https://pvs-studio.com/en/docs/warnings/v591/">
        V591
       </a>
      </strong>
     </td>
     <td>
     </td>
    </tr>
    <tr>
     <td>
      <a href="https://wiki.sei.cmu.edu/confluence/display/cplusplus/RuleChecker">
       RuleChecker
      </a>
     </td>
     <td>
      20.10
     </td>
     <td>
      <strong>
       return-implicit
      </strong>
     </td>
     <td>
      Fully checked
     </td>
    </tr>
   </tbody>
  </table>
 </section>
 <section title="Related Vulnerabilities">
  <p>
   Search for
   <a href="https://wiki.sei.cmu.edu/confluence/display/cplusplus/BB.+Definitions#BB.Definitions-vulnerability">
    vulnerabilities
   </a>
   resulting from the violation of this rule on the
   <a href="https://www.kb.cert.org/vulnotes/bymetric?searchview&amp;query=FIELD+KEYWORDS+contains+MSC52-CPP">
    CERT website
   </a>
   .
  </p>
 </section>
 <section title="Bibliography">
  <table>
   <tbody>
    <tr>
     <td>
      [
      <a href="https://wiki.sei.cmu.edu/confluence/display/cplusplus/AA.+Bibliography#AA.Bibliography-ISO%2FIEC14882-2014">
       ISO/IEC 14882-2014
      </a>
      ]
     </td>
     <td>
      Subclause 3.6.1, "Main Function"
      Subclause 6.6.3, "The
      <code>
       return
      </code>
      Statement"
      Subclause 15.3, "Handling an Exception"
     </td>
    </tr>
   </tbody>
  </table>
 </section>
</qhelp>