<!DOCTYPE qhelp SYSTEM "qhelp.dtd">
<qhelp>
 <section title="Description">
  <p>
   Associative containers place a strict weak ordering requirement on their key comparison predicates
   [
   <a href="https://wiki.sei.cmu.edu/confluence/display/cplusplus/AA.+Bibliography#AA.Bibliography-ISO%2FIEC14882-2014">
    ISO/IEC 14882-2014
   </a>
   ]
   . A strict weak ordering has the following properties:
  </p>
  <ul>
   <li>
    for all
    <code>
     x
    </code>
    :
    <code>
     x &lt; x == false
    </code>
    (irreflexivity)
   </li>
   <li>
    for all
    <code>
     x
    </code>
    ,
    <code>
     y
    </code>
    : if
    <code>
     x &lt; y
    </code>
    then
    <code>
     !(y &lt; x)
    </code>
    (asymmetry)
   </li>
   <li>
    for all
    <code>
     x
    </code>
    ,
    <code>
     y
    </code>
    ,
    <code>
     z
    </code>
    : if
    <code>
     x &lt; y &amp;&amp; y &lt; z
    </code>
    then
    <code>
     x &lt; z
    </code>
    (transitivity)
   </li>
  </ul>
  <p>
   Providing an invalid ordering predicate for an associative container (e.g., sets, maps, multisets, and multimaps), or as a comparison criterion with the sorting algorithms, can result in erratic behavior or infinite loops [
   <a href="https://wiki.sei.cmu.edu/confluence/display/cplusplus/AA.+Bibliography#AA.Bibliography-Meyers01">
    Meyers 01
   </a>
   ]. When an ordering predicate is required for an associative container or a generic standard template library algorithm, the predicate must meet the requirements for inducing a strict weak ordering.
  </p>
 </section>
 <section title="Noncompliant Code Example">
  <p>
   In this noncompliant code example, the
   <code>
    std::set
   </code>
   object is created with a comparator that does not adhere to the strict weak ordering requirement. Specifically, it fails to return false for equivalent values. As a result, the behavior of iterating over the results from
   <code>
    std::set::equal_range
   </code>
   results in
   <a href="https://wiki.sei.cmu.edu/confluence/display/cplusplus/BB.+Definitions#BB.Definitions-unspecifiedbehavior">
    unspecified behavior
   </a>
   .
  </p>
  <sample language="cpp">
   #include &lt;functional&gt;
#include &lt;iostream&gt;
#include &lt;set&gt;

void f() {
  std::set&lt;int, std::less_equal&lt;int&gt;&gt; s{5, 10, 20};  
  for (auto r = s.equal_range(10); r.first != r.second; ++r.first) {
    std::cout &lt;&lt; *r.first &lt;&lt; std::endl;
  }
}
  </sample>
 </section>
 <section title="Compliant Solution">
  <p>
   This compliant solution uses the default comparator with
   <code>
    std::set
   </code>
   instead of providing an invalid one.
  </p>
  <sample language="cpp">
   #include &lt;iostream&gt;
#include &lt;set&gt;

void f() {
  std::set&lt;int&gt; s{5, 10, 20};  
  for (auto r = s.equal_range(10); r.first != r.second; ++r.first) {
    std::cout &lt;&lt; *r.first &lt;&lt; std::endl;
  }
}
  </sample>
 </section>
 <section title="Noncompliant Code Example">
  <p>
   In this noncompliant code example, the objects stored in the std::set have an overloaded operator&lt; implementation, allowing the objects to be compared with std::less. However, the comparison operation does not provide a strict weak ordering. Specifically, two sets, x and y, whose i values are both 1, but have differing j values can result in a situation where comp(x, y) and comp(y, x) are both false, failing the asymmetry requirements.
  </p>
  <sample language="cpp">
   #include &lt;iostream&gt;
#include &lt;set&gt;

class S {
  int i, j;

public:
  S(int i, int j) : i(i), j(j) {}
  
  friend bool operator&lt;(const S &amp;lhs, const S &amp;rhs) {
    return lhs.i &lt; rhs.i &amp;&amp; lhs.j &lt; rhs.j;
  }
  
  friend std::ostream &amp;operator&lt;&lt;(std::ostream &amp;os, const S&amp; o) {
    os &lt;&lt; "i: " &lt;&lt; o.i &lt;&lt; ", j: " &lt;&lt; o.j;
    return os;
  }
};

void f() {
  std::set&lt;S&gt; t{S(1, 1), S(1, 2), S(2, 1)};
  for (auto v : t) {
    std::cout &lt;&lt; v &lt;&lt; std::endl;
  }
}
  </sample>
 </section>
 <section title="Compliant Solution">
  <p>
   This compliant solution uses std::tie() to properly implement the strict weak ordering operator&lt; predicate.
  </p>
  <sample language="cpp">
   #include &lt;iostream&gt;
#include &lt;set&gt;
#include &lt;tuple&gt;
 
class S {
  int i, j;
 
public:
  S(int i, int j) : i(i), j(j) {}
  
  friend bool operator&lt;(const S &amp;lhs, const S &amp;rhs) {
    return std::tie(lhs.i, lhs.j) &lt; std::tie(rhs.i, rhs.j);
  }
  
  friend std::ostream &amp;operator&lt;&lt;(std::ostream &amp;os, const S&amp; o) {
    os &lt;&lt; "i: " &lt;&lt; o.i &lt;&lt; ", j: " &lt;&lt; o.j;
    return os;
  }
};

void f() {
  std::set&lt;S&gt; t{S(1, 1), S(1, 2), S(2, 1)};  
  for (auto v : t) {
    std::cout &lt;&lt; v &lt;&lt; std::endl;
  }
}
  </sample>
 </section>
 <section title="Risk Assessment">
  <p>
   Using an invalid ordering rule can lead to erratic behavior or infinite loops.
  </p>
  <table>
   <tbody>
    <tr>
     <th>
      Rule
     </th>
     <th>
      Severity
     </th>
     <th>
      Likelihood
     </th>
     <th>
      Remediation Cost
     </th>
     <th>
      Priority
     </th>
     <th>
      Level
     </th>
    </tr>
    <tr>
     <td>
      CTR57-CPP
     </td>
     <td>
      Low
     </td>
     <td>
      Probable
     </td>
     <td>
      High
     </td>
     <td>
      <strong>
       P2
      </strong>
     </td>
     <td>
      <strong>
       L3
      </strong>
     </td>
    </tr>
   </tbody>
  </table>
 </section>
 <section title="Automated Detection">
  <table>
   <tbody>
    <tr>
     <th>
      Tool
     </th>
     <th>
      Version
     </th>
     <th>
      Checker
     </th>
     <th>
      Description
     </th>
    </tr>
    <tr>
     <td>
      <a href="https://wiki.sei.cmu.edu/confluence/display/cplusplus/Helix+QAC">
       Helix QAC
      </a>
     </td>
     <td>
      2021.2
     </td>
     <td>
      <strong>
       C++3293
      </strong>
     </td>
     <td>
     </td>
    </tr>
    <tr>
     <td>
      <a href="https://wiki.sei.cmu.edu/confluence/display/cplusplus/Parasoft">
       Parasoft C/C++test
      </a>
     </td>
     <td>
      2021.2
     </td>
     <td>
      <strong>
       CERT_CPP-CTR57-a
      </strong>
     </td>
     <td>
      For associative containers never use comparison function returning true for equal values
     </td>
    </tr>
   </tbody>
  </table>
 </section>
 <section title="Related Vulnerabilities">
  <p>
   Search for
   <a href="https://wiki.sei.cmu.edu/confluence/display/cplusplus/BB.+Definitions#BB.Definitions-vul">
    vulnerabilities
   </a>
   resulting from the violation of this rule on the
   <a href="https://www.kb.cert.org/vulnotes/bymetric?searchview&amp;query=FIELD+KEYWORDS+contains+CTR40-CPP">
    CERT website
   </a>
   .
  </p>
 </section>
 <section title="Related Guidelines">
  <table>
   <tbody>
    <tr>
     <td>
      <a href="https://wiki.sei.cmu.edu/confluence/display/java/SEI+CERT+Oracle+Coding+Standard+for+Java">
       SEI CERT Oracle Coding Standard for Java
      </a>
     </td>
     <td>
      <a href="https://wiki.sei.cmu.edu/confluence/display/java/MET10-J.+Follow+the+general+contract+when+implementing+the+compareTo%28%29+method">
       MET10-J. Follow the general contract when implementing the compareTo() method
      </a>
     </td>
    </tr>
   </tbody>
  </table>
 </section>
 <section title="Bibliography">
  <table>
   <tbody>
    <tr>
     <td>
      [
      <a href="https://wiki.sei.cmu.edu/confluence/display/cplusplus/AA.+Bibliography#AA.Bibliography-ISO%2FIEC14882-2014">
       ISO/IEC 14882-2014
      </a>
      ]
     </td>
     <td>
      Subclause 23.2.4, "Associative Containers"
     </td>
    </tr>
    <tr>
     <td>
      [
      <a href="https://wiki.sei.cmu.edu/confluence/display/cplusplus/AA.+Bibliography#AA.Bibliography-Meyers01">
       Meyers 2001
      </a>
      ]
     </td>
     <td>
      Item 21, "Always Have Comparison Functions Return False for Equal Values"
     </td>
    </tr>
    <tr>
     <td>
      [
      <a href="https://wiki.sei.cmu.edu/confluence/display/cplusplus/AA.+Bibliography#AA.Bibliography-Sutter04">
       Sutter 2004
      </a>
      ]
     </td>
     <td>
      Item 83, "Use a Checked STL Implementation"
     </td>
    </tr>
   </tbody>
  </table>
 </section>
</qhelp>