<!DOCTYPE qhelp SYSTEM "qhelp.dtd">
<qhelp>
 <section title="Description">
  <p>Standard-layout types can be used to communicate with code written in other programming languages, as the layout of the type is strictly specified. The C++ Standard, [class], paragraph 7 [<a href="https://wiki.sei.cmu.edu/confluence/display/cplusplus/AA.+Bibliography#AA.Bibliography-ISO%2FIEC14882-2014">ISO/IEC 14882-2014</a>], defines a standard-layout class as a class that</p>
  <ul>
   <li>does not have virtual functions,</li>
   <li>has the same access control for all nonstatic data members,</li>
   <li>has no base classes of the same type as the first nonstatic data member,</li>
   <li>has nonstatic data members declared in only one class within the class hierarchy, and</li>
   <li>recursively, does not have nonstatic data members of nonstandard-layout type.</li>
  </ul>
  <p>An <em>execution boundary</em> is the delimitation between code compiled by differing compilers, including different versions of a compiler produced by the same vendor. For instance, a function may be declared in a header file but defined in a library that is loaded at runtime. The execution boundary exists between the call site in the executable and the function implementation in the library. Such boundaries are also called <a href="https://wiki.sei.cmu.edu/confluence/display/cplusplus/BB.+Definitions#BB.Definitions-applicationbinaryinterface">ABI</a> (application binary interface) boundaries because they relate to the interoperability of application binaries.</p>
  <p>Do not make any assumptions about the specific layout of objects with nonstandard-layout types. For objects compiled by one compiler that are referenced by code compiled by a different compiler, such assumptions cause correctness and portability concerns. The layout of the object generated by the first compiler is not guaranteed to be identical to the layout generated by the second compiler, even if both compilers are <a href="https://wiki.sei.cmu.edu/confluence/display/cplusplus/BB.+Definitions#BB.Definitions-conformingprogram">conforming</a> C++ <a href="https://wiki.sei.cmu.edu/confluence/display/cplusplus/BB.+Definitions#BB.Definitions-implementation">implementations</a>. However, some implementations may document binary compatibility guarantees that can be relied on for passing nonstandard-layout objects between execution boundaries.</p>
  <p>A special instance of this guidance involves non-C++ code compiled by a different compiler, such as C standard library implementations that are exposed via the C++ standard library. C standard library functions are exposed with C++ signatures, and the type system frequently assists in ensuring that types match appropriately. This process disallows passing a pointer to a C++ object to a function expecting a <code>char *</code> without additional work to suppress the type mismatch. However, some C standard library functions accept a <code>void *</code> for which any C++ pointer type will suffice. Passing a pointer to a nonstandard-layout type in this situation results in indeterminate behavior because it depends on the behavior of the other language as well as on the layout of the given object. For more information, see rule <a href="https://wiki.sei.cmu.edu/confluence/display/cplusplus/EXP56-CPP.+Do+not+call+a+function+with+a+mismatched+language+linkage">EXP56-CPP. Do not call a function with a mismatched language linkage</a>.</p>
  <p>Pass a nonstandard-layout type object across execution boundaries only when both sides of the execution boundary adhere to the same ABI. This is permissible if the same version of a compiler is used to compile both sides of the execution boundary, if the compiler used to compile both sides of the execution boundary is ABI-compatible across multiple versions, or if the differing compilers document that they adhere to the same ABI.</p>
 </section>
 <section title="Noncompliant Code Example">
  <p>This noncompliant code example assumes that there is a library whose header is <code>library.h</code>, an application (represented by <code>application.cpp</code>), and that the library and application are not ABI-compatible. Therefore, the contents of <code>library.h</code> constitute an execution boundary. A nonstandard-layout type object <code>S</code> is passed across this execution boundary. The application creates an instance of an object of this type, then passes a reference to the object to a function defined by the library, crossing the execution boundary. Because the layout is not guaranteed to be compatible across the boundary, this results in unexpected behavior.</p>
  <sample language="cpp">// library.h
struct S {
  virtual void f() { /* ... */ }
};
 
void func(S &amp;s); // Implemented by the library, calls S::f()
 
// application.cpp
#include "library.h"
 
void g() {
  S s;
  func(s);
}</sample>
  <p>This example would be compliant if the library and the application conformed to the same ABI, either explicitly through vendor documentation or implicitly by virtue of using the same compiler version to compile both.</p>
 </section>
 <section title=" Compliant Solution">
  <p>Because the library and application do not conform to the same ABI, this compliant solution modifies the library and application to work with a standard-layout type. Furthermore, it also adds a <code>static_assert()</code> to help guard against future code changes that accidentally modify <code>S</code> to no longer be a standard-layout type.</p>
  <sample language="cpp">// library.h
#include &lt;type_traits&gt;

struct S {
  void f() { /* ... */ } // No longer virtual
};
static_assert(std::is_standard_layout&lt;S&gt;::value, "S is required to be a standard layout type");

void func(S &amp;s); // Implemented by the library, calls S::f()

// application.cpp
#include "library.h"

void g() {
  S s;
  func(s);
}</sample>
 </section>
 <section title="Noncompliant Code Example">
  <p>In this noncompliant code example, a pointer to an object of nonstandard-layout type is passed to a function that has a <code>"Fortran"</code> language linkage. Language linkages other than <code>"C"</code> and <code>"C++"</code> are conditionally supported with implementation-defined semantics [<a href="https://wiki.sei.cmu.edu/confluence/display/cplusplus/AA.+Bibliography#AA.Bibliography-ISO%2FIEC14882-2014">ISO/IEC 14882-2014</a>]. If the <a href="https://wiki.sei.cmu.edu/confluence/display/cplusplus/BB.+Definitions#BB.Definitions-implementation">implementation</a> does not support this language linkage, the code is <a href="https://wiki.sei.cmu.edu/confluence/display/cplusplus/BB.+Definitions#BB.Definitions-ill-formed">ill-formed</a>. Assuming that the language linkage is supported, any operations performed on the object passed may result in indeterminate behavior, which could have security implications.</p>
  <sample language="cpp">struct B {
  int i, j;
};
 
struct D : B {
  float f;
};
 
extern "Fortran" void func(void *);
 
void foo(D *d) {
  func(d);
}</sample>
 </section>
 <section title="Compliant Solution">
  <p>In this compliant solution, the nonstandard-layout type object is serialized into a local standard-layout type object, which is then passed to the <code>Fortran</code> function.</p>
  <sample language="cpp">struct B {
  int i, j;
};

struct D : B {
  float f;
};

extern "Fortran" void func(void *);

void foo(D *d) {
  struct {
    int i, j;
    float f;
  } temp;
 
  temp.i = d-&gt;i;
  temp.j = d-&gt;j;
  temp.f = d-&gt;f;

  func(&amp;temp);
}</sample>
 </section>
 <section title="Risk Assessment">
  <p>The effects of passing objects of nonstandard-layout type across execution boundaries depends on what operations are performed on the object within the callee as well as what subsequent operations are performed on the object from the caller. The effects can range from correct or benign behavior to <a href="https://wiki.sei.cmu.edu/confluence/display/cplusplus/BB.+Definitions#BB.Definitions-undefinedbehavior">undefined behavior</a>.</p>
  <table>
   <tbody>
    <tr>
     <th>
      Rule
     </th>
     <th>
      Severity
     </th>
     <th>
      Likelihood
     </th>
     <th>
      Remediation Cost
     </th>
     <th>
      Priority
     </th>
     <th>
      Level
     </th>
    </tr>
    <tr>
     <td>
      EXP60-CPP
     </td>
     <td>
      High
     </td>
     <td>
      Probable
     </td>
     <td>
      Medium
     </td>
     <td>
      <strong>P12</strong>
     </td>
     <td>
      <strong>L1</strong>
     </td>
    </tr>
   </tbody>
  </table>
 </section>
 <section title="Automated Detection">
  <table>
   <tbody>
    <tr>
     <th>
      Tool
     </th>
     <th>
      Version
     </th>
     <th>
      Checker
     </th>
     <th>
      Description
     </th>
    </tr>
    <tr>
     <td>
      <a href="https://wiki.sei.cmu.edu/confluence/display/cplusplus/Clang">
       Clang
      </a>
     </td>
     <td>
      3.9
     </td>
     <td>
      <code>-Wdynamic-class-memaccess</code>
     </td>
     <td>
      Catches instances where the vtable pointer will be overwritten
     </td>
    </tr>
    <tr>
     <td>
      <a href="https://wiki.sei.cmu.edu/confluence/display/cplusplus/Helix+QAC">
       Helix QAC
      </a>
     </td>
     <td>
      2021.2
     </td>
     <td>
      <strong>C++4741, C++4742, C++4743</strong>
     </td>
     <td>
     </td>
    </tr>
    <tr>
     <td>
      <a href="https://wiki.sei.cmu.edu/confluence/display/cplusplus/Parasoft">
       Parasoft C/C++test
      </a>
     </td>
     <td>
      2021.2
     </td>
     <td>
      <strong>CERT_CPP-EXP60-a</strong>
     </td>
     <td>
      Do not pass a nonstandard-layout type object across execution boundaries
     </td>
    </tr>
   </tbody>
  </table>
 </section>
 <section title="Related Vulnerabilities">
  <p>Search for other <a href="https://wiki.sei.cmu.edu/confluence/display/c/BB.+Definitions#BB.Definitions-vulnerability">vulnerabilities</a> resulting from the violation of this rule on the <a href="https://www.kb.cert.org/vulnotes/bymetric?searchview&amp;query=FIELD+KEYWORDS+contains+EXP60-CPP">CERT website</a>.</p>
 </section>
 <section title="Related Guidelines">
  <table>
   <tbody>
    <tr>
     <td>
      <a href="https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=637">
       CERT C++ Coding Standard
      </a>
     </td>
     <td>
      <a href="https://wiki.sei.cmu.edu/confluence/display/cplusplus/EXP58-CPP.+Pass+an+object+of+the+correct+type+to+va_start">
       EXP58-CPP. Pass an object of the correct type to va_start
      </a>
     </td>
    </tr>
   </tbody>
  </table>
 </section>
 <section title="Bibliography">
  <table>
   <tbody>
    <tr>
     <td>
      [
      <a href="https://wiki.sei.cmu.edu/confluence/display/cplusplus/AA.+Bibliography#AA.Bibliography-ISO%2FIEC14882-2014">
       ISO/IEC 14882-2014
      </a>
      ]
     </td>
     <td>
      Clause 9, "Classes"
      Subclause 7.5, "Linkage Specifications"
     </td>
    </tr>
   </tbody>
  </table>
 </section>
</qhelp>