<!DOCTYPE qhelp SYSTEM "qhelp.dtd">
<qhelp>
 <section title="Description">
  <p>The C++ Standard, [except.spec], paragraph 8 [<a href="https://wiki.sei.cmu.edu/confluence/display/cplusplus/AA.+Bibliography#AA.Bibliography-ISO%2FIEC14882-2014">ISO/IEC 14882-2014</a>], states the following:</p>
  <blockquote>
   <p>A function is said to <em>allow</em> an exception of type <code>E</code> if the <em>constant-expression</em> in its <em>noexcept-specification</em> evaluates to <code>false</code> or its <em>dynamic-exception-specification</em> contains a type <code>T</code> for which a handler of type <code>T</code> would be a match (15.3) for an exception of type <code>E</code>.</p>
  </blockquote>
  <p>If a function throws an exception other than one allowed by its <em>exception-specification</em>, it can lead to an <a href="https://wiki.sei.cmu.edu/confluence/display/cplusplus/BB.+Definitions#BB.Definitions-implementation-definedbehavior">implementation-defined</a> termination of the program ([except.spec], paragraph 9).</p>
  <p>If a function declared with a <em>dynamic-exception-specification</em> throws an exception of a type that would not match the <em>exception-specification</em>, the function <code>std::unexpected()</code> is called. The behavior of this function can be overridden but, by default, causes an exception of <code>std::bad_exception</code> to be thrown. Unless <code>std::bad_exception</code> is listed in the <em>exception-specification</em>, the function <code>std::terminate()</code> will be called.</p>
  <p>Similarly, if a function declared with a <em>noexcept-specification</em> throws an exception of a type that would cause the <em>noexcept-specification</em> to evaluate to <code>false</code>, the function <code>std::terminate()</code> will be called.</p>
  <p>Calling <code>std::terminate()</code> leads to implementation-defined termination of the program. To prevent <a href="https://wiki.sei.cmu.edu/confluence/display/cplusplus/BB.+Definitions#BB.Definitions-abnormaltermination">abnormal termination</a> of the program, any function that declares an <em>exception-specification</em> should restrict itself, as well as any functions it calls, to throwing only allowed exceptions.</p>
 </section>
 <section title="Noncompliant Code Example">
  <p>In this noncompliant code example, a function is declared as nonthrowing, but it is possible for <code>std::vector::resize()</code> to throw an exception when the requested memory cannot be allocated.</p>
  <sample language="cpp">#include &lt;cstddef&gt;
#include &lt;vector&gt;
 
void f(std::vector&lt;int&gt; &amp;v, size_t s) noexcept(true) {
  v.resize(s); // May throw 
}
</sample>
 </section>
 <section title="Compliant Solution">
  <p>In this compliant solution, the function's <em>noexcept-specification</em> is removed, signifying that the function allows all exceptions.</p>
  <sample language="cpp">#include &lt;cstddef&gt;
#include &lt;vector&gt;

void f(std::vector&lt;int&gt; &amp;v, size_t s) {
  v.resize(s); // May throw, but that is okay
}</sample>
 </section>
 <section title="Noncompliant Code Example">
  <p>In this noncompliant code example, the second function claims to throw only <code>Exception1</code>, but it may also throw <code><code>Exception2.</code></code></p>
  <sample language="cpp">#include &lt;exception&gt;
 
class Exception1 : public std::exception {};
class Exception2 : public std::exception {};

void foo() {
  throw Exception2{}; // Okay because foo() promises nothing about exceptions
}

void bar() throw (Exception1) {
  foo();    // Bad because foo() can throw Exception2
}
</sample>
 </section>
 <section title="Compliant Solution">
  <p>This compliant solution catches the exceptions thrown by <code>foo().</code></p>
  <sample language="cpp">#include &lt;exception&gt;
 
class Exception1 : public std::exception {};
class Exception2 : public std::exception {};

void foo() {
  throw Exception2{}; // Okay because foo() promises nothing about exceptions
}

void bar() throw (Exception1) {
  try {
    foo();
  } catch (Exception2 e) {
    // Handle error without rethrowing it
  }
}
</sample>
 </section>
 <section title="Compliant Solution">
  <p>This compliant solution declares a dynamic <em>exception-specification</em> for <code>bar()</code>, which covers all of the exceptions that can be thrown from it.</p>
  <sample language="cpp">#include &lt;exception&gt;
 
class Exception1 : public std::exception {};
class Exception2 : public std::exception {};

void foo() {
  throw Exception2{}; // Okay because foo() promises nothing about exceptions
}

void bar() throw (Exception1, Exception2) {
  foo();
}</sample>
 </section>
 <section title="Implementation Details">
  <p>Some vendors provide language extensions for specifying whether or not a function throws. For instance, <a href="https://wiki.sei.cmu.edu/confluence/display/cplusplus/BB.+Definitions#BB.Definitions-msvc">Microsoft Visual Studio</a> provides <code>__declspec(nothrow))</code>, and <a href="https://wiki.sei.cmu.edu/confluence/display/cplusplus/BB.+Definitions#BB.Definitions-clang">Clang </a>supports <code>__attribute__((nothrow))</code>. Currently, the vendors do not document the behavior of specifying a nonthrowing function using these extensions. Throwing from a function declared with one of these language extensions is presumed to be <a href="https://wiki.sei.cmu.edu/confluence/display/cplusplus/BB.+Definitions#BB.Definitions-undefinedbehavior">undefined behavior</a>.</p>
 </section>
 <section title="Risk Assessment">
  <p>Throwing unexpected exceptions disrupts control flow and can cause premature termination and <a href="https://wiki.sei.cmu.edu/confluence/display/cplusplus/BB.+Definitions#BB.Definitions-denial-of-service">denial of service</a>.</p>
  <table>
   <tbody>
    <tr>
     <th>
      Rule
     </th>
     <th>
      Severity
     </th>
     <th>
      Likelihood
     </th>
     <th>
      Remediation Cost
     </th>
     <th>
      Priority
     </th>
     <th>
      Level
     </th>
    </tr>
    <tr>
     <td>
      ERR55-CPP
     </td>
     <td>
      Low
     </td>
     <td>
      Likely
     </td>
     <td>
      Low
     </td>
     <td>
      <strong>P9</strong>
     </td>
     <td>
      <strong>L2</strong>
     </td>
    </tr>
   </tbody>
  </table>
 </section>
 <section title="Automated Detection">
  <table>
   <tbody>
    <tr>
     <th>
      Tool
     </th>
     <th>
      Version
     </th>
     <th>
      Checker
     </th>
     <th>
      Description
     </th>
    </tr>
    <tr>
     <td>
      <a href="https://wiki.sei.cmu.edu/confluence/pages/viewpage.action?pageId=222953724">
       Astr√©e
      </a>
     </td>
     <td>
      20.10
     </td>
     <td>
      <strong>unhandled-throw-noexcept</strong>
     </td>
     <td>
      Partially checked
     </td>
    </tr>
    <tr>
     <td>
      <a href="https://wiki.sei.cmu.edu/confluence/display/cplusplus/Axivion+Bauhaus+Suite">
       Axivion Bauhaus Suite
      </a>
     </td>
     <td>
      7.2.0
     </td>
     <td>
      <strong>CertC++-ERR55</strong>
     </td>
     <td>
     </td>
    </tr>
    <tr>
     <td>
      <a href="https://wiki.sei.cmu.edu/confluence/display/cplusplus/Helix+QAC">
       Helix QAC
      </a>
     </td>
     <td>
      2021.2
     </td>
     <td>
      <strong>C++4035, C++4036, C++4632</strong>
     </td>
     <td>
     </td>
    </tr>
    <tr>
     <td>
      <a href="https://wiki.sei.cmu.edu/confluence/display/cplusplus/LDRA">
       LDRA tool suite
      </a>
     </td>
     <td>
     </td>
     <td>
      <strong>56 D</strong>
     </td>
     <td>
      Partially implemented
     </td>
    </tr>
    <tr>
     <td>
      <a href="https://wiki.sei.cmu.edu/confluence/display/cplusplus/Parasoft">
       Parasoft C/C++Test
      </a>
     </td>
     <td>
      2021.2
     </td>
     <td>
      <strong>CERT_CPP-ERR55-a</strong>
     </td>
     <td>
      Where a function's declaration includes an exception-specification, the function shall only be capable of throwing exceptions of the indicated type(s)
     </td>
    </tr>
    <tr>
     <td>
      <a href="https://wiki.sei.cmu.edu/confluence/display/cplusplus/Polyspace+Bug+Finder">
       Polyspace Bug Finder
      </a>
     </td>
     <td>
      R2021b
     </td>
     <td>
      <a href="https://www.mathworks.com/help/bugfinder/ref/certcerr55cpp.html">
       CERT C++: ERR55-CPP
      </a>
     </td>
     <td>
      Checks for noexcept functions exiting with exception (rule fully covered)
     </td>
    </tr>
    <tr>
     <td>
      <a href="https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=142409849">
       PRQA QA-C++
      </a>
     </td>
     <td>
      4.4
     </td>
     <td>
      <strong>4035, 4036, 4632</strong>
     </td>
     <td>
     </td>
    </tr>
    <tr>
     <td>
      <a href="https://wiki.sei.cmu.edu/confluence/display/cplusplus/RuleChecker">
       RuleChecker
      </a>
     </td>
     <td>
      20.10
     </td>
     <td>
      <strong>unhandled-throw-noexcept</strong>
     </td>
     <td>
      Partially checked
     </td>
    </tr>
   </tbody>
  </table>
 </section>
 <section title="Related Vulnerabilities">
  <p>Search for <a href="https://wiki.sei.cmu.edu/confluence/display/cplusplus/BB.+Definitions#BB.Definitions-vulner">vulnerabilities</a> resulting from the violation of this rule on the <a href="https://www.kb.cert.org/vulnotes/bymetric?searchview&amp;query=FIELD+KEYWORDS+contains+ERR37-CPP">CERT website</a>.</p>
 </section>
 <section title="Related Guidelines">
  <table>
   <tbody>
    <tr>
     <td>
      <a href="https://wiki.sei.cmu.edu/confluence/pages/viewpage.action?pageId=88046682">
       SEI CERT C++ Coding Standard
      </a>
     </td>
     <td>
      <a href="https://wiki.sei.cmu.edu/confluence/display/cplusplus/ERR50-CPP.+Do+not+abruptly+terminate+the+program">
       ERR50-CPP. Do not abruptly terminate the program
      </a>
     </td>
    </tr>
   </tbody>
  </table>
 </section>
 <section title="Bibliography">
  <table>
   <tbody>
    <tr>
     <td>
      [
      <a href="https://wiki.sei.cmu.edu/confluence/display/cplusplus/AA.+Bibliography#AA.Bibliography-gnu2016">
       GNU 2016
      </a>
      ]
     </td>
     <td>
      "Declaring Attributes of Functions"
     </td>
    </tr>
    <tr>
     <td>
      [
      <a href="https://wiki.sei.cmu.edu/confluence/display/cplusplus/AA.+Bibliography#AA.Bibliography-ISO%2FIEC14882-2014">
       ISO/IEC 14882-2014
      </a>
      ]
     </td>
     <td>
      Subclause 15.4, "Exception Specifications"
     </td>
    </tr>
    <tr>
     <td>
      [
      <a href="https://wiki.sei.cmu.edu/confluence/display/cplusplus/AA.+Bibliography#AA.Bibliography-msdn2016">
       MSDN 2016
      </a>
      ]
     </td>
     <td>
      "
      <code>nothrow</code>
      (C++)"
     </td>
    </tr>
   </tbody>
  </table>
 </section>
</qhelp>