<!DOCTYPE qhelp SYSTEM "qhelp.dtd">
<qhelp>
 <section title="Description">
  <p>
   The C standard library facilities
   <code>
    setjmp()
   </code>
   and
   <code>
    longjmp()
   </code>
   can be used to simulate throwing and catching exceptions. However, these facilities bypass automatic resource management and can result in
   <a href="https://wiki.sei.cmu.edu/confluence/display/cplusplus/BB.+Definitions#BB.Definitions-undefinedbehavior">
    undefined behavior
   </a>
   , commonly including resource leaks and
   <a href="https://wiki.sei.cmu.edu/confluence/display/cplusplus/BB.+Definitions#BB.Definitions-denial-of-service">
    denial-of-service attacks
   </a>
   .
  </p>
  <p>
   The C++ Standard, [support.runtime], paragraph 4
   [
   <a href="https://wiki.sei.cmu.edu/confluence/display/cplusplus/AA.+Bibliography#AA.Bibliography-ISO%2FIEC14882-2014">
    ISO/IEC 14882-2014
   </a>
   ], states the following
   :
  </p>
  <blockquote>
   <p>
    The function signature
    <code>
     longjmp(jmp_buf jbuf, int val)
    </code>
    has more restricted behavior in this International Standard. A
    <code>
     setjmp
    </code>
    /
    <code>
     longjmp
    </code>
    call pair has undefined behavior if replacing the
    <code>
     setjmp
    </code>
    and
    <code>
     longjmp
    </code>
    by
    <code>
     catch
    </code>
    and
    <code>
     throw
    </code>
    would invoke any non-trivial destructors for any automatic objects.
   </p>
  </blockquote>
  <p>
   Do not call
   <code>
    setjmp()
   </code>
   or
   <code>
    longjmp()
   </code>
   ; their usage can be replaced by more standard idioms such as
   <code>
    throw
   </code>
   expressions and
   <code>
    catch
   </code>
   statements.
  </p>
 </section>
 <section title="Noncompliant Code Example">
  <p>
   If a
   <code>
    throw
   </code>
   expression would cause a nontrivial destructor to be invoked, then calling
   <code>
    longjmp()
   </code>
   in the same context will result in
   <a href="https://wiki.sei.cmu.edu/confluence/display/cplusplus/BB.+Definitions#BB.Definitions-undefinedbehavior">
    undefined behavior
   </a>
   . In the following noncompliant code example, the call to
   <code>
    longjmp()
   </code>
   occurs in a context with a local
   <code>
    Counter
   </code>
   object. Since this object’s destructor is nontrivial, undefined behavior results.
  </p>
  <sample language="cpp">
   #include &lt;csetjmp&gt;
#include &lt;iostream&gt;

static jmp_buf env;

struct Counter {
  static int instances;
  Counter() { ++instances; }
  ~Counter() { --instances; }
};

int Counter::instances = 0;

void f() {
  Counter c;
  std::cout &lt;&lt; "f(): Instances: " &lt;&lt; Counter::instances &lt;&lt; std::endl;
  std::longjmp(env, 1);
}

int main() {
  std::cout &lt;&lt; "Before setjmp(): Instances: " &lt;&lt; Counter::instances &lt;&lt; std::endl;
  if (setjmp(env) == 0) {
    f();
  } else {
    std::cout &lt;&lt; "From longjmp(): Instances: " &lt;&lt; Counter::instances &lt;&lt; std::endl;
  }
  std::cout &lt;&lt; "After longjmp(): Instances: " &lt;&lt; Counter::instances &lt;&lt; std::endl;
}
  </sample>
  <p>
   <strong>
    Implementation Details
   </strong>
  </p>
  <p>
   The above code produces the following results when compiled with
   <a href="https://wiki.sei.cmu.edu/confluence/display/cplusplus/BB.+Definitions#BB.Definitions-clang">
    Clang
   </a>
   3.8 for Linux, demonstrating that the program, on this platform, fails to destroy the local
   <code>
    Counter
   </code>
   instance when the execution of
   <code>
    f()
   </code>
   is terminated. This is permissible as the behavior is undefined.
  </p>
  <sample language="cpp">
   Before setjmp(): Instances: 0
f(): Instances: 1
From longjmp(): Instances: 1
After longjmp(): Instances: 1
  </sample>
 </section>
 <section title="Compliant Solution">
  <p>
   This compliant solution replaces the calls to
   <code>
    setjmp()
   </code>
   and
   <code>
    longjmp()
   </code>
   with a
   <code>
    throw
   </code>
   expression and a
   <code>
    catch
   </code>
   statement.
  </p>
  <sample language="cpp">
   #include &lt;iostream&gt;

struct Counter {
  static int instances;
  Counter() { ++instances; }
  ~Counter() { --instances; }
};

int Counter::instances = 0;

void f() {
  Counter c;
  std::cout &lt;&lt; "f(): Instances: " &lt;&lt; Counter::instances &lt;&lt; std::endl;
  throw "Exception";
}

int main() {
  std::cout &lt;&lt; "Before throw: Instances: " &lt;&lt; Counter::instances &lt;&lt; std::endl;
  try {
    f();
  } catch (const char *E) {
    std::cout &lt;&lt; "From catch: Instances: " &lt;&lt; Counter::instances &lt;&lt; std::endl;
  }
  std::cout &lt;&lt; "After catch: Instances: " &lt;&lt; Counter::instances &lt;&lt; std::endl;
}
  </sample>
  <p>
   This solution produces the following output.
  </p>
  <sample language="cpp">
   Before throw: Instances: 0
f(): Instances: 1
From catch: Instances: 0
After catch: Instances: 0
  </sample>
 </section>
 <section title="Risk Assessment">
  <p>
   Using
   <code>
    setjmp()
   </code>
   and
   <code>
    longjmp()
   </code>
   could lead to a
   <a href="https://wiki.sei.cmu.edu/confluence/display/cplusplus/BB.+Definitions">
    denial-of-service attack
   </a>
   due to resources not being properly destroyed.
  </p>
  <table>
   <tbody>
    <tr>
     <th>
      Rule
     </th>
     <th>
      Severity
     </th>
     <th>
      Likelihood
     </th>
     <th>
      Remediation Cost
     </th>
     <th>
      Priority
     </th>
     <th>
      Level
     </th>
    </tr>
    <tr>
     <td>
      ERR52-CPP
     </td>
     <td>
      Low
     </td>
     <td>
      Probable
     </td>
     <td>
      Medium
     </td>
     <td>
      <strong>
       P4
      </strong>
     </td>
     <td>
      <strong>
       L3
      </strong>
     </td>
    </tr>
   </tbody>
  </table>
 </section>
 <section title="Automated Detection">
  <table>
   <tbody>
    <tr>
     <th>
      Tool
     </th>
     <th>
      Version
     </th>
     <th>
      Checker
     </th>
     <th>
      Description
     </th>
    </tr>
    <tr>
     <td>
      <a href="https://wiki.sei.cmu.edu/confluence/pages/viewpage.action?pageId=222953724">
       Astrée
      </a>
     </td>
     <td>
      20.10
     </td>
     <td>
      <strong>
       include-setjmp
      </strong>
     </td>
     <td>
      Fully checked
     </td>
    </tr>
    <tr>
     <td>
      <a href="https://wiki.sei.cmu.edu/confluence/display/cplusplus/Axivion+Bauhaus+Suite">
       Axivion Bauhaus Suite
      </a>
     </td>
     <td>
      7.2.0
     </td>
     <td>
      <strong>
       CertC++-ERR52
      </strong>
     </td>
     <td>
     </td>
    </tr>
    <tr>
     <td>
      <a href="https://wiki.sei.cmu.edu/confluence/display/cplusplus/Clang">
       Clang
      </a>
     </td>
     <td>
      3.9
     </td>
     <td>
      <code>
       cert-err52-cpp
      </code>
     </td>
     <td>
      Checked by
      <code>
       clang-tidy
      </code>
      .
     </td>
    </tr>
    <tr>
     <td>
      <a href="https://wiki.sei.cmu.edu/confluence/display/cplusplus/CodeSonar">
       CodeSonar
      </a>
     </td>
     <td>
      6.1p0
     </td>
     <td>
      <strong>
       BADFUNC.LONGJMP
       BADFUNC.SETJMP
      </strong>
     </td>
     <td>
      Use of longjmp
      Use of setjmp
     </td>
    </tr>
    <tr>
     <td>
      <a href="https://wiki.sei.cmu.edu/confluence/display/cplusplus/Helix+QAC">
       Helix QAC
      </a>
     </td>
     <td>
      2021.2
     </td>
     <td>
      <strong>
       C++5015
      </strong>
     </td>
     <td>
     </td>
    </tr>
    <tr>
     <td>
      <a href="https://www.securecoding.cert.org/confluence/display/cplusplus/Klocwork">
       Klocwork
      </a>
     </td>
     <td>
      2021.4
     </td>
     <td>
      <strong>
       <a href="https://support.roguewave.com/documentation/klocwork/en/current/certcandcsecurecodingstandardidsmappedtoklocworkcandccheckers/">
        MISRA.STDLIB.LONGJMP
       </a>
      </strong>
     </td>
     <td>
     </td>
    </tr>
    <tr>
     <td>
      <a href="https://wiki.sei.cmu.edu/confluence/display/cplusplus/LDRA">
       LDRA tool suite
      </a>
     </td>
     <td>
     </td>
     <td>
      <strong>
       43 S
      </strong>
     </td>
     <td>
      Fully implemented
     </td>
    </tr>
    <tr>
     <td>
      <a href="https://wiki.sei.cmu.edu/confluence/display/cplusplus/Parasoft">
       Parasoft C/C++test
      </a>
     </td>
     <td>
      2021.2
     </td>
     <td>
      <strong>
       CERT_CPP-ERR52-a
      </strong>
      <strong>
       CERT_CPP-ERR52-b
      </strong>
     </td>
     <td>
      The setjmp macro and the longjmp function shall not be used
      The standard header file &lt;setjmp.h&gt; shall not be used
     </td>
    </tr>
    <tr>
     <td>
      <a href="https://wiki.sei.cmu.edu/confluence/display/cplusplus/Polyspace+Bug+Finder">
       Polyspace Bug Finder
      </a>
     </td>
     <td>
      R2021b
     </td>
     <td>
      <a href="https://www.mathworks.com/help/bugfinder/ref/certcerr52cpp.html">
       CERT C++: ERR52-CPP
      </a>
     </td>
     <td>
      Checks for use of setjmp/longjmp (rule fully covered)
     </td>
    </tr>
    <tr>
     <td>
      <a href="https://wiki.sei.cmu.edu/confluence/pages/viewpage.action?pageId=88046345">
       PRQA QA-C++
      </a>
     </td>
     <td>
      4.4
     </td>
     <td>
      <strong>
       5015
      </strong>
     </td>
     <td>
     </td>
    </tr>
    <tr>
     <td>
      <a href="https://wiki.sei.cmu.edu/confluence/display/cplusplus/RuleChecker">
       RuleChecker
      </a>
     </td>
     <td>
      20.10
     </td>
     <td>
      <strong>
       include-setjmp
      </strong>
     </td>
     <td>
      Fully checked
     </td>
    </tr>
    <tr>
     <td>
      <a href="https://wiki.sei.cmu.edu/confluence/pages/viewpage.action?pageId=88046388">
       SonarQube C/C++ Plugin
      </a>
     </td>
     <td>
      4.10
     </td>
     <td>
      <strong>
       <a href="https://www.sonarsource.com/products/codeanalyzers/sonarcfamilyforcpp/rules-cpp.html#RSPEC-982">
        S982
       </a>
      </strong>
     </td>
     <td>
     </td>
    </tr>
   </tbody>
  </table>
 </section>
 <section title="Related Vulnerabilities">
  <p>
   Search for other
   <a href="https://wiki.sei.cmu.edu/confluence/display/cplusplus/BB.+Definitions#BB.Definitions-vulnerability">
    vulnerabilities
   </a>
   resulting from the violation of this rule on the
   <a href="https://www.kb.cert.org/vulnotes/bymetric?searchview&amp;query=FIELD+KEYWORDS+contains+ERR34-CPP">
    CERT website
   </a>
   .
  </p>
 </section>
 <section title="Bibliography">
  <table>
   <tbody>
    <tr>
     <td>
      [
      <a href="https://wiki.sei.cmu.edu/confluence/display/cplusplus/AA.+Bibliography#AA.Bibliography-Henricson97">
       Henricson 1997
      </a>
      ]
     </td>
     <td>
      Rule 13.3, Do not use
      <code>
       setjmp()
      </code>
      and
      <code>
       longjmp()
      </code>
     </td>
    </tr>
    <tr>
     <td>
      [
      <a href="https://wiki.sei.cmu.edu/confluence/display/cplusplus/AA.+Bibliography#AA.Bibliography-ISO%2FIEC14882-2014">
       ISO/IEC 14882-2014
      </a>
      ]
     </td>
     <td>
      Subclause 18.10, "Other Runtime Support"
     </td>
    </tr>
   </tbody>
  </table>
 </section>
</qhelp>