<!DOCTYPE qhelp SYSTEM "qhelp.dtd">
<qhelp>
 <section title="Description">
  <p>The <code>std::basic_string</code> type uses the <em>traits</em> design pattern to handle implementation details of the various string types, resulting in a series of string-like classes with a common, underlying implementation. Specifically, the <code>std::basic_string</code> class is paired with <code>std::char_traits</code> to create the <code>std::string</code>, <code>std::wstring</code>, <code>std::u16string</code>, and <code>std::u32string</code> classes. The <code>std::char_traits</code> class is explicitly specialized to provide policy-based implementation details to the <code>std::basic_string</code> type. One such implementation detail is the <code>std::char_traits::length()</code> function, which is frequently used to determine the number of characters in a null-terminated string. According to the C++ Standard, [char.traits.require], Table 62 [<a href="https://wiki.sei.cmu.edu/confluence/display/cplusplus/AA.+Bibliography#AA.Bibliography-ISO%2FIEC14882-2014">ISO/IEC 14882-2014</a>], passing a null pointer to this function is <a href="https://wiki.sei.cmu.edu/confluence/display/cplusplus/BB.+Definitions#BB.Definitions-undefinedbehavior">undefined behavior</a> because it would result in dereferencing a null pointer.</p>
  <p>The following <code>std::basic_string</code> member functions result in a call to <code>std::char_traits::length()</code>:</p>
  <ul>
   <li><code>basic_string::basic_string(const charT *, const Allocator &amp;)</code></li>
   <li><code>basic_string &amp;basic_string::append(const charT *)</code> </li>
   <li><code>basic_string &amp;basic_string::assign(const charT *)</code></li>
   <li><code>basic_string &amp;basic_string::insert(size_type, const charT *)</code></li>
   <li><code>basic_string &amp;basic_string::replace(size_type, size_type, const charT *)</code></li>
   <li><code>basic_string &amp;basic_string::replace(const_iterator, const_iterator, const charT *)</code></li>
   <li><code>size_type basic_string::find(const charT *, size_type)</code></li>
   <li><code>size_type basic_string::rfind(const charT *, size_type)</code></li>
   <li><code>size_type basic_string::find_first_of(const charT *, size_type)</code></li>
   <li><code>size_type basic_string::find_last_of(const charT *, size_type)</code></li>
   <li><code>size_type basic_string::find_first_not_of(const charT *, size_type)</code></li>
   <li><code>size_type basic_string::find_last_not_of(const charT *, size_type)</code></li>
   <li><code>int basic_string::compare(const charT *)</code></li>
   <li><code>int basic_string::compare(size_type, size_type, const charT *)</code></li>
   <li><code>basic_string &amp;basic_string::operator=(const charT *)</code></li>
   <li><code>basic_string &amp;basic_string::operator+=(const charT *)</code></li>
  </ul>
  <p>The following <code>std::basic_string</code> nonmember functions result in a call to to <code>std::char_traits::length()</code>:</p>
  <ul>
   <li><code>basic_string operator+(const charT *, const basic_string&amp;)</code></li>
   <li><code>basic_string operator+(const charT *, basic_string &amp;&amp;)</code></li>
   <li><code>basic_string operator+(const basic_string &amp;, const charT *)</code></li>
   <li><code>basic_string operator+(basic_string &amp;&amp;, const charT *)</code></li>
   <li><code>bool operator==(const charT *, const basic_string &amp;)</code></li>
   <li><code>bool operator==(const basic_string &amp;, const charT *)</code></li>
   <li><code>bool operator!=(const charT *, const basic_string &amp;)</code></li>
   <li><code>bool operator!=(const basic_string &amp;, const charT *)</code></li>
   <li><code>bool operator&lt;(const charT *, const basic_string &amp;)</code></li>
   <li><code>bool operator&lt;(const basic_string &amp;, const charT *)</code></li>
   <li><code>bool operator&gt;(const charT *, const basic_string &amp;)</code></li>
   <li><code>bool operator&gt;(const basic_string &amp;, const charT *)</code></li>
   <li><code>bool operator&lt;=(const charT *, const basic_string &amp;)</code></li>
   <li><code>bool operator&lt;=(const basic_string &amp;, const charT *)</code></li>
   <li><code>bool operator&gt;=(const charT *, const basic_string &amp;)</code></li>
   <li><code>bool operator&gt;=(const basic_string &amp;, const charT *)</code></li>
  </ul>
  <p>Do not call any of the preceding functions with a null pointer as the <code>const charT *</code> argument.</p>
  <p>This rule is a specific instance of <a href="https://wiki.sei.cmu.edu/confluence/display/c/EXP34-C.+Do+not+dereference+null+pointers">EXP34-C. Do not dereference null pointers</a>.</p>
  <p><strong>Implementation Details</strong></p>
  <p>Some standard library vendors, such as <a href="https://wiki.sei.cmu.edu/confluence/display/cplusplus/BB.+Definitions#BB.Definitions-libstdcxx">libstdc++, </a>throw a <code>std::logic_error</code> when a null pointer is used in the above function calls, though not when calling <code>std::char_traits::length()</code>. However, <code>std::logic_error</code> is not a requirement of the C++ Standard, and some vendors (e.g., <a href="https://wiki.sei.cmu.edu/confluence/display/cplusplus/BB.+Definitions#BB.Definitions-libcxx">libc++</a> and the <a href="https://wiki.sei.cmu.edu/confluence/display/cplusplus/BB.+Definitions#BB.Definitions-msvcstl">Microsoft Visual Studio STL</a>) do not implement this behavior. For portability, you should not rely on this behavior.</p>
 </section>
 <section title="Noncompliant Code Example">
  <p>In this noncompliant code example, a <code>std::string</code> object is created from the results of a call to <code>std::getenv()</code>. However, because <code>std::getenv()</code> returns a null pointer on failure, this code can lead to <a href="https://wiki.sei.cmu.edu/confluence/display/cplusplus/BB.+Definitions#BB.Definitions-undefinedbehavior">undefined behavior</a> when the environment variable does not exist (or some other error occurs).</p>
  <sample language="cpp">#include &lt;cstdlib&gt;
#include &lt;string&gt;
 
void f() {
  std::string tmp(std::getenv("TMP"));
  if (!tmp.empty()) {
    // ...
  }
}</sample>
 </section>
 <section title="Compliant Solution">
  <p>In this compliant solution, the results from the call to <code>std::getenv()</code> are checked for null before the <code>std::string</code> object is constructed.</p>
  <sample language="cpp">#include &lt;cstdlib&gt;
#include &lt;string&gt;
 
void f() {
  const char *tmpPtrVal = std::getenv("TMP");
  std::string tmp(tmpPtrVal ? tmpPtrVal : "");
  if (!tmp.empty()) {
    // ...
  }
}</sample>
 </section>
 <section title="Risk Assessment">
  <p>Dereferencing a null pointer is <a href="https://wiki.sei.cmu.edu/confluence/display/cplusplus/BB.+Definitions#BB.Definitions-undefinedbehavior">undefined behavior</a>, typically <a href="https://wiki.sei.cmu.edu/confluence/display/cplusplus/BB.+Definitions#BB.Definitions-abnormaltermination">abnormal program termination</a>. In some situations, however, dereferencing a null pointer can lead to the execution of arbitrary code [<a href="https://wiki.sei.cmu.edu/confluence/display/cplusplus/AA.+Bibliography#AA.Bibliography-Jack07">Jack 2007</a>, <a href="https://wiki.sei.cmu.edu/confluence/display/cplusplus/AA.+Bibliography#AA.Bibliography-vanSprundel06">van Sprundel 2006</a>]. The indicated severity is for this more severe case; on platforms where it is not possible to <a href="https://wiki.sei.cmu.edu/confluence/display/cplusplus/BB.+Definitions">exploit</a> a null pointer dereference to execute arbitrary code, the actual severity is low.</p>
  <table>
   <tbody>
    <tr>
     <th>
      Rule
     </th>
     <th>
      Severity
     </th>
     <th>
      Likelihood
     </th>
     <th>
      Remediation Cost
     </th>
     <th>
      Priority
     </th>
     <th>
      Level
     </th>
    </tr>
    <tr>
     <td>
      STR51-CPP
     </td>
     <td>
      High
     </td>
     <td>
      Likely
     </td>
     <td>
      Medium
     </td>
     <td>
      <strong>P18</strong>
     </td>
     <td>
      <strong>L1</strong>
     </td>
    </tr>
   </tbody>
  </table>
 </section>
 <section title="Automated Detection">
  <table>
   <tbody>
    <tr>
     <th>
      Tool
     </th>
     <th>
      Version
     </th>
     <th>
      Checker
     </th>
     <th>
      Description
     </th>
    </tr>
    <tr>
     <td>
      <a href="https://wiki.sei.cmu.edu/confluence/pages/viewpage.action?pageId=222953724">
       Astr√©e
      </a>
     </td>
     <td>
      20.10
     </td>
     <td>
      <strong>assert_failure</strong>
     </td>
     <td>
     </td>
    </tr>
    <tr>
     <td>
      <a href="https://wiki.sei.cmu.edu/confluence/display/cplusplus/Helix+QAC">
       Helix QAC
      </a>
     </td>
     <td>
      2021.2
     </td>
     <td>
      <strong>C++4770, C++4771, C++4772, C++4773, C++4774</strong>
     </td>
     <td>
     </td>
    </tr>
    <tr>
     <td>
      <a href="https://wiki.sei.cmu.edu/confluence/display/cplusplus/Klocwork">
       Klocwork
      </a>
     </td>
     <td>
      2021.4
     </td>
     <td>
      <strong><a href="https://support.roguewave.com/documentation/klocwork/en/current/certcandcsecurecodingstandardidsmappedtoklocworkcandccheckers/">NPD.CHECK.CALL.MIGHT</a></strong>
      <strong><a href="https://support.roguewave.com/documentation/klocwork/en/current/certcandcsecurecodingstandardidsmappedtoklocworkcandccheckers/">NPD.CHECK.CALL.MUST</a></strong>
      <strong><a href="https://support.roguewave.com/documentation/klocwork/en/current/certcandcsecurecodingstandardidsmappedtoklocworkcandccheckers/">NPD.CHECK.MIGHT</a></strong>
      <strong><a href="https://support.roguewave.com/documentation/klocwork/en/current/certcandcsecurecodingstandardidsmappedtoklocworkcandccheckers/">NPD.CHECK.MUST</a></strong>
      <strong><a href="https://support.roguewave.com/documentation/klocwork/en/current/certcandcsecurecodingstandardidsmappedtoklocworkcandccheckers/">NPD.CONST.CALL</a></strong>
      <strong><a href="https://support.roguewave.com/documentation/klocwork/en/current/certcandcsecurecodingstandardidsmappedtoklocworkcandccheckers/">NPD.CONST.DEREF</a></strong>
      <strong><a href="https://support.roguewave.com/documentation/klocwork/en/current/certcandcsecurecodingstandardidsmappedtoklocworkcandccheckers/">NPD.FUNC.CALL.MIGHT</a></strong>
      <strong><a href="https://support.roguewave.com/documentation/klocwork/en/current/certcandcsecurecodingstandardidsmappedtoklocworkcandccheckers/">NPD.FUNC.CALL.MUST</a></strong>
      <strong><a href="https://support.roguewave.com/documentation/klocwork/en/current/certcandcsecurecodingstandardidsmappedtoklocworkcandccheckers/">NPD.FUNC.MIGHT</a></strong>
      <strong><a href="https://support.roguewave.com/documentation/klocwork/en/current/certcandcsecurecodingstandardidsmappedtoklocworkcandccheckers/">NPD.FUNC.MUST</a></strong>
      <strong><a href="https://support.roguewave.com/documentation/klocwork/en/current/certcandcsecurecodingstandardidsmappedtoklocworkcandccheckers/">NPD.GEN.CALL.MIGHT</a><a href="https://support.roguewave.com/documentation/klocwork/en/current/certcandcsecurecodingstandardidsmappedtoklocworkcandccheckers/">NPD.GEN.CALL.MUST</a><a href="https://support.roguewave.com/documentation/klocwork/en/current/certcandcsecurecodingstandardidsmappedtoklocworkcandccheckers/">NPD.GEN.MIGHT</a><a href="https://support.roguewave.com/documentation/klocwork/en/current/certcandcsecurecodingstandardidsmappedtoklocworkcandccheckers/">NPD.GEN.</a><a href="https://support.roguewave.com/documentation/klocwork/en/current/certcandcsecurecodingstandardidsmappedtoklocworkcandccheckers/">MUST</a></strong>
      <strong><a href="https://support.roguewave.com/documentation/klocwork/en/current/certcandcsecurecodingstandardidsmappedtoklocworkcandccheckers/">RNPD.CALL</a><a href="https://support.roguewave.com/documentation/klocwork/en/current/certcandcsecurecodingstandardidsmappedtoklocworkcandccheckers/">RNPD.DEREF</a></strong>
     </td>
     <td>
     </td>
    </tr>
    <tr>
     <td>
      <a href="https://wiki.sei.cmu.edu/confluence/display/cplusplus/Parasoft">
       Parasoft C/C++test
      </a>
     </td>
     <td>
      2021.2
     </td>
     <td>
      <strong>CERT_CPP-STR51-a</strong>
     </td>
     <td>
      Avoid null pointer dereferencing
     </td>
    </tr>
   </tbody>
  </table>
 </section>
 <section title="Related Vulnerabilities">
  <p>Search for <a href="https://wiki.sei.cmu.edu/confluence/display/cplusplus/BB.+Definitions#BB.Definitions-vul">vulnerabilities</a> resulting from the violation of this rule on the <a href="https://www.kb.cert.org/vulnotes/bymetric?searchview&amp;query=FIELD+KEYWORDS+contains+STR36-CPP">CERT website</a>.</p>
 </section>
 <section title="Related Guidelines">
  <table>
   <tbody>
    <tr>
     <td>
      <a href="https://wiki.sei.cmu.edu/confluence/display/c/SEI+CERT+C+Coding+Standard">
       SEI CERT C Coding Standard
      </a>
     </td>
     <td>
      <a href="https://wiki.sei.cmu.edu/confluence/display/c/EXP34-C.+Do+not+dereference+null+pointers">
       EXP34-C. Do not dereference null pointers
      </a>
     </td>
    </tr>
   </tbody>
  </table>
 </section>
 <section title="Bibliography">
  <table>
   <tbody>
    <tr>
     <td>
      [
      <a href="https://wiki.sei.cmu.edu/confluence/display/cplusplus/AA.+Bibliography#AA.Bibliography-ISO%2FIEC9899-2011">
       ISO/IEC 9899:2011
      </a>
      ]
     </td>
     <td>
      Subclause 7.20.3, "Memory Management Functions"
     </td>
    </tr>
    <tr>
     <td>
      [
      <a href="https://wiki.sei.cmu.edu/confluence/display/cplusplus/AA.+Bibliography#AA.Bibliography-ISO%2FIEC14882-2014">
       ISO/IEC 14882-2014
      </a>
      ]
     </td>
     <td>
      Subclause 21.2.1, "Character Trait Requirements"
     </td>
    </tr>
    <tr>
     <td>
      [
      <a href="https://wiki.sei.cmu.edu/confluence/display/cplusplus/AA.+Bibliography#AA.Bibliography-Jack07">
       Jack 2007
      </a>
      ]
     </td>
     <td>
     </td>
    </tr>
    <tr>
     <td>
      [
      <a href="https://wiki.sei.cmu.edu/confluence/display/cplusplus/AA.+Bibliography#AA.Bibliography-vanSprundel06">
       van Sprundel 2006
      </a>
      ]
     </td>
     <td>
     </td>
    </tr>
   </tbody>
  </table>
 </section>
</qhelp>