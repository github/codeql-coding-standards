<!DOCTYPE qhelp SYSTEM "qhelp.dtd">
<qhelp>
 <section title="Description">
  <p>
   When an exception is thrown, the value of the object in the throw expression is used to initialize an anonymous temporary object called the
   <em>
    exception object
   </em>
   . The type of this exception object is used to transfer control to the nearest catch handler, which contains an exception declaration with a matching type. The C++ Standard, [except.handle], paragraph 16 [
   <a href="https://wiki.sei.cmu.edu/confluence/display/cplusplus/AA.+Bibliography#AA.Bibliography-ISO%2FIEC14882-2014">
    ISO/IEC 14882-2014
   </a>
   ], in part, states the following:
  </p>
  <blockquote>
   <p>
    The variable declared by the
    <em>
     exception-declaration
    </em>
    , of type
    <em>
     cv
    </em>
    <code>
     T
    </code>
    or
    <em>
     cv
    </em>
    <code>
     T&amp;
    </code>
    , is initialized from the exception object, of type
    <code>
     E
    </code>
    , as follows:
    — if
    <code>
     T
    </code>
    is a base class of
    <code>
     E
    </code>
    , the variable is copy-initialized from the corresponding base class subobject of the exception object;
    — otherwise, the variable is copy-initialized from the exception object.
   </p>
  </blockquote>
  <p>
   Because the variable declared by the
   <em>
    exception-declaration
   </em>
   is copy-initialized, it is possible to
   <em>
    slice
    <a href="https://en.wikipedia.org/wiki/Object_slicing">
    </a>
   </em>
   the exception object as part of the copy operation, losing valuable exception information and leading to incorrect error recovery.
   For more information about object slicing, see
   <a href="https://wiki.sei.cmu.edu/confluence/display/cplusplus/OOP51-CPP.+Do+not+slice+derived+objects">
    OOP51-CPP. Do not slice derived objects
   </a>
   . Further, if the copy constructor of the exception object throws an exception, the copy initialization of the
   <em>
    exception-declaration
   </em>
   object results in undefined behavior. (See
   <a href="https://wiki.sei.cmu.edu/confluence/display/cplusplus/ERR60-CPP.+Exception+objects+must+be+nothrow+copy+constructible">
    ERR60-CPP. Exception objects must be nothrow copy constructible
   </a>
   for more information.)
  </p>
  <p>
   Always catch exceptions by
   <a href="https://wiki.sei.cmu.edu/confluence/display/cplusplus/BB.+Definitions#BB.Definitions-lvalue">
    lvalue
   </a>
   reference unless the type is a trivial type. For reference, the C++ Standard, [basic.types], paragraph 9 [
   <a href="https://wiki.sei.cmu.edu/confluence/display/cplusplus/AA.+Bibliography#AA.Bibliography-ISO%2FIEC14882-2014">
    ISO/IEC 14882-2014
   </a>
   ], defines trivial types as the following:
  </p>
  <blockquote>
   <p>
    Arithmetic types, enumeration types, pointer types, pointer to member types,
    <code>
     std::nullptr_t
    </code>
    , and cv-qualified versions of these types are collectively called
    <em>
     scalar types
    </em>
    .... Scalar types, trivial class types, arrays of such types and cv-qualified versions of these types are collectively called
    <em>
     trivial types
    </em>
    .
   </p>
  </blockquote>
  <p>
   The C++ Standard, [class], paragraph 6, defines trivial class types as the following:
  </p>
  <blockquote>
   <p>
    A
    <em>
     trivially copyable class
    </em>
    is a class that:
    — has no non-trivial copy constructors,
    — has no non-trivial move constructors,
    — has no non-trivial copy assignment operators,
    — has no non-trivial move assignment operators, and
    — has a trivial destructor.
    A
    <em>
     trivial class
    </em>
    is a class that has a default constructor, has no non-trivial default constructors, and is trivially copyable. [
    <em>
     Note
    </em>
    : In particular, a trivially copyable or trivial class does not have virtual functions or virtual base classes. —
    <em>
     end note
    </em>
    ]
   </p>
  </blockquote>
 </section>
 <section title="Noncompliant Code Example">
  <p>
   In this noncompliant code example, an object of type
   <code>
    S
   </code>
   is used to initialize the exception object that is later caught by an
   <em>
    exception-declaration
   </em>
   of type
   <code>
    std::exception
   </code>
   . The
   <em>
    exception-declaration
   </em>
   matches the exception object type, so the variable
   <code>
    E
   </code>
   is copy-initialized from the exception object, resulting in the exception object being sliced. Consequently, the output of this noncompliant code example is the implementation-defined value returned from calling
   <code>
    std::exception::what()
   </code>
   instead of
   <code>
    "My custom exception"
   </code>
   .
  </p>
  <sample language="cpp">
   #include &lt;exception&gt;
#include &lt;iostream&gt;
 
struct S : std::exception {
  const char *what() const noexcept override {
    return "My custom exception";
  }
};
 
void f() {
  try {
    throw S();
  } catch (std::exception e) {
    std::cout &lt;&lt; e.what() &lt;&lt; std::endl;
  }
}
  </sample>
 </section>
 <section title="Compliant Solution">
  <p>
   In this compliant solution, the variable declared by the
   <em>
    exception-declaration
   </em>
   is an lvalue reference. The call to
   <code>
    what()
   </code>
   results in executing
   <code>
    S::what()
   </code>
   instead of
   <code>
    std::exception::what()
   </code>
   .
  </p>
  <sample language="cpp">
   #include &lt;exception&gt;
#include &lt;iostream&gt;
 
struct S : std::exception {
  const char *what() const noexcept override {
    return "My custom exception";
  }
};
 
void f() {
  try {
    throw S();
  } catch (std::exception &amp;e) {
    std::cout &lt;&lt; e.what() &lt;&lt; std::endl;
  }
}
  </sample>
 </section>
 <section title="Risk Assessment">
  <p>
   Object slicing can result in abnormal program execution. This generally is not a problem for exceptions, but it can lead to unexpected behavior depending on the assumptions made by the exception handler.
  </p>
  <table>
   <tbody>
    <tr>
     <th>
      Rule
     </th>
     <th>
      Severity
     </th>
     <th>
      Likelihood
     </th>
     <th>
      Remediation Cost
     </th>
     <th>
      Priority
     </th>
     <th>
      Level
     </th>
    </tr>
    <tr>
     <td>
      ERR61-CPP
     </td>
     <td>
      Low
     </td>
     <td>
      Unlikely
     </td>
     <td>
      Low
     </td>
     <td>
      <strong>
       P3
      </strong>
     </td>
     <td>
      <strong>
       L3
      </strong>
     </td>
    </tr>
   </tbody>
  </table>
 </section>
 <section title="Automated Detection">
  <table>
   <tbody>
    <tr>
     <th>
      Tool
     </th>
     <th>
      Version
     </th>
     <th>
      Checker
     </th>
     <th>
      Description
     </th>
    </tr>
    <tr>
     <td>
      <a href="https://wiki.sei.cmu.edu/confluence/pages/viewpage.action?pageId=222953724">
       Astrée
      </a>
     </td>
     <td>
      20.10
     </td>
     <td>
      <strong>
       catch-class-by-value
      </strong>
     </td>
     <td>
      Fully checked
     </td>
    </tr>
    <tr>
     <td>
      <a href="https://wiki.sei.cmu.edu/confluence/display/cplusplus/Axivion+Bauhaus+Suite">
       Axivion Bauhaus Suite
      </a>
     </td>
     <td>
      7.2.0
     </td>
     <td>
      <strong>
       CertC++-ERR61
      </strong>
     </td>
     <td>
     </td>
    </tr>
    <tr>
     <td>
      <a href="https://wiki.sei.cmu.edu/confluence/display/cplusplus/Clang">
       Clang
      </a>
     </td>
     <td>
      3.9
     </td>
     <td>
      <code>
       cert-err61-cpp
      </code>
     </td>
     <td>
      Checked by
      <code>
       clang-tidy
      </code>
      ; also checks for
      <a href="https://wiki.sei.cmu.edu/confluence/pages/viewpage.action?pageId=88046576">
       VOID ERR09-CPP. Throw anonymous temporaries
      </a>
      by default
     </td>
    </tr>
    <tr>
     <td>
      <a href="https://wiki.sei.cmu.edu/confluence/display/cplusplus/Helix+QAC">
       Helix QAC
      </a>
     </td>
     <td>
      2021.2
     </td>
     <td>
      <strong>
       C++4031
      </strong>
     </td>
     <td>
     </td>
    </tr>
    <tr>
     <td>
      <a href="https://www.securecoding.cert.org/confluence/display/cplusplus/Klocwork">
       Klocwork
      </a>
     </td>
     <td>
      2021.4
     </td>
     <td>
      <strong>
       MISRA.CATCH.BY_VALUE
      </strong>
     </td>
     <td>
     </td>
    </tr>
    <tr>
     <td>
      <a href="https://wiki.sei.cmu.edu/confluence/display/cplusplus/LDRA">
       LDRA tool suite
      </a>
     </td>
     <td>
     </td>
     <td>
      <strong>
       455 S
      </strong>
     </td>
     <td>
      Fully implemented
     </td>
    </tr>
    <tr>
     <td>
      <a href="https://wiki.sei.cmu.edu/confluence/display/cplusplus/Parasoft">
       Parasoft C/C++test
      </a>
     </td>
     <td>
      2021.2
     </td>
     <td>
      <strong>
       CERT_CPP-ERR61-a
      </strong>
      <strong>
       CERT_CPP-ERR61-b
      </strong>
     </td>
     <td>
      A class type exception shall always be caught by reference
      Throw by value, catch by reference
     </td>
    </tr>
    <tr>
     <td>
      <a href="https://wiki.sei.cmu.edu/confluence/display/cplusplus/Polyspace+Bug+Finder">
       Polyspace Bug Finder
      </a>
     </td>
     <td>
      R2021b
     </td>
     <td>
      <a href="https://www.mathworks.com/help/bugfinder/ref/certcerr61cpp.html">
       CERT C++: ERR61-CPP
      </a>
     </td>
     <td>
      Checks for exception object initialized by copy in catch statement (rule fully covered)
     </td>
    </tr>
    <tr>
     <td>
      <a href="https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=142409849">
       PRQA QA-C++
      </a>
     </td>
     <td>
      4.4
     </td>
     <td>
      <strong>
       4031
      </strong>
     </td>
     <td>
     </td>
    </tr>
    <tr>
     <td>
      <a href="https://wiki.sei.cmu.edu/confluence/display/cplusplus/PVS-Studio">
       PVS-Studio
      </a>
     </td>
     <td>
      7.16
     </td>
     <td>
      <strong>
       <a href="https://pvs-studio.com/en/docs/warnings/v746/">
        V746
       </a>
       ,
       <a href="https://pvs-studio.com/en/docs/warnings/v816/">
        V816
       </a>
      </strong>
     </td>
     <td>
     </td>
    </tr>
    <tr>
     <td>
      <a href="https://wiki.sei.cmu.edu/confluence/display/cplusplus/RuleChecker">
       RuleChecker
      </a>
     </td>
     <td>
      20.10
     </td>
     <td>
      <strong>
       catch-class-by-value
      </strong>
     </td>
     <td>
      Fully checked
     </td>
    </tr>
    <tr>
     <td>
      <a href="https://wiki.sei.cmu.edu/confluence/pages/viewpage.action?pageId=88046388">
       SonarQube C/C++ Plugin
      </a>
     </td>
     <td>
      4.10
     </td>
     <td>
      <strong>
       <a href="https://www.sonarsource.com/products/codeanalyzers/sonarcfamilyforcpp/rules-cpp.html#RSPEC-1044">
        S1044
       </a>
      </strong>
     </td>
     <td>
     </td>
    </tr>
   </tbody>
  </table>
 </section>
 <section title="Related Vulnerabilities">
  <p>
   Search for other
   <a href="https://wiki.sei.cmu.edu/confluence/display/cplusplus/BB.+Definitions#BB.Definitions-vulnerability">
    vulnerabilities
   </a>
   resulting from the violation of this rule on the
   <a href="https://www.kb.cert.org/vulnotes/bymetric?searchview&amp;query=FIELD+KEYWORDS+contains+ERR61-CPP">
    CERT website
   </a>
   .
  </p>
 </section>
 <section title="Related Guidelines">
  <p>
   <em>
    This rule is a subset of
    <a href="https://wiki.sei.cmu.edu/confluence/display/cplusplus/OOP51-CPP.+Do+not+slice+derived+objects">
     OOP51-CPP. Do not slice derived objects.
    </a>
   </em>
  </p>
  <table>
   <tbody>
    <tr>
     <td>
      <a href="https://wiki.sei.cmu.edu/confluence/pages/viewpage.action?pageId=88046682">
       SEI CERT C++ Coding Standard
      </a>
     </td>
     <td>
      <a href="https://wiki.sei.cmu.edu/confluence/display/cplusplus/ERR60-CPP.+Exception+objects+must+be+nothrow+copy+constructible">
       ERR60-CPP. Exception objects must be nothrow copy constructible
      </a>
      <a href="https://wiki.sei.cmu.edu/confluence/display/cplusplus/OOP51-CPP.+Do+not+slice+derived+objects">
      </a>
     </td>
    </tr>
   </tbody>
  </table>
 </section>
 <section title="Bibliography">
  <table>
   <tbody>
    <tr>
     <td>
      [
      <a href="https://wiki.sei.cmu.edu/confluence/display/cplusplus/AA.+Bibliography#AA.Bibliography-ISO%2FIEC14882-2014">
       ISO/IEC 14882-2014
      </a>
      ]
     </td>
     <td>
      Subclause 3.9, "Types"
      Clause 9, "Classes"
      Subclause 15.1, "Throwing an Exception"
      Subclause 15.3, "Handling an Exception"
     </td>
    </tr>
    <tr>
     <td>
      [
      <a href="https://wiki.sei.cmu.edu/confluence/display/cplusplus/AA.+Bibliography#AA.Bibliography-MISRA08">
       MISRA 2008
      </a>
      ]
     </td>
     <td>
      Rule 15-3-5
     </td>
    </tr>
   </tbody>
  </table>
 </section>
</qhelp>