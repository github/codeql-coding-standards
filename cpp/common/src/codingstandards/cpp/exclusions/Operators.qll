//** THIS FILE IS AUTOGENERATED, DO NOT MODIFY DIRECTLY.  */
import cpp
import RuleMetadata

newtype OperatorsQuery =
  TUserDefinedAssignmentOperatorVirtualQuery() or
  TCopyAndMoveNotDeclaredProtectedQuery() or
  TOperatorsShouldBeDeclaredWithTheRefQualifierQuery() or
  TRelationalOperatorShallReturnABooleanValueQuery() or
  TFunctionThatContainsForwardingReferenceAsItsArgumentOverloadedQuery() or
  TMissingConstOperatorSubscriptQuery() or
  TUserDefinedConversionOperatorsNotDefinedExplicitQuery() or
  TUserDefinedConversionOperatorsShouldNotBeUsedQuery() or
  TComparisonOperatorsNotNonMemberFunctionsWithIdenticalParameterTypesAndNoexceptQuery() or
  TNonMemberGenericOperatorConditionQuery() or
  TUnsignedBitwiseOperatorWithoutCastQuery() or
  TCommaOperatorAndOperatorAndTheOperatorOverloadedQuery() or
  TEachOperandOfTheOperatorTheLogicalAndOrTheLogicalOperatorsShallHaveTypeBoolQuery() or
  TUnaryMinusOperatorAppliedToAnExpressionWhoseUnderlyingTypeIsUnsignedQuery() or
  TUnaryOperatorOverloadedQuery()

predicate isOperatorsQueryMetadata(Query query, string queryId, string ruleId) {
  query =
    // `Query` instance for the `userDefinedAssignmentOperatorVirtual` query
    OperatorsPackage::userDefinedAssignmentOperatorVirtualQuery() and
  queryId =
    // `@id` for the `userDefinedAssignmentOperatorVirtual` query
    "cpp/autosar/user-defined-assignment-operator-virtual" and
  ruleId = "A10-3-5"
  or
  query =
    // `Query` instance for the `copyAndMoveNotDeclaredProtected` query
    OperatorsPackage::copyAndMoveNotDeclaredProtectedQuery() and
  queryId =
    // `@id` for the `copyAndMoveNotDeclaredProtected` query
    "cpp/autosar/copy-and-move-not-declared-protected" and
  ruleId = "A12-8-6"
  or
  query =
    // `Query` instance for the `operatorsShouldBeDeclaredWithTheRefQualifier` query
    OperatorsPackage::operatorsShouldBeDeclaredWithTheRefQualifierQuery() and
  queryId =
    // `@id` for the `operatorsShouldBeDeclaredWithTheRefQualifier` query
    "cpp/autosar/operators-should-be-declared-with-the-ref-qualifier" and
  ruleId = "A12-8-7"
  or
  query =
    // `Query` instance for the `relationalOperatorShallReturnABooleanValue` query
    OperatorsPackage::relationalOperatorShallReturnABooleanValueQuery() and
  queryId =
    // `@id` for the `relationalOperatorShallReturnABooleanValue` query
    "cpp/autosar/relational-operator-shall-return-a-boolean-value" and
  ruleId = "A13-2-3"
  or
  query =
    // `Query` instance for the `functionThatContainsForwardingReferenceAsItsArgumentOverloaded` query
    OperatorsPackage::functionThatContainsForwardingReferenceAsItsArgumentOverloadedQuery() and
  queryId =
    // `@id` for the `functionThatContainsForwardingReferenceAsItsArgumentOverloaded` query
    "cpp/autosar/function-that-contains-forwarding-reference-as-its-argument-overloaded" and
  ruleId = "A13-3-1"
  or
  query =
    // `Query` instance for the `missingConstOperatorSubscript` query
    OperatorsPackage::missingConstOperatorSubscriptQuery() and
  queryId =
    // `@id` for the `missingConstOperatorSubscript` query
    "cpp/autosar/missing-const-operator-subscript" and
  ruleId = "A13-5-1"
  or
  query =
    // `Query` instance for the `userDefinedConversionOperatorsNotDefinedExplicit` query
    OperatorsPackage::userDefinedConversionOperatorsNotDefinedExplicitQuery() and
  queryId =
    // `@id` for the `userDefinedConversionOperatorsNotDefinedExplicit` query
    "cpp/autosar/user-defined-conversion-operators-not-defined-explicit" and
  ruleId = "A13-5-2"
  or
  query =
    // `Query` instance for the `userDefinedConversionOperatorsShouldNotBeUsed` query
    OperatorsPackage::userDefinedConversionOperatorsShouldNotBeUsedQuery() and
  queryId =
    // `@id` for the `userDefinedConversionOperatorsShouldNotBeUsed` query
    "cpp/autosar/user-defined-conversion-operators-should-not-be-used" and
  ruleId = "A13-5-3"
  or
  query =
    // `Query` instance for the `comparisonOperatorsNotNonMemberFunctionsWithIdenticalParameterTypesAndNoexcept` query
    OperatorsPackage::comparisonOperatorsNotNonMemberFunctionsWithIdenticalParameterTypesAndNoexceptQuery() and
  queryId =
    // `@id` for the `comparisonOperatorsNotNonMemberFunctionsWithIdenticalParameterTypesAndNoexcept` query
    "cpp/autosar/comparison-operators-not-non-member-functions-with-identical-parameter-types-and-noexcept" and
  ruleId = "A13-5-5"
  or
  query =
    // `Query` instance for the `nonMemberGenericOperatorCondition` query
    OperatorsPackage::nonMemberGenericOperatorConditionQuery() and
  queryId =
    // `@id` for the `nonMemberGenericOperatorCondition` query
    "cpp/autosar/non-member-generic-operator-condition" and
  ruleId = "A14-5-3"
  or
  query =
    // `Query` instance for the `unsignedBitwiseOperatorWithoutCast` query
    OperatorsPackage::unsignedBitwiseOperatorWithoutCastQuery() and
  queryId =
    // `@id` for the `unsignedBitwiseOperatorWithoutCast` query
    "cpp/autosar/unsigned-bitwise-operator-without-cast" and
  ruleId = "M5-0-10"
  or
  query =
    // `Query` instance for the `commaOperatorAndOperatorAndTheOperatorOverloaded` query
    OperatorsPackage::commaOperatorAndOperatorAndTheOperatorOverloadedQuery() and
  queryId =
    // `@id` for the `commaOperatorAndOperatorAndTheOperatorOverloaded` query
    "cpp/autosar/comma-operator-and-operator-and-the-operator-overloaded" and
  ruleId = "M5-2-11"
  or
  query =
    // `Query` instance for the `eachOperandOfTheOperatorTheLogicalAndOrTheLogicalOperatorsShallHaveTypeBool` query
    OperatorsPackage::eachOperandOfTheOperatorTheLogicalAndOrTheLogicalOperatorsShallHaveTypeBoolQuery() and
  queryId =
    // `@id` for the `eachOperandOfTheOperatorTheLogicalAndOrTheLogicalOperatorsShallHaveTypeBool` query
    "cpp/autosar/each-operand-of-the-operator-the-logical-and-or-the-logical-operators-shall-have-type-bool" and
  ruleId = "M5-3-1"
  or
  query =
    // `Query` instance for the `unaryMinusOperatorAppliedToAnExpressionWhoseUnderlyingTypeIsUnsigned` query
    OperatorsPackage::unaryMinusOperatorAppliedToAnExpressionWhoseUnderlyingTypeIsUnsignedQuery() and
  queryId =
    // `@id` for the `unaryMinusOperatorAppliedToAnExpressionWhoseUnderlyingTypeIsUnsigned` query
    "cpp/autosar/unary-minus-operator-applied-to-an-expression-whose-underlying-type-is-unsigned" and
  ruleId = "M5-3-2"
  or
  query =
    // `Query` instance for the `unaryOperatorOverloaded` query
    OperatorsPackage::unaryOperatorOverloadedQuery() and
  queryId =
    // `@id` for the `unaryOperatorOverloaded` query
    "cpp/autosar/unary-operator-overloaded" and
  ruleId = "M5-3-3"
}

module OperatorsPackage {
  Query userDefinedAssignmentOperatorVirtualQuery() {
    //autogenerate `Query` type
    result =
      // `Query` type for `userDefinedAssignmentOperatorVirtual` query
      TOperatorsPackageQuery(TUserDefinedAssignmentOperatorVirtualQuery())
  }

  Query copyAndMoveNotDeclaredProtectedQuery() {
    //autogenerate `Query` type
    result =
      // `Query` type for `copyAndMoveNotDeclaredProtected` query
      TOperatorsPackageQuery(TCopyAndMoveNotDeclaredProtectedQuery())
  }

  Query operatorsShouldBeDeclaredWithTheRefQualifierQuery() {
    //autogenerate `Query` type
    result =
      // `Query` type for `operatorsShouldBeDeclaredWithTheRefQualifier` query
      TOperatorsPackageQuery(TOperatorsShouldBeDeclaredWithTheRefQualifierQuery())
  }

  Query relationalOperatorShallReturnABooleanValueQuery() {
    //autogenerate `Query` type
    result =
      // `Query` type for `relationalOperatorShallReturnABooleanValue` query
      TOperatorsPackageQuery(TRelationalOperatorShallReturnABooleanValueQuery())
  }

  Query functionThatContainsForwardingReferenceAsItsArgumentOverloadedQuery() {
    //autogenerate `Query` type
    result =
      // `Query` type for `functionThatContainsForwardingReferenceAsItsArgumentOverloaded` query
      TOperatorsPackageQuery(TFunctionThatContainsForwardingReferenceAsItsArgumentOverloadedQuery())
  }

  Query missingConstOperatorSubscriptQuery() {
    //autogenerate `Query` type
    result =
      // `Query` type for `missingConstOperatorSubscript` query
      TOperatorsPackageQuery(TMissingConstOperatorSubscriptQuery())
  }

  Query userDefinedConversionOperatorsNotDefinedExplicitQuery() {
    //autogenerate `Query` type
    result =
      // `Query` type for `userDefinedConversionOperatorsNotDefinedExplicit` query
      TOperatorsPackageQuery(TUserDefinedConversionOperatorsNotDefinedExplicitQuery())
  }

  Query userDefinedConversionOperatorsShouldNotBeUsedQuery() {
    //autogenerate `Query` type
    result =
      // `Query` type for `userDefinedConversionOperatorsShouldNotBeUsed` query
      TOperatorsPackageQuery(TUserDefinedConversionOperatorsShouldNotBeUsedQuery())
  }

  Query comparisonOperatorsNotNonMemberFunctionsWithIdenticalParameterTypesAndNoexceptQuery() {
    //autogenerate `Query` type
    result =
      // `Query` type for `comparisonOperatorsNotNonMemberFunctionsWithIdenticalParameterTypesAndNoexcept` query
      TOperatorsPackageQuery(TComparisonOperatorsNotNonMemberFunctionsWithIdenticalParameterTypesAndNoexceptQuery())
  }

  Query nonMemberGenericOperatorConditionQuery() {
    //autogenerate `Query` type
    result =
      // `Query` type for `nonMemberGenericOperatorCondition` query
      TOperatorsPackageQuery(TNonMemberGenericOperatorConditionQuery())
  }

  Query unsignedBitwiseOperatorWithoutCastQuery() {
    //autogenerate `Query` type
    result =
      // `Query` type for `unsignedBitwiseOperatorWithoutCast` query
      TOperatorsPackageQuery(TUnsignedBitwiseOperatorWithoutCastQuery())
  }

  Query commaOperatorAndOperatorAndTheOperatorOverloadedQuery() {
    //autogenerate `Query` type
    result =
      // `Query` type for `commaOperatorAndOperatorAndTheOperatorOverloaded` query
      TOperatorsPackageQuery(TCommaOperatorAndOperatorAndTheOperatorOverloadedQuery())
  }

  Query eachOperandOfTheOperatorTheLogicalAndOrTheLogicalOperatorsShallHaveTypeBoolQuery() {
    //autogenerate `Query` type
    result =
      // `Query` type for `eachOperandOfTheOperatorTheLogicalAndOrTheLogicalOperatorsShallHaveTypeBool` query
      TOperatorsPackageQuery(TEachOperandOfTheOperatorTheLogicalAndOrTheLogicalOperatorsShallHaveTypeBoolQuery())
  }

  Query unaryMinusOperatorAppliedToAnExpressionWhoseUnderlyingTypeIsUnsignedQuery() {
    //autogenerate `Query` type
    result =
      // `Query` type for `unaryMinusOperatorAppliedToAnExpressionWhoseUnderlyingTypeIsUnsigned` query
      TOperatorsPackageQuery(TUnaryMinusOperatorAppliedToAnExpressionWhoseUnderlyingTypeIsUnsignedQuery())
  }

  Query unaryOperatorOverloadedQuery() {
    //autogenerate `Query` type
    result =
      // `Query` type for `unaryOperatorOverloaded` query
      TOperatorsPackageQuery(TUnaryOperatorOverloadedQuery())
  }
}
