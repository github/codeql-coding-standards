//** THIS FILE IS AUTOGENERATED, DO NOT MODIFY DIRECTLY.  **/
import cpp
import RuleMetadata
import codingstandards.cpp.exclusions.RuleMetadata

newtype ConversionsQuery =
  TNoConversionFromBoolQuery() or
  TNoImplicitBoolConversionQuery() or
  TNoCharacterNumericalValueQuery() or
  TInappropriateBitwiseOrShiftOperandsQuery() or
  TNoSignednessChangeFromPromotionQuery() or
  TNumericAssignmentTypeMismatchQuery() or
  TFunctionPointerConversionContextQuery()

predicate isConversionsQueryMetadata(Query query, string queryId, string ruleId, string category) {
  query =
    // `Query` instance for the `noConversionFromBool` query
    ConversionsPackage::noConversionFromBoolQuery() and
  queryId =
    // `@id` for the `noConversionFromBool` query
    "cpp/misra/no-conversion-from-bool" and
  ruleId = "RULE-7-0-1" and
  category = "required"
  or
  query =
    // `Query` instance for the `noImplicitBoolConversion` query
    ConversionsPackage::noImplicitBoolConversionQuery() and
  queryId =
    // `@id` for the `noImplicitBoolConversion` query
    "cpp/misra/no-implicit-bool-conversion" and
  ruleId = "RULE-7-0-2" and
  category = "required"
  or
  query =
    // `Query` instance for the `noCharacterNumericalValue` query
    ConversionsPackage::noCharacterNumericalValueQuery() and
  queryId =
    // `@id` for the `noCharacterNumericalValue` query
    "cpp/misra/no-character-numerical-value" and
  ruleId = "RULE-7-0-3" and
  category = "required"
  or
  query =
    // `Query` instance for the `inappropriateBitwiseOrShiftOperands` query
    ConversionsPackage::inappropriateBitwiseOrShiftOperandsQuery() and
  queryId =
    // `@id` for the `inappropriateBitwiseOrShiftOperands` query
    "cpp/misra/inappropriate-bitwise-or-shift-operands" and
  ruleId = "RULE-7-0-4" and
  category = "required"
  or
  query =
    // `Query` instance for the `noSignednessChangeFromPromotion` query
    ConversionsPackage::noSignednessChangeFromPromotionQuery() and
  queryId =
    // `@id` for the `noSignednessChangeFromPromotion` query
    "cpp/misra/no-signedness-change-from-promotion" and
  ruleId = "RULE-7-0-5" and
  category = "required"
  or
  query =
    // `Query` instance for the `numericAssignmentTypeMismatch` query
    ConversionsPackage::numericAssignmentTypeMismatchQuery() and
  queryId =
    // `@id` for the `numericAssignmentTypeMismatch` query
    "cpp/misra/numeric-assignment-type-mismatch" and
  ruleId = "RULE-7-0-6" and
  category = "required"
  or
  query =
    // `Query` instance for the `functionPointerConversionContext` query
    ConversionsPackage::functionPointerConversionContextQuery() and
  queryId =
    // `@id` for the `functionPointerConversionContext` query
    "cpp/misra/function-pointer-conversion-context" and
  ruleId = "RULE-7-11-3" and
  category = "required"
}

module ConversionsPackage {
  Query noConversionFromBoolQuery() {
    //autogenerate `Query` type
    result =
      // `Query` type for `noConversionFromBool` query
      TQueryCPP(TConversionsPackageQuery(TNoConversionFromBoolQuery()))
  }

  Query noImplicitBoolConversionQuery() {
    //autogenerate `Query` type
    result =
      // `Query` type for `noImplicitBoolConversion` query
      TQueryCPP(TConversionsPackageQuery(TNoImplicitBoolConversionQuery()))
  }

  Query noCharacterNumericalValueQuery() {
    //autogenerate `Query` type
    result =
      // `Query` type for `noCharacterNumericalValue` query
      TQueryCPP(TConversionsPackageQuery(TNoCharacterNumericalValueQuery()))
  }

  Query inappropriateBitwiseOrShiftOperandsQuery() {
    //autogenerate `Query` type
    result =
      // `Query` type for `inappropriateBitwiseOrShiftOperands` query
      TQueryCPP(TConversionsPackageQuery(TInappropriateBitwiseOrShiftOperandsQuery()))
  }

  Query noSignednessChangeFromPromotionQuery() {
    //autogenerate `Query` type
    result =
      // `Query` type for `noSignednessChangeFromPromotion` query
      TQueryCPP(TConversionsPackageQuery(TNoSignednessChangeFromPromotionQuery()))
  }

  Query numericAssignmentTypeMismatchQuery() {
    //autogenerate `Query` type
    result =
      // `Query` type for `numericAssignmentTypeMismatch` query
      TQueryCPP(TConversionsPackageQuery(TNumericAssignmentTypeMismatchQuery()))
  }

  Query functionPointerConversionContextQuery() {
    //autogenerate `Query` type
    result =
      // `Query` type for `functionPointerConversionContext` query
      TQueryCPP(TConversionsPackageQuery(TFunctionPointerConversionContextQuery()))
  }
}
