//** THIS FILE IS AUTOGENERATED, DO NOT MODIFY DIRECTLY.  **/
import cpp
import RuleMetadata
import codingstandards.cpp.exclusions.RuleMetadata

newtype Preprocessor2Query =
  TInvalidIncludeDirectiveQuery() or
  TUnparenthesizedMacroArgumentQuery() or
  TDisallowedUseOfPragmaQuery()

predicate isPreprocessor2QueryMetadata(Query query, string queryId, string ruleId, string category) {
  query =
    // `Query` instance for the `invalidIncludeDirective` query
    Preprocessor2Package::invalidIncludeDirectiveQuery() and
  queryId =
    // `@id` for the `invalidIncludeDirective` query
    "cpp/misra/invalid-include-directive" and
  ruleId = "RULE-19-2-2" and
  category = "required"
  or
  query =
    // `Query` instance for the `unparenthesizedMacroArgument` query
    Preprocessor2Package::unparenthesizedMacroArgumentQuery() and
  queryId =
    // `@id` for the `unparenthesizedMacroArgument` query
    "cpp/misra/unparenthesized-macro-argument" and
  ruleId = "RULE-19-3-4" and
  category = "required"
  or
  query =
    // `Query` instance for the `disallowedUseOfPragma` query
    Preprocessor2Package::disallowedUseOfPragmaQuery() and
  queryId =
    // `@id` for the `disallowedUseOfPragma` query
    "cpp/misra/disallowed-use-of-pragma" and
  ruleId = "RULE-19-6-1" and
  category = "advisory"
}

module Preprocessor2Package {
  Query invalidIncludeDirectiveQuery() {
    //autogenerate `Query` type
    result =
      // `Query` type for `invalidIncludeDirective` query
      TQueryCPP(TPreprocessor2PackageQuery(TInvalidIncludeDirectiveQuery()))
  }

  Query unparenthesizedMacroArgumentQuery() {
    //autogenerate `Query` type
    result =
      // `Query` type for `unparenthesizedMacroArgument` query
      TQueryCPP(TPreprocessor2PackageQuery(TUnparenthesizedMacroArgumentQuery()))
  }

  Query disallowedUseOfPragmaQuery() {
    //autogenerate `Query` type
    result =
      // `Query` type for `disallowedUseOfPragma` query
      TQueryCPP(TPreprocessor2PackageQuery(TDisallowedUseOfPragmaQuery()))
  }
}
