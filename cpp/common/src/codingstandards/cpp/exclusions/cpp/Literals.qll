//** THIS FILE IS AUTOGENERATED, DO NOT MODIFY DIRECTLY.  **/
import cpp
import RuleMetadata
import codingstandards.cpp.exclusions.RuleMetadata

newtype LiteralsQuery =
  TUseCorrectIntervalForDigitSequencesSeparatorsQuery() or
  TEscapeSequenceOutsideISOQuery() or
  THexadecimalConstantsShouldBeUpperCaseQuery() or
  TNullPointerConstantNotNullptrQuery() or
  TLiteralValueUsedOutsideTypeInitQuery() or
  TUseOfNonZeroOctalLiteralQuery() or
  TUseOfNonZeroOctalEscapeQuery() or
  TMissingUSuffixQuery() or
  TLiteralSuffixNotUpperCaseQuery() or
  TNullUsedAsIntegerValueQuery() or
  TLiteralZeroUsedAsNullPointerConstantQuery()

predicate isLiteralsQueryMetadata(Query query, string queryId, string ruleId) {
  query =
    // `Query` instance for the `useCorrectIntervalForDigitSequencesSeparators` query
    LiteralsPackage::useCorrectIntervalForDigitSequencesSeparatorsQuery() and
  queryId =
    // `@id` for the `useCorrectIntervalForDigitSequencesSeparators` query
    "cpp/autosar/use-correct-interval-for-digit-sequences-separators" and
  ruleId = "A13-6-1"
  or
  query =
    // `Query` instance for the `escapeSequenceOutsideISO` query
    LiteralsPackage::escapeSequenceOutsideISOQuery() and
  queryId =
    // `@id` for the `escapeSequenceOutsideISO` query
    "cpp/autosar/escape-sequence-outside-iso" and
  ruleId = "A2-13-1"
  or
  query =
    // `Query` instance for the `hexadecimalConstantsShouldBeUpperCase` query
    LiteralsPackage::hexadecimalConstantsShouldBeUpperCaseQuery() and
  queryId =
    // `@id` for the `hexadecimalConstantsShouldBeUpperCase` query
    "cpp/autosar/hexadecimal-constants-should-be-upper-case" and
  ruleId = "A2-13-5"
  or
  query =
    // `Query` instance for the `nullPointerConstantNotNullptr` query
    LiteralsPackage::nullPointerConstantNotNullptrQuery() and
  queryId =
    // `@id` for the `nullPointerConstantNotNullptr` query
    "cpp/autosar/null-pointer-constant-not-nullptr" and
  ruleId = "A4-10-1"
  or
  query =
    // `Query` instance for the `literalValueUsedOutsideTypeInit` query
    LiteralsPackage::literalValueUsedOutsideTypeInitQuery() and
  queryId =
    // `@id` for the `literalValueUsedOutsideTypeInit` query
    "cpp/autosar/literal-value-used-outside-type-init" and
  ruleId = "A5-1-1"
  or
  query =
    // `Query` instance for the `useOfNonZeroOctalLiteral` query
    LiteralsPackage::useOfNonZeroOctalLiteralQuery() and
  queryId =
    // `@id` for the `useOfNonZeroOctalLiteral` query
    "cpp/autosar/use-of-non-zero-octal-literal" and
  ruleId = "M2-13-2"
  or
  query =
    // `Query` instance for the `useOfNonZeroOctalEscape` query
    LiteralsPackage::useOfNonZeroOctalEscapeQuery() and
  queryId =
    // `@id` for the `useOfNonZeroOctalEscape` query
    "cpp/autosar/use-of-non-zero-octal-escape" and
  ruleId = "M2-13-2"
  or
  query =
    // `Query` instance for the `missingUSuffix` query
    LiteralsPackage::missingUSuffixQuery() and
  queryId =
    // `@id` for the `missingUSuffix` query
    "cpp/autosar/missing-u-suffix" and
  ruleId = "M2-13-3"
  or
  query =
    // `Query` instance for the `literalSuffixNotUpperCase` query
    LiteralsPackage::literalSuffixNotUpperCaseQuery() and
  queryId =
    // `@id` for the `literalSuffixNotUpperCase` query
    "cpp/autosar/literal-suffix-not-upper-case" and
  ruleId = "M2-13-4"
  or
  query =
    // `Query` instance for the `nullUsedAsIntegerValue` query
    LiteralsPackage::nullUsedAsIntegerValueQuery() and
  queryId =
    // `@id` for the `nullUsedAsIntegerValue` query
    "cpp/autosar/null-used-as-integer-value" and
  ruleId = "M4-10-1"
  or
  query =
    // `Query` instance for the `literalZeroUsedAsNullPointerConstant` query
    LiteralsPackage::literalZeroUsedAsNullPointerConstantQuery() and
  queryId =
    // `@id` for the `literalZeroUsedAsNullPointerConstant` query
    "cpp/autosar/literal-zero-used-as-null-pointer-constant" and
  ruleId = "M4-10-2"
}

module LiteralsPackage {
  Query useCorrectIntervalForDigitSequencesSeparatorsQuery() {
    //autogenerate `Query` type
    result =
      // `Query` type for `useCorrectIntervalForDigitSequencesSeparators` query
      TQueryCPP(TLiteralsPackageQuery(TUseCorrectIntervalForDigitSequencesSeparatorsQuery()))
  }

  Query escapeSequenceOutsideISOQuery() {
    //autogenerate `Query` type
    result =
      // `Query` type for `escapeSequenceOutsideISO` query
      TQueryCPP(TLiteralsPackageQuery(TEscapeSequenceOutsideISOQuery()))
  }

  Query hexadecimalConstantsShouldBeUpperCaseQuery() {
    //autogenerate `Query` type
    result =
      // `Query` type for `hexadecimalConstantsShouldBeUpperCase` query
      TQueryCPP(TLiteralsPackageQuery(THexadecimalConstantsShouldBeUpperCaseQuery()))
  }

  Query nullPointerConstantNotNullptrQuery() {
    //autogenerate `Query` type
    result =
      // `Query` type for `nullPointerConstantNotNullptr` query
      TQueryCPP(TLiteralsPackageQuery(TNullPointerConstantNotNullptrQuery()))
  }

  Query literalValueUsedOutsideTypeInitQuery() {
    //autogenerate `Query` type
    result =
      // `Query` type for `literalValueUsedOutsideTypeInit` query
      TQueryCPP(TLiteralsPackageQuery(TLiteralValueUsedOutsideTypeInitQuery()))
  }

  Query useOfNonZeroOctalLiteralQuery() {
    //autogenerate `Query` type
    result =
      // `Query` type for `useOfNonZeroOctalLiteral` query
      TQueryCPP(TLiteralsPackageQuery(TUseOfNonZeroOctalLiteralQuery()))
  }

  Query useOfNonZeroOctalEscapeQuery() {
    //autogenerate `Query` type
    result =
      // `Query` type for `useOfNonZeroOctalEscape` query
      TQueryCPP(TLiteralsPackageQuery(TUseOfNonZeroOctalEscapeQuery()))
  }

  Query missingUSuffixQuery() {
    //autogenerate `Query` type
    result =
      // `Query` type for `missingUSuffix` query
      TQueryCPP(TLiteralsPackageQuery(TMissingUSuffixQuery()))
  }

  Query literalSuffixNotUpperCaseQuery() {
    //autogenerate `Query` type
    result =
      // `Query` type for `literalSuffixNotUpperCase` query
      TQueryCPP(TLiteralsPackageQuery(TLiteralSuffixNotUpperCaseQuery()))
  }

  Query nullUsedAsIntegerValueQuery() {
    //autogenerate `Query` type
    result =
      // `Query` type for `nullUsedAsIntegerValue` query
      TQueryCPP(TLiteralsPackageQuery(TNullUsedAsIntegerValueQuery()))
  }

  Query literalZeroUsedAsNullPointerConstantQuery() {
    //autogenerate `Query` type
    result =
      // `Query` type for `literalZeroUsedAsNullPointerConstant` query
      TQueryCPP(TLiteralsPackageQuery(TLiteralZeroUsedAsNullPointerConstantQuery()))
  }
}
