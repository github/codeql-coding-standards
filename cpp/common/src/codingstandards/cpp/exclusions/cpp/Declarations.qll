//** THIS FILE IS AUTOGENERATED, DO NOT MODIFY DIRECTLY.  **/
import cpp
import RuleMetadata
import codingstandards.cpp.exclusions.RuleMetadata

newtype DeclarationsQuery =
  TOperatorNewAndOperatorDeleteNotDefinedLocallyQuery() or
  TOperatorNewAndOperatorDeleteNotDefinedGloballyQuery() or
  TGlobalSizedOperatorDeleteNotDefinedQuery() or
  TGlobalUnsizedOperatorDeleteNotDefinedQuery() or
  TVariableWidthIntegerTypesUsedQuery() or
  TVariableWidthPlainCharTypeUsedQuery() or
  TAutoSpecifierNotUsedAppropriatelyInFunctionDefinitionQuery() or
  TAutoSpecifierNotUsedAppropriatelyInVariableDefinitionQuery() or
  TIdentifierDeclarationAndInitializationNotOnSeparateLinesQuery() or
  TClassStructEnumDeclaredInDefinitionQuery() or
  TEnumerationUnderlyingBaseTypeNotExplicitlyDefinedQuery() or
  TEnumerationsNotDeclaredAsScopedEnumClassesQuery() or
  TNoneFirstOrAllEnumeratorsNotInitializedQuery() or
  TFunctionsDeclaredAtBlockScopeQuery() or
  TDeclarationsOfAnObjectShallHaveCompatibleTypesQuery() or
  TDeclarationsOfAFunctionShallHaveCompatibleTypesQuery() or
  TTypesNotIdenticalInObjectDeclarationsQuery() or
  TTypesNotIdenticalInReturnDeclarationsQuery()

predicate isDeclarationsQueryMetadata(Query query, string queryId, string ruleId, string category) {
  query =
    // `Query` instance for the `operatorNewAndOperatorDeleteNotDefinedLocally` query
    DeclarationsPackage::operatorNewAndOperatorDeleteNotDefinedLocallyQuery() and
  queryId =
    // `@id` for the `operatorNewAndOperatorDeleteNotDefinedLocally` query
    "cpp/autosar/operator-new-and-operator-delete-not-defined-locally" and
  ruleId = "A18-5-11" and
  category = "required"
  or
  query =
    // `Query` instance for the `operatorNewAndOperatorDeleteNotDefinedGlobally` query
    DeclarationsPackage::operatorNewAndOperatorDeleteNotDefinedGloballyQuery() and
  queryId =
    // `@id` for the `operatorNewAndOperatorDeleteNotDefinedGlobally` query
    "cpp/autosar/operator-new-and-operator-delete-not-defined-globally" and
  ruleId = "A18-5-11" and
  category = "required"
  or
  query =
    // `Query` instance for the `globalSizedOperatorDeleteNotDefined` query
    DeclarationsPackage::globalSizedOperatorDeleteNotDefinedQuery() and
  queryId =
    // `@id` for the `globalSizedOperatorDeleteNotDefined` query
    "cpp/autosar/global-sized-operator-delete-not-defined" and
  ruleId = "A18-5-4" and
  category = "required"
  or
  query =
    // `Query` instance for the `globalUnsizedOperatorDeleteNotDefined` query
    DeclarationsPackage::globalUnsizedOperatorDeleteNotDefinedQuery() and
  queryId =
    // `@id` for the `globalUnsizedOperatorDeleteNotDefined` query
    "cpp/autosar/global-unsized-operator-delete-not-defined" and
  ruleId = "A18-5-4" and
  category = "required"
  or
  query =
    // `Query` instance for the `variableWidthIntegerTypesUsed` query
    DeclarationsPackage::variableWidthIntegerTypesUsedQuery() and
  queryId =
    // `@id` for the `variableWidthIntegerTypesUsed` query
    "cpp/autosar/variable-width-integer-types-used" and
  ruleId = "A3-9-1" and
  category = "required"
  or
  query =
    // `Query` instance for the `variableWidthPlainCharTypeUsed` query
    DeclarationsPackage::variableWidthPlainCharTypeUsedQuery() and
  queryId =
    // `@id` for the `variableWidthPlainCharTypeUsed` query
    "cpp/autosar/variable-width-plain-char-type-used" and
  ruleId = "A3-9-1" and
  category = "required"
  or
  query =
    // `Query` instance for the `autoSpecifierNotUsedAppropriatelyInFunctionDefinition` query
    DeclarationsPackage::autoSpecifierNotUsedAppropriatelyInFunctionDefinitionQuery() and
  queryId =
    // `@id` for the `autoSpecifierNotUsedAppropriatelyInFunctionDefinition` query
    "cpp/autosar/auto-specifier-not-used-appropriately-in-function-definition" and
  ruleId = "A7-1-5" and
  category = "required"
  or
  query =
    // `Query` instance for the `autoSpecifierNotUsedAppropriatelyInVariableDefinition` query
    DeclarationsPackage::autoSpecifierNotUsedAppropriatelyInVariableDefinitionQuery() and
  queryId =
    // `@id` for the `autoSpecifierNotUsedAppropriatelyInVariableDefinition` query
    "cpp/autosar/auto-specifier-not-used-appropriately-in-variable-definition" and
  ruleId = "A7-1-5" and
  category = "required"
  or
  query =
    // `Query` instance for the `identifierDeclarationAndInitializationNotOnSeparateLines` query
    DeclarationsPackage::identifierDeclarationAndInitializationNotOnSeparateLinesQuery() and
  queryId =
    // `@id` for the `identifierDeclarationAndInitializationNotOnSeparateLines` query
    "cpp/autosar/identifier-declaration-and-initialization-not-on-separate-lines" and
  ruleId = "A7-1-7" and
  category = "required"
  or
  query =
    // `Query` instance for the `classStructEnumDeclaredInDefinition` query
    DeclarationsPackage::classStructEnumDeclaredInDefinitionQuery() and
  queryId =
    // `@id` for the `classStructEnumDeclaredInDefinition` query
    "cpp/autosar/class-struct-enum-declared-in-definition" and
  ruleId = "A7-1-9" and
  category = "required"
  or
  query =
    // `Query` instance for the `enumerationUnderlyingBaseTypeNotExplicitlyDefined` query
    DeclarationsPackage::enumerationUnderlyingBaseTypeNotExplicitlyDefinedQuery() and
  queryId =
    // `@id` for the `enumerationUnderlyingBaseTypeNotExplicitlyDefined` query
    "cpp/autosar/enumeration-underlying-base-type-not-explicitly-defined" and
  ruleId = "A7-2-2" and
  category = "required"
  or
  query =
    // `Query` instance for the `enumerationsNotDeclaredAsScopedEnumClasses` query
    DeclarationsPackage::enumerationsNotDeclaredAsScopedEnumClassesQuery() and
  queryId =
    // `@id` for the `enumerationsNotDeclaredAsScopedEnumClasses` query
    "cpp/autosar/enumerations-not-declared-as-scoped-enum-classes" and
  ruleId = "A7-2-3" and
  category = "required"
  or
  query =
    // `Query` instance for the `noneFirstOrAllEnumeratorsNotInitialized` query
    DeclarationsPackage::noneFirstOrAllEnumeratorsNotInitializedQuery() and
  queryId =
    // `@id` for the `noneFirstOrAllEnumeratorsNotInitialized` query
    "cpp/autosar/none-first-or-all-enumerators-not-initialized" and
  ruleId = "A7-2-4" and
  category = "required"
  or
  query =
    // `Query` instance for the `functionsDeclaredAtBlockScope` query
    DeclarationsPackage::functionsDeclaredAtBlockScopeQuery() and
  queryId =
    // `@id` for the `functionsDeclaredAtBlockScope` query
    "cpp/autosar/functions-declared-at-block-scope" and
  ruleId = "M3-1-2" and
  category = "required"
  or
  query =
    // `Query` instance for the `declarationsOfAnObjectShallHaveCompatibleTypes` query
    DeclarationsPackage::declarationsOfAnObjectShallHaveCompatibleTypesQuery() and
  queryId =
    // `@id` for the `declarationsOfAnObjectShallHaveCompatibleTypes` query
    "cpp/autosar/declarations-of-an-object-shall-have-compatible-types" and
  ruleId = "M3-2-1" and
  category = "required"
  or
  query =
    // `Query` instance for the `declarationsOfAFunctionShallHaveCompatibleTypes` query
    DeclarationsPackage::declarationsOfAFunctionShallHaveCompatibleTypesQuery() and
  queryId =
    // `@id` for the `declarationsOfAFunctionShallHaveCompatibleTypes` query
    "cpp/autosar/declarations-of-a-function-shall-have-compatible-types" and
  ruleId = "M3-2-1" and
  category = "required"
  or
  query =
    // `Query` instance for the `typesNotIdenticalInObjectDeclarations` query
    DeclarationsPackage::typesNotIdenticalInObjectDeclarationsQuery() and
  queryId =
    // `@id` for the `typesNotIdenticalInObjectDeclarations` query
    "cpp/autosar/types-not-identical-in-object-declarations" and
  ruleId = "M3-9-1" and
  category = "required"
  or
  query =
    // `Query` instance for the `typesNotIdenticalInReturnDeclarations` query
    DeclarationsPackage::typesNotIdenticalInReturnDeclarationsQuery() and
  queryId =
    // `@id` for the `typesNotIdenticalInReturnDeclarations` query
    "cpp/autosar/types-not-identical-in-return-declarations" and
  ruleId = "M3-9-1" and
  category = "required"
}

module DeclarationsPackage {
  Query operatorNewAndOperatorDeleteNotDefinedLocallyQuery() {
    //autogenerate `Query` type
    result =
      // `Query` type for `operatorNewAndOperatorDeleteNotDefinedLocally` query
      TQueryCPP(TDeclarationsPackageQuery(TOperatorNewAndOperatorDeleteNotDefinedLocallyQuery()))
  }

  Query operatorNewAndOperatorDeleteNotDefinedGloballyQuery() {
    //autogenerate `Query` type
    result =
      // `Query` type for `operatorNewAndOperatorDeleteNotDefinedGlobally` query
      TQueryCPP(TDeclarationsPackageQuery(TOperatorNewAndOperatorDeleteNotDefinedGloballyQuery()))
  }

  Query globalSizedOperatorDeleteNotDefinedQuery() {
    //autogenerate `Query` type
    result =
      // `Query` type for `globalSizedOperatorDeleteNotDefined` query
      TQueryCPP(TDeclarationsPackageQuery(TGlobalSizedOperatorDeleteNotDefinedQuery()))
  }

  Query globalUnsizedOperatorDeleteNotDefinedQuery() {
    //autogenerate `Query` type
    result =
      // `Query` type for `globalUnsizedOperatorDeleteNotDefined` query
      TQueryCPP(TDeclarationsPackageQuery(TGlobalUnsizedOperatorDeleteNotDefinedQuery()))
  }

  Query variableWidthIntegerTypesUsedQuery() {
    //autogenerate `Query` type
    result =
      // `Query` type for `variableWidthIntegerTypesUsed` query
      TQueryCPP(TDeclarationsPackageQuery(TVariableWidthIntegerTypesUsedQuery()))
  }

  Query variableWidthPlainCharTypeUsedQuery() {
    //autogenerate `Query` type
    result =
      // `Query` type for `variableWidthPlainCharTypeUsed` query
      TQueryCPP(TDeclarationsPackageQuery(TVariableWidthPlainCharTypeUsedQuery()))
  }

  Query autoSpecifierNotUsedAppropriatelyInFunctionDefinitionQuery() {
    //autogenerate `Query` type
    result =
      // `Query` type for `autoSpecifierNotUsedAppropriatelyInFunctionDefinition` query
      TQueryCPP(TDeclarationsPackageQuery(TAutoSpecifierNotUsedAppropriatelyInFunctionDefinitionQuery()))
  }

  Query autoSpecifierNotUsedAppropriatelyInVariableDefinitionQuery() {
    //autogenerate `Query` type
    result =
      // `Query` type for `autoSpecifierNotUsedAppropriatelyInVariableDefinition` query
      TQueryCPP(TDeclarationsPackageQuery(TAutoSpecifierNotUsedAppropriatelyInVariableDefinitionQuery()))
  }

  Query identifierDeclarationAndInitializationNotOnSeparateLinesQuery() {
    //autogenerate `Query` type
    result =
      // `Query` type for `identifierDeclarationAndInitializationNotOnSeparateLines` query
      TQueryCPP(TDeclarationsPackageQuery(TIdentifierDeclarationAndInitializationNotOnSeparateLinesQuery()))
  }

  Query classStructEnumDeclaredInDefinitionQuery() {
    //autogenerate `Query` type
    result =
      // `Query` type for `classStructEnumDeclaredInDefinition` query
      TQueryCPP(TDeclarationsPackageQuery(TClassStructEnumDeclaredInDefinitionQuery()))
  }

  Query enumerationUnderlyingBaseTypeNotExplicitlyDefinedQuery() {
    //autogenerate `Query` type
    result =
      // `Query` type for `enumerationUnderlyingBaseTypeNotExplicitlyDefined` query
      TQueryCPP(TDeclarationsPackageQuery(TEnumerationUnderlyingBaseTypeNotExplicitlyDefinedQuery()))
  }

  Query enumerationsNotDeclaredAsScopedEnumClassesQuery() {
    //autogenerate `Query` type
    result =
      // `Query` type for `enumerationsNotDeclaredAsScopedEnumClasses` query
      TQueryCPP(TDeclarationsPackageQuery(TEnumerationsNotDeclaredAsScopedEnumClassesQuery()))
  }

  Query noneFirstOrAllEnumeratorsNotInitializedQuery() {
    //autogenerate `Query` type
    result =
      // `Query` type for `noneFirstOrAllEnumeratorsNotInitialized` query
      TQueryCPP(TDeclarationsPackageQuery(TNoneFirstOrAllEnumeratorsNotInitializedQuery()))
  }

  Query functionsDeclaredAtBlockScopeQuery() {
    //autogenerate `Query` type
    result =
      // `Query` type for `functionsDeclaredAtBlockScope` query
      TQueryCPP(TDeclarationsPackageQuery(TFunctionsDeclaredAtBlockScopeQuery()))
  }

  Query declarationsOfAnObjectShallHaveCompatibleTypesQuery() {
    //autogenerate `Query` type
    result =
      // `Query` type for `declarationsOfAnObjectShallHaveCompatibleTypes` query
      TQueryCPP(TDeclarationsPackageQuery(TDeclarationsOfAnObjectShallHaveCompatibleTypesQuery()))
  }

  Query declarationsOfAFunctionShallHaveCompatibleTypesQuery() {
    //autogenerate `Query` type
    result =
      // `Query` type for `declarationsOfAFunctionShallHaveCompatibleTypes` query
      TQueryCPP(TDeclarationsPackageQuery(TDeclarationsOfAFunctionShallHaveCompatibleTypesQuery()))
  }

  Query typesNotIdenticalInObjectDeclarationsQuery() {
    //autogenerate `Query` type
    result =
      // `Query` type for `typesNotIdenticalInObjectDeclarations` query
      TQueryCPP(TDeclarationsPackageQuery(TTypesNotIdenticalInObjectDeclarationsQuery()))
  }

  Query typesNotIdenticalInReturnDeclarationsQuery() {
    //autogenerate `Query` type
    result =
      // `Query` type for `typesNotIdenticalInReturnDeclarations` query
      TQueryCPP(TDeclarationsPackageQuery(TTypesNotIdenticalInReturnDeclarationsQuery()))
  }
}
