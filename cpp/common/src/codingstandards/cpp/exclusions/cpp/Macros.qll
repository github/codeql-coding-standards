//** THIS FILE IS AUTOGENERATED, DO NOT MODIFY DIRECTLY.  **/
import cpp
import RuleMetadata
import codingstandards.cpp.exclusions.RuleMetadata

newtype MacrosQuery =
  TPreProcessorShallOnlyBeUsedForCertainDirectivesPatternsQuery() or
  TCharactersOccurInHeaderFileNameOrInIncludeDirectiveQuery() or
  TErrorDirectiveUsedQuery() or
  TPragmaDirectiveUsedQuery() or
  TIncludeDirectivesNotPrecededByDirectivesOrCommentsQuery() or
  TMacrosShallOnlyBeDefinedOrUndefdInTheGlobalNamespaceQuery() or
  TFunctionLikeMacroArgsContainHashTokenQuery() or
  TFunctionLikeMacroParameterNotEnclosedInParenthesesQuery() or
  TUndefinedMacroIdentifiersUsedInQuery() or
  TDefinedPreProcessorOperatorInOneOfTheTwoStandardFormsQuery() or
  TMoreThanOneOccurrenceHashOperatorInMacroDefinitionQuery() or
  THashOperatorsShouldNotBeUsedQuery()

predicate isMacrosQueryMetadata(Query query, string queryId, string ruleId) {
  query =
    // `Query` instance for the `preProcessorShallOnlyBeUsedForCertainDirectivesPatterns` query
    MacrosPackage::preProcessorShallOnlyBeUsedForCertainDirectivesPatternsQuery() and
  queryId =
    // `@id` for the `preProcessorShallOnlyBeUsedForCertainDirectivesPatterns` query
    "cpp/autosar/pre-processor-shall-only-be-used-for-certain-directives-patterns" and
  ruleId = "A16-0-1"
  or
  query =
    // `Query` instance for the `charactersOccurInHeaderFileNameOrInIncludeDirective` query
    MacrosPackage::charactersOccurInHeaderFileNameOrInIncludeDirectiveQuery() and
  queryId =
    // `@id` for the `charactersOccurInHeaderFileNameOrInIncludeDirective` query
    "cpp/autosar/characters-occur-in-header-file-name-or-in-include-directive" and
  ruleId = "A16-2-1"
  or
  query =
    // `Query` instance for the `errorDirectiveUsed` query
    MacrosPackage::errorDirectiveUsedQuery() and
  queryId =
    // `@id` for the `errorDirectiveUsed` query
    "cpp/autosar/error-directive-used" and
  ruleId = "A16-6-1"
  or
  query =
    // `Query` instance for the `pragmaDirectiveUsed` query
    MacrosPackage::pragmaDirectiveUsedQuery() and
  queryId =
    // `@id` for the `pragmaDirectiveUsed` query
    "cpp/autosar/pragma-directive-used" and
  ruleId = "A16-7-1"
  or
  query =
    // `Query` instance for the `includeDirectivesNotPrecededByDirectivesOrComments` query
    MacrosPackage::includeDirectivesNotPrecededByDirectivesOrCommentsQuery() and
  queryId =
    // `@id` for the `includeDirectivesNotPrecededByDirectivesOrComments` query
    "cpp/autosar/include-directives-not-preceded-by-directives-or-comments" and
  ruleId = "M16-0-1"
  or
  query =
    // `Query` instance for the `macrosShallOnlyBeDefinedOrUndefdInTheGlobalNamespace` query
    MacrosPackage::macrosShallOnlyBeDefinedOrUndefdInTheGlobalNamespaceQuery() and
  queryId =
    // `@id` for the `macrosShallOnlyBeDefinedOrUndefdInTheGlobalNamespace` query
    "cpp/autosar/macros-shall-only-be-defined-or-undefd-in-the-global-namespace" and
  ruleId = "M16-0-2"
  or
  query =
    // `Query` instance for the `functionLikeMacroArgsContainHashToken` query
    MacrosPackage::functionLikeMacroArgsContainHashTokenQuery() and
  queryId =
    // `@id` for the `functionLikeMacroArgsContainHashToken` query
    "cpp/autosar/function-like-macro-args-contain-hash-token" and
  ruleId = "M16-0-5"
  or
  query =
    // `Query` instance for the `functionLikeMacroParameterNotEnclosedInParentheses` query
    MacrosPackage::functionLikeMacroParameterNotEnclosedInParenthesesQuery() and
  queryId =
    // `@id` for the `functionLikeMacroParameterNotEnclosedInParentheses` query
    "cpp/autosar/function-like-macro-parameter-not-enclosed-in-parentheses" and
  ruleId = "M16-0-6"
  or
  query =
    // `Query` instance for the `undefinedMacroIdentifiersUsedIn` query
    MacrosPackage::undefinedMacroIdentifiersUsedInQuery() and
  queryId =
    // `@id` for the `undefinedMacroIdentifiersUsedIn` query
    "cpp/autosar/undefined-macro-identifiers-used-in" and
  ruleId = "M16-0-7"
  or
  query =
    // `Query` instance for the `definedPreProcessorOperatorInOneOfTheTwoStandardForms` query
    MacrosPackage::definedPreProcessorOperatorInOneOfTheTwoStandardFormsQuery() and
  queryId =
    // `@id` for the `definedPreProcessorOperatorInOneOfTheTwoStandardForms` query
    "cpp/autosar/defined-pre-processor-operator-in-one-of-the-two-standard-forms" and
  ruleId = "M16-1-1"
  or
  query =
    // `Query` instance for the `moreThanOneOccurrenceHashOperatorInMacroDefinition` query
    MacrosPackage::moreThanOneOccurrenceHashOperatorInMacroDefinitionQuery() and
  queryId =
    // `@id` for the `moreThanOneOccurrenceHashOperatorInMacroDefinition` query
    "cpp/autosar/more-than-one-occurrence-hash-operator-in-macro-definition" and
  ruleId = "M16-3-1"
  or
  query =
    // `Query` instance for the `hashOperatorsShouldNotBeUsed` query
    MacrosPackage::hashOperatorsShouldNotBeUsedQuery() and
  queryId =
    // `@id` for the `hashOperatorsShouldNotBeUsed` query
    "cpp/autosar/hash-operators-should-not-be-used" and
  ruleId = "M16-3-2"
}

module MacrosPackage {
  Query preProcessorShallOnlyBeUsedForCertainDirectivesPatternsQuery() {
    //autogenerate `Query` type
    result =
      // `Query` type for `preProcessorShallOnlyBeUsedForCertainDirectivesPatterns` query
      TQueryCPP(TMacrosPackageQuery(TPreProcessorShallOnlyBeUsedForCertainDirectivesPatternsQuery()))
  }

  Query charactersOccurInHeaderFileNameOrInIncludeDirectiveQuery() {
    //autogenerate `Query` type
    result =
      // `Query` type for `charactersOccurInHeaderFileNameOrInIncludeDirective` query
      TQueryCPP(TMacrosPackageQuery(TCharactersOccurInHeaderFileNameOrInIncludeDirectiveQuery()))
  }

  Query errorDirectiveUsedQuery() {
    //autogenerate `Query` type
    result =
      // `Query` type for `errorDirectiveUsed` query
      TQueryCPP(TMacrosPackageQuery(TErrorDirectiveUsedQuery()))
  }

  Query pragmaDirectiveUsedQuery() {
    //autogenerate `Query` type
    result =
      // `Query` type for `pragmaDirectiveUsed` query
      TQueryCPP(TMacrosPackageQuery(TPragmaDirectiveUsedQuery()))
  }

  Query includeDirectivesNotPrecededByDirectivesOrCommentsQuery() {
    //autogenerate `Query` type
    result =
      // `Query` type for `includeDirectivesNotPrecededByDirectivesOrComments` query
      TQueryCPP(TMacrosPackageQuery(TIncludeDirectivesNotPrecededByDirectivesOrCommentsQuery()))
  }

  Query macrosShallOnlyBeDefinedOrUndefdInTheGlobalNamespaceQuery() {
    //autogenerate `Query` type
    result =
      // `Query` type for `macrosShallOnlyBeDefinedOrUndefdInTheGlobalNamespace` query
      TQueryCPP(TMacrosPackageQuery(TMacrosShallOnlyBeDefinedOrUndefdInTheGlobalNamespaceQuery()))
  }

  Query functionLikeMacroArgsContainHashTokenQuery() {
    //autogenerate `Query` type
    result =
      // `Query` type for `functionLikeMacroArgsContainHashToken` query
      TQueryCPP(TMacrosPackageQuery(TFunctionLikeMacroArgsContainHashTokenQuery()))
  }

  Query functionLikeMacroParameterNotEnclosedInParenthesesQuery() {
    //autogenerate `Query` type
    result =
      // `Query` type for `functionLikeMacroParameterNotEnclosedInParentheses` query
      TQueryCPP(TMacrosPackageQuery(TFunctionLikeMacroParameterNotEnclosedInParenthesesQuery()))
  }

  Query undefinedMacroIdentifiersUsedInQuery() {
    //autogenerate `Query` type
    result =
      // `Query` type for `undefinedMacroIdentifiersUsedIn` query
      TQueryCPP(TMacrosPackageQuery(TUndefinedMacroIdentifiersUsedInQuery()))
  }

  Query definedPreProcessorOperatorInOneOfTheTwoStandardFormsQuery() {
    //autogenerate `Query` type
    result =
      // `Query` type for `definedPreProcessorOperatorInOneOfTheTwoStandardForms` query
      TQueryCPP(TMacrosPackageQuery(TDefinedPreProcessorOperatorInOneOfTheTwoStandardFormsQuery()))
  }

  Query moreThanOneOccurrenceHashOperatorInMacroDefinitionQuery() {
    //autogenerate `Query` type
    result =
      // `Query` type for `moreThanOneOccurrenceHashOperatorInMacroDefinition` query
      TQueryCPP(TMacrosPackageQuery(TMoreThanOneOccurrenceHashOperatorInMacroDefinitionQuery()))
  }

  Query hashOperatorsShouldNotBeUsedQuery() {
    //autogenerate `Query` type
    result =
      // `Query` type for `hashOperatorsShouldNotBeUsed` query
      TQueryCPP(TMacrosPackageQuery(THashOperatorsShouldNotBeUsedQuery()))
  }
}
