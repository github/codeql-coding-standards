//** THIS FILE IS AUTOGENERATED, DO NOT MODIFY DIRECTLY.  **/
import cpp
import RuleMetadata
import codingstandards.cpp.exclusions.RuleMetadata

newtype ExpressionsQuery =
  TOperationsAssumingMemoryLayoutPerformedOnObjectsQuery() or
  TEnumUsedInArithmeticContextsQuery() or
  TDivisorEqualToZeroQuery() or
  TFunctionErroneousReturnValueNotTestedQuery() or
  TBoolOperandsToDisallowedBuiltInOperatorsQuery() or
  TCharUsedAsOperandsToDisallowedBuiltInOperatorsQuery() or
  TTernaryOperatorConditionNotTypeBoolQuery() or
  TBitwiseOperatorOperandsHaveDifferentUnderlyingTypeQuery() or
  TBitwiseOperatorAppliedToSignedTypesQuery() or
  TCvalueExpressionConvertedToDifferentUnderlyingTypeQuery() or
  TConstantUnsignedIntegerExpressionsWrapAroundQuery() or
  TRightBitShiftOperandIsNegativeOrTooWideQuery() or
  TFloatsTestedForEqualityQuery() or
  TPassPromotablePrimitiveTypeToVaStartQuery() or
  TPassReferenceTypeToVaStartQuery() or
  TPassNonTrivialObjectToVaStartQuery()

predicate isExpressionsQueryMetadata(Query query, string queryId, string ruleId) {
  query =
    // `Query` instance for the `operationsAssumingMemoryLayoutPerformedOnObjects` query
    ExpressionsPackage::operationsAssumingMemoryLayoutPerformedOnObjectsQuery() and
  queryId =
    // `@id` for the `operationsAssumingMemoryLayoutPerformedOnObjects` query
    "cpp/autosar/operations-assuming-memory-layout-performed-on-objects" and
  ruleId = "A12-0-2"
  or
  query =
    // `Query` instance for the `enumUsedInArithmeticContexts` query
    ExpressionsPackage::enumUsedInArithmeticContextsQuery() and
  queryId =
    // `@id` for the `enumUsedInArithmeticContexts` query
    "cpp/autosar/enum-used-in-arithmetic-contexts" and
  ruleId = "A4-5-1"
  or
  query =
    // `Query` instance for the `divisorEqualToZero` query
    ExpressionsPackage::divisorEqualToZeroQuery() and
  queryId =
    // `@id` for the `divisorEqualToZero` query
    "cpp/autosar/divisor-equal-to-zero" and
  ruleId = "A5-6-1"
  or
  query =
    // `Query` instance for the `functionErroneousReturnValueNotTested` query
    ExpressionsPackage::functionErroneousReturnValueNotTestedQuery() and
  queryId =
    // `@id` for the `functionErroneousReturnValueNotTested` query
    "cpp/autosar/function-erroneous-return-value-not-tested" and
  ruleId = "M0-3-2"
  or
  query =
    // `Query` instance for the `boolOperandsToDisallowedBuiltInOperators` query
    ExpressionsPackage::boolOperandsToDisallowedBuiltInOperatorsQuery() and
  queryId =
    // `@id` for the `boolOperandsToDisallowedBuiltInOperators` query
    "cpp/autosar/bool-operands-to-disallowed-built-in-operators" and
  ruleId = "M4-5-1"
  or
  query =
    // `Query` instance for the `charUsedAsOperandsToDisallowedBuiltInOperators` query
    ExpressionsPackage::charUsedAsOperandsToDisallowedBuiltInOperatorsQuery() and
  queryId =
    // `@id` for the `charUsedAsOperandsToDisallowedBuiltInOperators` query
    "cpp/autosar/char-used-as-operands-to-disallowed-built-in-operators" and
  ruleId = "M4-5-3"
  or
  query =
    // `Query` instance for the `ternaryOperatorConditionNotTypeBool` query
    ExpressionsPackage::ternaryOperatorConditionNotTypeBoolQuery() and
  queryId =
    // `@id` for the `ternaryOperatorConditionNotTypeBool` query
    "cpp/autosar/ternary-operator-condition-not-type-bool" and
  ruleId = "M5-0-14"
  or
  query =
    // `Query` instance for the `bitwiseOperatorOperandsHaveDifferentUnderlyingType` query
    ExpressionsPackage::bitwiseOperatorOperandsHaveDifferentUnderlyingTypeQuery() and
  queryId =
    // `@id` for the `bitwiseOperatorOperandsHaveDifferentUnderlyingType` query
    "cpp/autosar/bitwise-operator-operands-have-different-underlying-type" and
  ruleId = "M5-0-20"
  or
  query =
    // `Query` instance for the `bitwiseOperatorAppliedToSignedTypes` query
    ExpressionsPackage::bitwiseOperatorAppliedToSignedTypesQuery() and
  queryId =
    // `@id` for the `bitwiseOperatorAppliedToSignedTypes` query
    "cpp/autosar/bitwise-operator-applied-to-signed-types" and
  ruleId = "M5-0-21"
  or
  query =
    // `Query` instance for the `cvalueExpressionConvertedToDifferentUnderlyingType` query
    ExpressionsPackage::cvalueExpressionConvertedToDifferentUnderlyingTypeQuery() and
  queryId =
    // `@id` for the `cvalueExpressionConvertedToDifferentUnderlyingType` query
    "cpp/autosar/cvalue-expression-converted-to-different-underlying-type" and
  ruleId = "M5-0-3"
  or
  query =
    // `Query` instance for the `constantUnsignedIntegerExpressionsWrapAround` query
    ExpressionsPackage::constantUnsignedIntegerExpressionsWrapAroundQuery() and
  queryId =
    // `@id` for the `constantUnsignedIntegerExpressionsWrapAround` query
    "cpp/autosar/constant-unsigned-integer-expressions-wrap-around" and
  ruleId = "M5-19-1"
  or
  query =
    // `Query` instance for the `rightBitShiftOperandIsNegativeOrTooWide` query
    ExpressionsPackage::rightBitShiftOperandIsNegativeOrTooWideQuery() and
  queryId =
    // `@id` for the `rightBitShiftOperandIsNegativeOrTooWide` query
    "cpp/autosar/right-bit-shift-operand-is-negative-or-too-wide" and
  ruleId = "M5-8-1"
  or
  query =
    // `Query` instance for the `floatsTestedForEquality` query
    ExpressionsPackage::floatsTestedForEqualityQuery() and
  queryId =
    // `@id` for the `floatsTestedForEquality` query
    "cpp/autosar/floats-tested-for-equality" and
  ruleId = "M6-2-2"
  or
  query =
    // `Query` instance for the `passPromotablePrimitiveTypeToVaStart` query
    ExpressionsPackage::passPromotablePrimitiveTypeToVaStartQuery() and
  queryId =
    // `@id` for the `passPromotablePrimitiveTypeToVaStart` query
    "cpp/cert/pass-promotable-primitive-type-to-va-start" and
  ruleId = "EXP58-CPP"
  or
  query =
    // `Query` instance for the `passReferenceTypeToVaStart` query
    ExpressionsPackage::passReferenceTypeToVaStartQuery() and
  queryId =
    // `@id` for the `passReferenceTypeToVaStart` query
    "cpp/cert/pass-reference-type-to-va-start" and
  ruleId = "EXP58-CPP"
  or
  query =
    // `Query` instance for the `passNonTrivialObjectToVaStart` query
    ExpressionsPackage::passNonTrivialObjectToVaStartQuery() and
  queryId =
    // `@id` for the `passNonTrivialObjectToVaStart` query
    "cpp/cert/pass-non-trivial-object-to-va-start" and
  ruleId = "EXP58-CPP"
}

module ExpressionsPackage {
  Query operationsAssumingMemoryLayoutPerformedOnObjectsQuery() {
    //autogenerate `Query` type
    result =
      // `Query` type for `operationsAssumingMemoryLayoutPerformedOnObjects` query
      TQueryCPP(TExpressionsPackageQuery(TOperationsAssumingMemoryLayoutPerformedOnObjectsQuery()))
  }

  Query enumUsedInArithmeticContextsQuery() {
    //autogenerate `Query` type
    result =
      // `Query` type for `enumUsedInArithmeticContexts` query
      TQueryCPP(TExpressionsPackageQuery(TEnumUsedInArithmeticContextsQuery()))
  }

  Query divisorEqualToZeroQuery() {
    //autogenerate `Query` type
    result =
      // `Query` type for `divisorEqualToZero` query
      TQueryCPP(TExpressionsPackageQuery(TDivisorEqualToZeroQuery()))
  }

  Query functionErroneousReturnValueNotTestedQuery() {
    //autogenerate `Query` type
    result =
      // `Query` type for `functionErroneousReturnValueNotTested` query
      TQueryCPP(TExpressionsPackageQuery(TFunctionErroneousReturnValueNotTestedQuery()))
  }

  Query boolOperandsToDisallowedBuiltInOperatorsQuery() {
    //autogenerate `Query` type
    result =
      // `Query` type for `boolOperandsToDisallowedBuiltInOperators` query
      TQueryCPP(TExpressionsPackageQuery(TBoolOperandsToDisallowedBuiltInOperatorsQuery()))
  }

  Query charUsedAsOperandsToDisallowedBuiltInOperatorsQuery() {
    //autogenerate `Query` type
    result =
      // `Query` type for `charUsedAsOperandsToDisallowedBuiltInOperators` query
      TQueryCPP(TExpressionsPackageQuery(TCharUsedAsOperandsToDisallowedBuiltInOperatorsQuery()))
  }

  Query ternaryOperatorConditionNotTypeBoolQuery() {
    //autogenerate `Query` type
    result =
      // `Query` type for `ternaryOperatorConditionNotTypeBool` query
      TQueryCPP(TExpressionsPackageQuery(TTernaryOperatorConditionNotTypeBoolQuery()))
  }

  Query bitwiseOperatorOperandsHaveDifferentUnderlyingTypeQuery() {
    //autogenerate `Query` type
    result =
      // `Query` type for `bitwiseOperatorOperandsHaveDifferentUnderlyingType` query
      TQueryCPP(TExpressionsPackageQuery(TBitwiseOperatorOperandsHaveDifferentUnderlyingTypeQuery()))
  }

  Query bitwiseOperatorAppliedToSignedTypesQuery() {
    //autogenerate `Query` type
    result =
      // `Query` type for `bitwiseOperatorAppliedToSignedTypes` query
      TQueryCPP(TExpressionsPackageQuery(TBitwiseOperatorAppliedToSignedTypesQuery()))
  }

  Query cvalueExpressionConvertedToDifferentUnderlyingTypeQuery() {
    //autogenerate `Query` type
    result =
      // `Query` type for `cvalueExpressionConvertedToDifferentUnderlyingType` query
      TQueryCPP(TExpressionsPackageQuery(TCvalueExpressionConvertedToDifferentUnderlyingTypeQuery()))
  }

  Query constantUnsignedIntegerExpressionsWrapAroundQuery() {
    //autogenerate `Query` type
    result =
      // `Query` type for `constantUnsignedIntegerExpressionsWrapAround` query
      TQueryCPP(TExpressionsPackageQuery(TConstantUnsignedIntegerExpressionsWrapAroundQuery()))
  }

  Query rightBitShiftOperandIsNegativeOrTooWideQuery() {
    //autogenerate `Query` type
    result =
      // `Query` type for `rightBitShiftOperandIsNegativeOrTooWide` query
      TQueryCPP(TExpressionsPackageQuery(TRightBitShiftOperandIsNegativeOrTooWideQuery()))
  }

  Query floatsTestedForEqualityQuery() {
    //autogenerate `Query` type
    result =
      // `Query` type for `floatsTestedForEquality` query
      TQueryCPP(TExpressionsPackageQuery(TFloatsTestedForEqualityQuery()))
  }

  Query passPromotablePrimitiveTypeToVaStartQuery() {
    //autogenerate `Query` type
    result =
      // `Query` type for `passPromotablePrimitiveTypeToVaStart` query
      TQueryCPP(TExpressionsPackageQuery(TPassPromotablePrimitiveTypeToVaStartQuery()))
  }

  Query passReferenceTypeToVaStartQuery() {
    //autogenerate `Query` type
    result =
      // `Query` type for `passReferenceTypeToVaStart` query
      TQueryCPP(TExpressionsPackageQuery(TPassReferenceTypeToVaStartQuery()))
  }

  Query passNonTrivialObjectToVaStartQuery() {
    //autogenerate `Query` type
    result =
      // `Query` type for `passNonTrivialObjectToVaStart` query
      TQueryCPP(TExpressionsPackageQuery(TPassNonTrivialObjectToVaStartQuery()))
  }
}
