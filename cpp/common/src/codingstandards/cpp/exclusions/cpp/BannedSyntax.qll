//** THIS FILE IS AUTOGENERATED, DO NOT MODIFY DIRECTLY.  **/
import cpp
import RuleMetadata
import codingstandards.cpp.exclusions.RuleMetadata

newtype BannedSyntaxQuery =
  TFriendDeclarationsUsedQuery() or
  TCStyleArraysUsedQuery() or
  TVolatileKeywordUsedQuery() or
  TTernaryConditionalOperatorUsedAsSubExpressionQuery() or
  TDynamicCastShouldNotBeUsedQuery() or
  TTraditionalCStyleCastsUsedQuery() or
  TReinterpretCastUsedQuery() or
  TGotoStatementUsedQuery() or
  TRegisterKeywordUsedQuery() or
  TTypedefSpecifierUsedQuery() or
  TAsmDeclarationUsedQuery() or
  TFunctionsDefinedUsingTheEllipsisNotationQuery() or
  TUnionsUsedQuery() or
  TCommaOperatorUsedQuery() or
  TUsingDirectivesUsedQuery() or
  TUsingDeclarationsUsedInHeaderFilesQuery() or
  TDoNotDefineACStyleVariadicFunctionQuery()

predicate isBannedSyntaxQueryMetadata(Query query, string queryId, string ruleId) {
  query =
    // `Query` instance for the `friendDeclarationsUsed` query
    BannedSyntaxPackage::friendDeclarationsUsedQuery() and
  queryId =
    // `@id` for the `friendDeclarationsUsed` query
    "cpp/autosar/friend-declarations-used" and
  ruleId = "A11-3-1"
  or
  query =
    // `Query` instance for the `cStyleArraysUsed` query
    BannedSyntaxPackage::cStyleArraysUsedQuery() and
  queryId =
    // `@id` for the `cStyleArraysUsed` query
    "cpp/autosar/c-style-arrays-used" and
  ruleId = "A18-1-1"
  or
  query =
    // `Query` instance for the `volatileKeywordUsed` query
    BannedSyntaxPackage::volatileKeywordUsedQuery() and
  queryId =
    // `@id` for the `volatileKeywordUsed` query
    "cpp/autosar/volatile-keyword-used" and
  ruleId = "A2-11-1"
  or
  query =
    // `Query` instance for the `ternaryConditionalOperatorUsedAsSubExpression` query
    BannedSyntaxPackage::ternaryConditionalOperatorUsedAsSubExpressionQuery() and
  queryId =
    // `@id` for the `ternaryConditionalOperatorUsedAsSubExpression` query
    "cpp/autosar/ternary-conditional-operator-used-as-sub-expression" and
  ruleId = "A5-16-1"
  or
  query =
    // `Query` instance for the `dynamicCastShouldNotBeUsed` query
    BannedSyntaxPackage::dynamicCastShouldNotBeUsedQuery() and
  queryId =
    // `@id` for the `dynamicCastShouldNotBeUsed` query
    "cpp/autosar/dynamic-cast-should-not-be-used" and
  ruleId = "A5-2-1"
  or
  query =
    // `Query` instance for the `traditionalCStyleCastsUsed` query
    BannedSyntaxPackage::traditionalCStyleCastsUsedQuery() and
  queryId =
    // `@id` for the `traditionalCStyleCastsUsed` query
    "cpp/autosar/traditional-c-style-casts-used" and
  ruleId = "A5-2-2"
  or
  query =
    // `Query` instance for the `reinterpretCastUsed` query
    BannedSyntaxPackage::reinterpretCastUsedQuery() and
  queryId =
    // `@id` for the `reinterpretCastUsed` query
    "cpp/autosar/reinterpret-cast-used" and
  ruleId = "A5-2-4"
  or
  query =
    // `Query` instance for the `gotoStatementUsed` query
    BannedSyntaxPackage::gotoStatementUsedQuery() and
  queryId =
    // `@id` for the `gotoStatementUsed` query
    "cpp/autosar/goto-statement-used" and
  ruleId = "A6-6-1"
  or
  query =
    // `Query` instance for the `registerKeywordUsed` query
    BannedSyntaxPackage::registerKeywordUsedQuery() and
  queryId =
    // `@id` for the `registerKeywordUsed` query
    "cpp/autosar/register-keyword-used" and
  ruleId = "A7-1-4"
  or
  query =
    // `Query` instance for the `typedefSpecifierUsed` query
    BannedSyntaxPackage::typedefSpecifierUsedQuery() and
  queryId =
    // `@id` for the `typedefSpecifierUsed` query
    "cpp/autosar/typedef-specifier-used" and
  ruleId = "A7-1-6"
  or
  query =
    // `Query` instance for the `asmDeclarationUsed` query
    BannedSyntaxPackage::asmDeclarationUsedQuery() and
  queryId =
    // `@id` for the `asmDeclarationUsed` query
    "cpp/autosar/asm-declaration-used" and
  ruleId = "A7-4-1"
  or
  query =
    // `Query` instance for the `functionsDefinedUsingTheEllipsisNotation` query
    BannedSyntaxPackage::functionsDefinedUsingTheEllipsisNotationQuery() and
  queryId =
    // `@id` for the `functionsDefinedUsingTheEllipsisNotation` query
    "cpp/autosar/functions-defined-using-the-ellipsis-notation" and
  ruleId = "A8-4-1"
  or
  query =
    // `Query` instance for the `unionsUsed` query
    BannedSyntaxPackage::unionsUsedQuery() and
  queryId =
    // `@id` for the `unionsUsed` query
    "cpp/autosar/unions-used" and
  ruleId = "A9-5-1"
  or
  query =
    // `Query` instance for the `commaOperatorUsed` query
    BannedSyntaxPackage::commaOperatorUsedQuery() and
  queryId =
    // `@id` for the `commaOperatorUsed` query
    "cpp/autosar/comma-operator-used" and
  ruleId = "M5-18-1"
  or
  query =
    // `Query` instance for the `usingDirectivesUsed` query
    BannedSyntaxPackage::usingDirectivesUsedQuery() and
  queryId =
    // `@id` for the `usingDirectivesUsed` query
    "cpp/autosar/using-directives-used" and
  ruleId = "M7-3-4"
  or
  query =
    // `Query` instance for the `usingDeclarationsUsedInHeaderFiles` query
    BannedSyntaxPackage::usingDeclarationsUsedInHeaderFilesQuery() and
  queryId =
    // `@id` for the `usingDeclarationsUsedInHeaderFiles` query
    "cpp/autosar/using-declarations-used-in-header-files" and
  ruleId = "M7-3-6"
  or
  query =
    // `Query` instance for the `doNotDefineACStyleVariadicFunction` query
    BannedSyntaxPackage::doNotDefineACStyleVariadicFunctionQuery() and
  queryId =
    // `@id` for the `doNotDefineACStyleVariadicFunction` query
    "cpp/cert/do-not-define-ac-style-variadic-function" and
  ruleId = "DCL50-CPP"
}

module BannedSyntaxPackage {
  Query friendDeclarationsUsedQuery() {
    //autogenerate `Query` type
    result =
      // `Query` type for `friendDeclarationsUsed` query
      TQueryCPP(TBannedSyntaxPackageQuery(TFriendDeclarationsUsedQuery()))
  }

  Query cStyleArraysUsedQuery() {
    //autogenerate `Query` type
    result =
      // `Query` type for `cStyleArraysUsed` query
      TQueryCPP(TBannedSyntaxPackageQuery(TCStyleArraysUsedQuery()))
  }

  Query volatileKeywordUsedQuery() {
    //autogenerate `Query` type
    result =
      // `Query` type for `volatileKeywordUsed` query
      TQueryCPP(TBannedSyntaxPackageQuery(TVolatileKeywordUsedQuery()))
  }

  Query ternaryConditionalOperatorUsedAsSubExpressionQuery() {
    //autogenerate `Query` type
    result =
      // `Query` type for `ternaryConditionalOperatorUsedAsSubExpression` query
      TQueryCPP(TBannedSyntaxPackageQuery(TTernaryConditionalOperatorUsedAsSubExpressionQuery()))
  }

  Query dynamicCastShouldNotBeUsedQuery() {
    //autogenerate `Query` type
    result =
      // `Query` type for `dynamicCastShouldNotBeUsed` query
      TQueryCPP(TBannedSyntaxPackageQuery(TDynamicCastShouldNotBeUsedQuery()))
  }

  Query traditionalCStyleCastsUsedQuery() {
    //autogenerate `Query` type
    result =
      // `Query` type for `traditionalCStyleCastsUsed` query
      TQueryCPP(TBannedSyntaxPackageQuery(TTraditionalCStyleCastsUsedQuery()))
  }

  Query reinterpretCastUsedQuery() {
    //autogenerate `Query` type
    result =
      // `Query` type for `reinterpretCastUsed` query
      TQueryCPP(TBannedSyntaxPackageQuery(TReinterpretCastUsedQuery()))
  }

  Query gotoStatementUsedQuery() {
    //autogenerate `Query` type
    result =
      // `Query` type for `gotoStatementUsed` query
      TQueryCPP(TBannedSyntaxPackageQuery(TGotoStatementUsedQuery()))
  }

  Query registerKeywordUsedQuery() {
    //autogenerate `Query` type
    result =
      // `Query` type for `registerKeywordUsed` query
      TQueryCPP(TBannedSyntaxPackageQuery(TRegisterKeywordUsedQuery()))
  }

  Query typedefSpecifierUsedQuery() {
    //autogenerate `Query` type
    result =
      // `Query` type for `typedefSpecifierUsed` query
      TQueryCPP(TBannedSyntaxPackageQuery(TTypedefSpecifierUsedQuery()))
  }

  Query asmDeclarationUsedQuery() {
    //autogenerate `Query` type
    result =
      // `Query` type for `asmDeclarationUsed` query
      TQueryCPP(TBannedSyntaxPackageQuery(TAsmDeclarationUsedQuery()))
  }

  Query functionsDefinedUsingTheEllipsisNotationQuery() {
    //autogenerate `Query` type
    result =
      // `Query` type for `functionsDefinedUsingTheEllipsisNotation` query
      TQueryCPP(TBannedSyntaxPackageQuery(TFunctionsDefinedUsingTheEllipsisNotationQuery()))
  }

  Query unionsUsedQuery() {
    //autogenerate `Query` type
    result =
      // `Query` type for `unionsUsed` query
      TQueryCPP(TBannedSyntaxPackageQuery(TUnionsUsedQuery()))
  }

  Query commaOperatorUsedQuery() {
    //autogenerate `Query` type
    result =
      // `Query` type for `commaOperatorUsed` query
      TQueryCPP(TBannedSyntaxPackageQuery(TCommaOperatorUsedQuery()))
  }

  Query usingDirectivesUsedQuery() {
    //autogenerate `Query` type
    result =
      // `Query` type for `usingDirectivesUsed` query
      TQueryCPP(TBannedSyntaxPackageQuery(TUsingDirectivesUsedQuery()))
  }

  Query usingDeclarationsUsedInHeaderFilesQuery() {
    //autogenerate `Query` type
    result =
      // `Query` type for `usingDeclarationsUsedInHeaderFiles` query
      TQueryCPP(TBannedSyntaxPackageQuery(TUsingDeclarationsUsedInHeaderFilesQuery()))
  }

  Query doNotDefineACStyleVariadicFunctionQuery() {
    //autogenerate `Query` type
    result =
      // `Query` type for `doNotDefineACStyleVariadicFunction` query
      TQueryCPP(TBannedSyntaxPackageQuery(TDoNotDefineACStyleVariadicFunctionQuery()))
  }
}
