//** THIS FILE IS AUTOGENERATED, DO NOT MODIFY DIRECTLY.  **/
import cpp
import RuleMetadata
import codingstandards.cpp.exclusions.RuleMetadata

newtype ConditionalsQuery =
  TNonBooleanIfConditionQuery() or
  TNonBooleanIterationConditionQuery() or
  TSwitchLessThanTwoCasesQuery() or
  TSwitchCompoundConditionQuery() or
  TLoopCompoundConditionQuery() or
  TIfCompoundConditionQuery() or
  TIfElseTerminationConditionQuery() or
  TSwitchDoesNotStartWithCaseQuery() or
  TSwitchStatementNotWellFormedQuery() or
  TNestedCaseInSwitchQuery() or
  TNonEmptySwitchClauseDoesNotTerminateQuery() or
  TMissingDefaultInSwitchQuery() or
  TSwitchFinalClauseNotDefaultQuery() or
  TBooleanInSwitchConditionQuery() or
  TGotoBlockConditionQuery() or
  TGotoStatementJumpConditionQuery() or
  TContinueInForLoopConditionQuery()

predicate isConditionalsQueryMetadata(Query query, string queryId, string ruleId) {
  query =
    // `Query` instance for the `nonBooleanIfCondition` query
    ConditionalsPackage::nonBooleanIfConditionQuery() and
  queryId =
    // `@id` for the `nonBooleanIfCondition` query
    "cpp/autosar/non-boolean-if-condition" and
  ruleId = "A5-0-2"
  or
  query =
    // `Query` instance for the `nonBooleanIterationCondition` query
    ConditionalsPackage::nonBooleanIterationConditionQuery() and
  queryId =
    // `@id` for the `nonBooleanIterationCondition` query
    "cpp/autosar/non-boolean-iteration-condition" and
  ruleId = "A5-0-2"
  or
  query =
    // `Query` instance for the `switchLessThanTwoCases` query
    ConditionalsPackage::switchLessThanTwoCasesQuery() and
  queryId =
    // `@id` for the `switchLessThanTwoCases` query
    "cpp/autosar/switch-less-than-two-cases" and
  ruleId = "A6-4-1"
  or
  query =
    // `Query` instance for the `switchCompoundCondition` query
    ConditionalsPackage::switchCompoundConditionQuery() and
  queryId =
    // `@id` for the `switchCompoundCondition` query
    "cpp/autosar/switch-compound-condition" and
  ruleId = "M6-3-1"
  or
  query =
    // `Query` instance for the `loopCompoundCondition` query
    ConditionalsPackage::loopCompoundConditionQuery() and
  queryId =
    // `@id` for the `loopCompoundCondition` query
    "cpp/autosar/loop-compound-condition" and
  ruleId = "M6-3-1"
  or
  query =
    // `Query` instance for the `ifCompoundCondition` query
    ConditionalsPackage::ifCompoundConditionQuery() and
  queryId =
    // `@id` for the `ifCompoundCondition` query
    "cpp/autosar/if-compound-condition" and
  ruleId = "M6-4-1"
  or
  query =
    // `Query` instance for the `ifElseTerminationCondition` query
    ConditionalsPackage::ifElseTerminationConditionQuery() and
  queryId =
    // `@id` for the `ifElseTerminationCondition` query
    "cpp/autosar/if-else-termination-condition" and
  ruleId = "M6-4-2"
  or
  query =
    // `Query` instance for the `switchDoesNotStartWithCase` query
    ConditionalsPackage::switchDoesNotStartWithCaseQuery() and
  queryId =
    // `@id` for the `switchDoesNotStartWithCase` query
    "cpp/autosar/switch-does-not-start-with-case" and
  ruleId = "M6-4-3"
  or
  query =
    // `Query` instance for the `switchStatementNotWellFormed` query
    ConditionalsPackage::switchStatementNotWellFormedQuery() and
  queryId =
    // `@id` for the `switchStatementNotWellFormed` query
    "cpp/autosar/switch-statement-not-well-formed" and
  ruleId = "M6-4-3"
  or
  query =
    // `Query` instance for the `nestedCaseInSwitch` query
    ConditionalsPackage::nestedCaseInSwitchQuery() and
  queryId =
    // `@id` for the `nestedCaseInSwitch` query
    "cpp/autosar/nested-case-in-switch" and
  ruleId = "M6-4-4"
  or
  query =
    // `Query` instance for the `nonEmptySwitchClauseDoesNotTerminate` query
    ConditionalsPackage::nonEmptySwitchClauseDoesNotTerminateQuery() and
  queryId =
    // `@id` for the `nonEmptySwitchClauseDoesNotTerminate` query
    "cpp/autosar/non-empty-switch-clause-does-not-terminate" and
  ruleId = "M6-4-5"
  or
  query =
    // `Query` instance for the `missingDefaultInSwitch` query
    ConditionalsPackage::missingDefaultInSwitchQuery() and
  queryId =
    // `@id` for the `missingDefaultInSwitch` query
    "cpp/autosar/missing-default-in-switch" and
  ruleId = "M6-4-6"
  or
  query =
    // `Query` instance for the `switchFinalClauseNotDefault` query
    ConditionalsPackage::switchFinalClauseNotDefaultQuery() and
  queryId =
    // `@id` for the `switchFinalClauseNotDefault` query
    "cpp/autosar/switch-final-clause-not-default" and
  ruleId = "M6-4-6"
  or
  query =
    // `Query` instance for the `booleanInSwitchCondition` query
    ConditionalsPackage::booleanInSwitchConditionQuery() and
  queryId =
    // `@id` for the `booleanInSwitchCondition` query
    "cpp/autosar/boolean-in-switch-condition" and
  ruleId = "M6-4-7"
  or
  query =
    // `Query` instance for the `gotoBlockCondition` query
    ConditionalsPackage::gotoBlockConditionQuery() and
  queryId =
    // `@id` for the `gotoBlockCondition` query
    "cpp/autosar/goto-block-condition" and
  ruleId = "M6-6-1"
  or
  query =
    // `Query` instance for the `gotoStatementJumpCondition` query
    ConditionalsPackage::gotoStatementJumpConditionQuery() and
  queryId =
    // `@id` for the `gotoStatementJumpCondition` query
    "cpp/autosar/goto-statement-jump-condition" and
  ruleId = "M6-6-2"
  or
  query =
    // `Query` instance for the `continueInForLoopCondition` query
    ConditionalsPackage::continueInForLoopConditionQuery() and
  queryId =
    // `@id` for the `continueInForLoopCondition` query
    "cpp/autosar/continue-in-for-loop-condition" and
  ruleId = "M6-6-3"
}

module ConditionalsPackage {
  Query nonBooleanIfConditionQuery() {
    //autogenerate `Query` type
    result =
      // `Query` type for `nonBooleanIfCondition` query
      TQueryCPP(TConditionalsPackageQuery(TNonBooleanIfConditionQuery()))
  }

  Query nonBooleanIterationConditionQuery() {
    //autogenerate `Query` type
    result =
      // `Query` type for `nonBooleanIterationCondition` query
      TQueryCPP(TConditionalsPackageQuery(TNonBooleanIterationConditionQuery()))
  }

  Query switchLessThanTwoCasesQuery() {
    //autogenerate `Query` type
    result =
      // `Query` type for `switchLessThanTwoCases` query
      TQueryCPP(TConditionalsPackageQuery(TSwitchLessThanTwoCasesQuery()))
  }

  Query switchCompoundConditionQuery() {
    //autogenerate `Query` type
    result =
      // `Query` type for `switchCompoundCondition` query
      TQueryCPP(TConditionalsPackageQuery(TSwitchCompoundConditionQuery()))
  }

  Query loopCompoundConditionQuery() {
    //autogenerate `Query` type
    result =
      // `Query` type for `loopCompoundCondition` query
      TQueryCPP(TConditionalsPackageQuery(TLoopCompoundConditionQuery()))
  }

  Query ifCompoundConditionQuery() {
    //autogenerate `Query` type
    result =
      // `Query` type for `ifCompoundCondition` query
      TQueryCPP(TConditionalsPackageQuery(TIfCompoundConditionQuery()))
  }

  Query ifElseTerminationConditionQuery() {
    //autogenerate `Query` type
    result =
      // `Query` type for `ifElseTerminationCondition` query
      TQueryCPP(TConditionalsPackageQuery(TIfElseTerminationConditionQuery()))
  }

  Query switchDoesNotStartWithCaseQuery() {
    //autogenerate `Query` type
    result =
      // `Query` type for `switchDoesNotStartWithCase` query
      TQueryCPP(TConditionalsPackageQuery(TSwitchDoesNotStartWithCaseQuery()))
  }

  Query switchStatementNotWellFormedQuery() {
    //autogenerate `Query` type
    result =
      // `Query` type for `switchStatementNotWellFormed` query
      TQueryCPP(TConditionalsPackageQuery(TSwitchStatementNotWellFormedQuery()))
  }

  Query nestedCaseInSwitchQuery() {
    //autogenerate `Query` type
    result =
      // `Query` type for `nestedCaseInSwitch` query
      TQueryCPP(TConditionalsPackageQuery(TNestedCaseInSwitchQuery()))
  }

  Query nonEmptySwitchClauseDoesNotTerminateQuery() {
    //autogenerate `Query` type
    result =
      // `Query` type for `nonEmptySwitchClauseDoesNotTerminate` query
      TQueryCPP(TConditionalsPackageQuery(TNonEmptySwitchClauseDoesNotTerminateQuery()))
  }

  Query missingDefaultInSwitchQuery() {
    //autogenerate `Query` type
    result =
      // `Query` type for `missingDefaultInSwitch` query
      TQueryCPP(TConditionalsPackageQuery(TMissingDefaultInSwitchQuery()))
  }

  Query switchFinalClauseNotDefaultQuery() {
    //autogenerate `Query` type
    result =
      // `Query` type for `switchFinalClauseNotDefault` query
      TQueryCPP(TConditionalsPackageQuery(TSwitchFinalClauseNotDefaultQuery()))
  }

  Query booleanInSwitchConditionQuery() {
    //autogenerate `Query` type
    result =
      // `Query` type for `booleanInSwitchCondition` query
      TQueryCPP(TConditionalsPackageQuery(TBooleanInSwitchConditionQuery()))
  }

  Query gotoBlockConditionQuery() {
    //autogenerate `Query` type
    result =
      // `Query` type for `gotoBlockCondition` query
      TQueryCPP(TConditionalsPackageQuery(TGotoBlockConditionQuery()))
  }

  Query gotoStatementJumpConditionQuery() {
    //autogenerate `Query` type
    result =
      // `Query` type for `gotoStatementJumpCondition` query
      TQueryCPP(TConditionalsPackageQuery(TGotoStatementJumpConditionQuery()))
  }

  Query continueInForLoopConditionQuery() {
    //autogenerate `Query` type
    result =
      // `Query` type for `continueInForLoopCondition` query
      TQueryCPP(TConditionalsPackageQuery(TContinueInForLoopConditionQuery()))
  }
}
