//** THIS FILE IS AUTOGENERATED, DO NOT MODIFY DIRECTLY.  **/
import cpp
import RuleMetadata
import codingstandards.cpp.exclusions.RuleMetadata

newtype Expressions2Query =
  TLongLongLiteralWithSingleLSuffixQuery() or
  TMissingPrecedenceClarifyingParenthesisQuery() or
  TMissingSizeofOperatorParenthesisQuery() or
  TNonTransientLambdaImplicitlyCapturesThisQuery() or
  TImplicitCapturesDisallowedInNonTransientLambdaQuery()

predicate isExpressions2QueryMetadata(Query query, string queryId, string ruleId, string category) {
  query =
    // `Query` instance for the `longLongLiteralWithSingleLSuffix` query
    Expressions2Package::longLongLiteralWithSingleLSuffixQuery() and
  queryId =
    // `@id` for the `longLongLiteralWithSingleLSuffix` query
    "cpp/misra/long-long-literal-with-single-l-suffix" and
  ruleId = "RULE-5-13-6" and
  category = "required"
  or
  query =
    // `Query` instance for the `missingPrecedenceClarifyingParenthesis` query
    Expressions2Package::missingPrecedenceClarifyingParenthesisQuery() and
  queryId =
    // `@id` for the `missingPrecedenceClarifyingParenthesis` query
    "cpp/misra/missing-precedence-clarifying-parenthesis" and
  ruleId = "RULE-8-0-1" and
  category = "advisory"
  or
  query =
    // `Query` instance for the `missingSizeofOperatorParenthesis` query
    Expressions2Package::missingSizeofOperatorParenthesisQuery() and
  queryId =
    // `@id` for the `missingSizeofOperatorParenthesis` query
    "cpp/misra/missing-sizeof-operator-parenthesis" and
  ruleId = "RULE-8-0-1" and
  category = "advisory"
  or
  query =
    // `Query` instance for the `nonTransientLambdaImplicitlyCapturesThis` query
    Expressions2Package::nonTransientLambdaImplicitlyCapturesThisQuery() and
  queryId =
    // `@id` for the `nonTransientLambdaImplicitlyCapturesThis` query
    "cpp/misra/non-transient-lambda-implicitly-captures-this" and
  ruleId = "RULE-8-1-1" and
  category = "required"
  or
  query =
    // `Query` instance for the `implicitCapturesDisallowedInNonTransientLambda` query
    Expressions2Package::implicitCapturesDisallowedInNonTransientLambdaQuery() and
  queryId =
    // `@id` for the `implicitCapturesDisallowedInNonTransientLambda` query
    "cpp/misra/implicit-captures-disallowed-in-non-transient-lambda" and
  ruleId = "RULE-8-1-2" and
  category = "advisory"
}

module Expressions2Package {
  Query longLongLiteralWithSingleLSuffixQuery() {
    //autogenerate `Query` type
    result =
      // `Query` type for `longLongLiteralWithSingleLSuffix` query
      TQueryCPP(TExpressions2PackageQuery(TLongLongLiteralWithSingleLSuffixQuery()))
  }

  Query missingPrecedenceClarifyingParenthesisQuery() {
    //autogenerate `Query` type
    result =
      // `Query` type for `missingPrecedenceClarifyingParenthesis` query
      TQueryCPP(TExpressions2PackageQuery(TMissingPrecedenceClarifyingParenthesisQuery()))
  }

  Query missingSizeofOperatorParenthesisQuery() {
    //autogenerate `Query` type
    result =
      // `Query` type for `missingSizeofOperatorParenthesis` query
      TQueryCPP(TExpressions2PackageQuery(TMissingSizeofOperatorParenthesisQuery()))
  }

  Query nonTransientLambdaImplicitlyCapturesThisQuery() {
    //autogenerate `Query` type
    result =
      // `Query` type for `nonTransientLambdaImplicitlyCapturesThis` query
      TQueryCPP(TExpressions2PackageQuery(TNonTransientLambdaImplicitlyCapturesThisQuery()))
  }

  Query implicitCapturesDisallowedInNonTransientLambdaQuery() {
    //autogenerate `Query` type
    result =
      // `Query` type for `implicitCapturesDisallowedInNonTransientLambda` query
      TQueryCPP(TExpressions2PackageQuery(TImplicitCapturesDisallowedInNonTransientLambdaQuery()))
  }
}
