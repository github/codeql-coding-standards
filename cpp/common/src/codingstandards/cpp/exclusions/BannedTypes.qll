//** THIS FILE IS AUTOGENERATED, DO NOT MODIFY DIRECTLY.  */
import cpp
import RuleMetadata

newtype BannedTypesQuery =
  TTypeLongDoubleUsedQuery() or
  TVectorboolSpecializationUsedQuery() or
  TAutoPtrTypeUsedQuery() or
  TTypeWcharTUsedQuery()

predicate isBannedTypesQueryMetadata(Query query, string queryId, string ruleId) {
  query =
    // `Query` instance for the `typeLongDoubleUsed` query
    BannedTypesPackage::typeLongDoubleUsedQuery() and
  queryId =
    // `@id` for the `typeLongDoubleUsed` query
    "cpp/autosar/type-long-double-used" and
  ruleId = "A0-4-2"
  or
  query =
    // `Query` instance for the `vectorboolSpecializationUsed` query
    BannedTypesPackage::vectorboolSpecializationUsedQuery() and
  queryId =
    // `@id` for the `vectorboolSpecializationUsed` query
    "cpp/autosar/vectorbool-specialization-used" and
  ruleId = "A18-1-2"
  or
  query =
    // `Query` instance for the `autoPtrTypeUsed` query
    BannedTypesPackage::autoPtrTypeUsedQuery() and
  queryId =
    // `@id` for the `autoPtrTypeUsed` query
    "cpp/autosar/auto-ptr-type-used" and
  ruleId = "A18-1-3"
  or
  query =
    // `Query` instance for the `typeWcharTUsed` query
    BannedTypesPackage::typeWcharTUsedQuery() and
  queryId =
    // `@id` for the `typeWcharTUsed` query
    "cpp/autosar/type-wchar-t-used" and
  ruleId = "A2-13-3"
}

module BannedTypesPackage {
  Query typeLongDoubleUsedQuery() {
    //autogenerate `Query` type
    result =
      // `Query` type for `typeLongDoubleUsed` query
      TBannedTypesPackageQuery(TTypeLongDoubleUsedQuery())
  }

  Query vectorboolSpecializationUsedQuery() {
    //autogenerate `Query` type
    result =
      // `Query` type for `vectorboolSpecializationUsed` query
      TBannedTypesPackageQuery(TVectorboolSpecializationUsedQuery())
  }

  Query autoPtrTypeUsedQuery() {
    //autogenerate `Query` type
    result =
      // `Query` type for `autoPtrTypeUsed` query
      TBannedTypesPackageQuery(TAutoPtrTypeUsedQuery())
  }

  Query typeWcharTUsedQuery() {
    //autogenerate `Query` type
    result =
      // `Query` type for `typeWcharTUsed` query
      TBannedTypesPackageQuery(TTypeWcharTUsedQuery())
  }
}
