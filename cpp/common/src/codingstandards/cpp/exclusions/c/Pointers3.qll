//** THIS FILE IS AUTOGENERATED, DO NOT MODIFY DIRECTLY.  **/
import cpp
import RuleMetadata
import codingstandards.cpp.exclusions.RuleMetadata

newtype Pointers3Query =
  TDoNotAccessVolatileObjectWithNonVolatileReferenceQuery() or
  TDoNotCastPointerToMoreStrictlyAlignedPointerTypeQuery() or
  TDoNotAccessVariableViaPointerOfIncompatibleTypeQuery() or
  TDoNotPassAliasedPointerToRestrictQualifiedParamQuery() or
  TRestrictPointerReferencesOverlappingObjectQuery()

predicate isPointers3QueryMetadata(Query query, string queryId, string ruleId, string category) {
  query =
    // `Query` instance for the `doNotAccessVolatileObjectWithNonVolatileReference` query
    Pointers3Package::doNotAccessVolatileObjectWithNonVolatileReferenceQuery() and
  queryId =
    // `@id` for the `doNotAccessVolatileObjectWithNonVolatileReference` query
    "c/cert/do-not-access-volatile-object-with-non-volatile-reference" and
  ruleId = "EXP32-C" and
  category = "rule"
  or
  query =
    // `Query` instance for the `doNotCastPointerToMoreStrictlyAlignedPointerType` query
    Pointers3Package::doNotCastPointerToMoreStrictlyAlignedPointerTypeQuery() and
  queryId =
    // `@id` for the `doNotCastPointerToMoreStrictlyAlignedPointerType` query
    "c/cert/do-not-cast-pointer-to-more-strictly-aligned-pointer-type" and
  ruleId = "EXP36-C" and
  category = "rule"
  or
  query =
    // `Query` instance for the `doNotAccessVariableViaPointerOfIncompatibleType` query
    Pointers3Package::doNotAccessVariableViaPointerOfIncompatibleTypeQuery() and
  queryId =
    // `@id` for the `doNotAccessVariableViaPointerOfIncompatibleType` query
    "c/cert/do-not-access-variable-via-pointer-of-incompatible-type" and
  ruleId = "EXP39-C" and
  category = "rule"
  or
  query =
    // `Query` instance for the `doNotPassAliasedPointerToRestrictQualifiedParam` query
    Pointers3Package::doNotPassAliasedPointerToRestrictQualifiedParamQuery() and
  queryId =
    // `@id` for the `doNotPassAliasedPointerToRestrictQualifiedParam` query
    "c/cert/do-not-pass-aliased-pointer-to-restrict-qualified-param" and
  ruleId = "EXP43-C" and
  category = "rule"
  or
  query =
    // `Query` instance for the `restrictPointerReferencesOverlappingObject` query
    Pointers3Package::restrictPointerReferencesOverlappingObjectQuery() and
  queryId =
    // `@id` for the `restrictPointerReferencesOverlappingObject` query
    "c/cert/restrict-pointer-references-overlapping-object" and
  ruleId = "EXP43-C" and
  category = "rule"
}

module Pointers3Package {
  Query doNotAccessVolatileObjectWithNonVolatileReferenceQuery() {
    //autogenerate `Query` type
    result =
      // `Query` type for `doNotAccessVolatileObjectWithNonVolatileReference` query
      TQueryC(TPointers3PackageQuery(TDoNotAccessVolatileObjectWithNonVolatileReferenceQuery()))
  }

  Query doNotCastPointerToMoreStrictlyAlignedPointerTypeQuery() {
    //autogenerate `Query` type
    result =
      // `Query` type for `doNotCastPointerToMoreStrictlyAlignedPointerType` query
      TQueryC(TPointers3PackageQuery(TDoNotCastPointerToMoreStrictlyAlignedPointerTypeQuery()))
  }

  Query doNotAccessVariableViaPointerOfIncompatibleTypeQuery() {
    //autogenerate `Query` type
    result =
      // `Query` type for `doNotAccessVariableViaPointerOfIncompatibleType` query
      TQueryC(TPointers3PackageQuery(TDoNotAccessVariableViaPointerOfIncompatibleTypeQuery()))
  }

  Query doNotPassAliasedPointerToRestrictQualifiedParamQuery() {
    //autogenerate `Query` type
    result =
      // `Query` type for `doNotPassAliasedPointerToRestrictQualifiedParam` query
      TQueryC(TPointers3PackageQuery(TDoNotPassAliasedPointerToRestrictQualifiedParamQuery()))
  }

  Query restrictPointerReferencesOverlappingObjectQuery() {
    //autogenerate `Query` type
    result =
      // `Query` type for `restrictPointerReferencesOverlappingObject` query
      TQueryC(TPointers3PackageQuery(TRestrictPointerReferencesOverlappingObjectQuery()))
  }
}
