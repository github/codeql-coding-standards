//** THIS FILE IS AUTOGENERATED, DO NOT MODIFY DIRECTLY.  **/
import cpp
import RuleMetadata
import codingstandards.cpp.exclusions.RuleMetadata

newtype Concurrency5Query =
  TThreadWasPreviouslyJoinedOrDetachedQuery() or
  TAtomicVariableTwiceInExpressionQuery()

predicate isConcurrency5QueryMetadata(Query query, string queryId, string ruleId) {
  query =
    // `Query` instance for the `threadWasPreviouslyJoinedOrDetached` query
    Concurrency5Package::threadWasPreviouslyJoinedOrDetachedQuery() and
  queryId =
    // `@id` for the `threadWasPreviouslyJoinedOrDetached` query
    "c/cert/thread-was-previously-joined-or-detached" and
  ruleId = "CON39-C"
  or
  query =
    // `Query` instance for the `atomicVariableTwiceInExpression` query
    Concurrency5Package::atomicVariableTwiceInExpressionQuery() and
  queryId =
    // `@id` for the `atomicVariableTwiceInExpression` query
    "c/cert/atomic-variable-twice-in-expression" and
  ruleId = "CON40-C"
}

module Concurrency5Package {
  Query threadWasPreviouslyJoinedOrDetachedQuery() {
    //autogenerate `Query` type
    result =
      // `Query` type for `threadWasPreviouslyJoinedOrDetached` query
      TQueryC(TConcurrency5PackageQuery(TThreadWasPreviouslyJoinedOrDetachedQuery()))
  }

  Query atomicVariableTwiceInExpressionQuery() {
    //autogenerate `Query` type
    result =
      // `Query` type for `atomicVariableTwiceInExpression` query
      TQueryC(TConcurrency5PackageQuery(TAtomicVariableTwiceInExpressionQuery()))
  }
}
