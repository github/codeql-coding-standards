//** THIS FILE IS AUTOGENERATED, DO NOT MODIFY DIRECTLY.  **/
import cpp
import RuleMetadata
import codingstandards.cpp.exclusions.RuleMetadata

newtype ExpressionsQuery =
  TDoNotCallFunctionPointerWithIncompatibleTypeQuery() or
  TDoNotCallFunctionsWithIncompatibleArgumentsQuery() or
  TCallPOSIXOpenWithCorrectArgumentCountQuery() or
  TDoNotUseABitwiseOperatorWithABooleanLikeOperandQuery()

predicate isExpressionsQueryMetadata(Query query, string queryId, string ruleId) {
  query =
    // `Query` instance for the `doNotCallFunctionPointerWithIncompatibleType` query
    ExpressionsPackage::doNotCallFunctionPointerWithIncompatibleTypeQuery() and
  queryId =
    // `@id` for the `doNotCallFunctionPointerWithIncompatibleType` query
    "c/cert/do-not-call-function-pointer-with-incompatible-type" and
  ruleId = "EXP37-C"
  or
  query =
    // `Query` instance for the `doNotCallFunctionsWithIncompatibleArguments` query
    ExpressionsPackage::doNotCallFunctionsWithIncompatibleArgumentsQuery() and
  queryId =
    // `@id` for the `doNotCallFunctionsWithIncompatibleArguments` query
    "c/cert/do-not-call-functions-with-incompatible-arguments" and
  ruleId = "EXP37-C"
  or
  query =
    // `Query` instance for the `callPOSIXOpenWithCorrectArgumentCount` query
    ExpressionsPackage::callPOSIXOpenWithCorrectArgumentCountQuery() and
  queryId =
    // `@id` for the `callPOSIXOpenWithCorrectArgumentCount` query
    "c/cert/call-posix-open-with-correct-argument-count" and
  ruleId = "EXP37-C"
  or
  query =
    // `Query` instance for the `doNotUseABitwiseOperatorWithABooleanLikeOperand` query
    ExpressionsPackage::doNotUseABitwiseOperatorWithABooleanLikeOperandQuery() and
  queryId =
    // `@id` for the `doNotUseABitwiseOperatorWithABooleanLikeOperand` query
    "c/cert/do-not-use-a-bitwise-operator-with-a-boolean-like-operand" and
  ruleId = "EXP46-C"
}

module ExpressionsPackage {
  Query doNotCallFunctionPointerWithIncompatibleTypeQuery() {
    //autogenerate `Query` type
    result =
      // `Query` type for `doNotCallFunctionPointerWithIncompatibleType` query
      TQueryC(TExpressionsPackageQuery(TDoNotCallFunctionPointerWithIncompatibleTypeQuery()))
  }

  Query doNotCallFunctionsWithIncompatibleArgumentsQuery() {
    //autogenerate `Query` type
    result =
      // `Query` type for `doNotCallFunctionsWithIncompatibleArguments` query
      TQueryC(TExpressionsPackageQuery(TDoNotCallFunctionsWithIncompatibleArgumentsQuery()))
  }

  Query callPOSIXOpenWithCorrectArgumentCountQuery() {
    //autogenerate `Query` type
    result =
      // `Query` type for `callPOSIXOpenWithCorrectArgumentCount` query
      TQueryC(TExpressionsPackageQuery(TCallPOSIXOpenWithCorrectArgumentCountQuery()))
  }

  Query doNotUseABitwiseOperatorWithABooleanLikeOperandQuery() {
    //autogenerate `Query` type
    result =
      // `Query` type for `doNotUseABitwiseOperatorWithABooleanLikeOperand` query
      TQueryC(TExpressionsPackageQuery(TDoNotUseABitwiseOperatorWithABooleanLikeOperandQuery()))
  }
}
