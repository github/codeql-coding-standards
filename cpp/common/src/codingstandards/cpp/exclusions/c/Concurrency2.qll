//** THIS FILE IS AUTOGENERATED, DO NOT MODIFY DIRECTLY.  **/
import cpp
import RuleMetadata
import codingstandards.cpp.exclusions.RuleMetadata

newtype Concurrency2Query =
  TDoNotDestroyAMutexWhileItIsLockedQuery() or
  TDeadlockByLockingInPredefinedOrderQuery() or
  TWrapFunctionsThatCanSpuriouslyWakeUpInLoopQuery()

predicate isConcurrency2QueryMetadata(Query query, string queryId, string ruleId) {
  query =
    // `Query` instance for the `doNotDestroyAMutexWhileItIsLocked` query
    Concurrency2Package::doNotDestroyAMutexWhileItIsLockedQuery() and
  queryId =
    // `@id` for the `doNotDestroyAMutexWhileItIsLocked` query
    "c/cert/do-not-destroy-a-mutex-while-it-is-locked" and
  ruleId = "CON31-C"
  or
  query =
    // `Query` instance for the `deadlockByLockingInPredefinedOrder` query
    Concurrency2Package::deadlockByLockingInPredefinedOrderQuery() and
  queryId =
    // `@id` for the `deadlockByLockingInPredefinedOrder` query
    "c/cert/deadlock-by-locking-in-predefined-order" and
  ruleId = "CON35-C"
  or
  query =
    // `Query` instance for the `wrapFunctionsThatCanSpuriouslyWakeUpInLoop` query
    Concurrency2Package::wrapFunctionsThatCanSpuriouslyWakeUpInLoopQuery() and
  queryId =
    // `@id` for the `wrapFunctionsThatCanSpuriouslyWakeUpInLoop` query
    "c/cert/wrap-functions-that-can-spuriously-wake-up-in-loop" and
  ruleId = "CON36-C"
}

module Concurrency2Package {
  Query doNotDestroyAMutexWhileItIsLockedQuery() {
    //autogenerate `Query` type
    result =
      // `Query` type for `doNotDestroyAMutexWhileItIsLocked` query
      TQueryC(TConcurrency2PackageQuery(TDoNotDestroyAMutexWhileItIsLockedQuery()))
  }

  Query deadlockByLockingInPredefinedOrderQuery() {
    //autogenerate `Query` type
    result =
      // `Query` type for `deadlockByLockingInPredefinedOrder` query
      TQueryC(TConcurrency2PackageQuery(TDeadlockByLockingInPredefinedOrderQuery()))
  }

  Query wrapFunctionsThatCanSpuriouslyWakeUpInLoopQuery() {
    //autogenerate `Query` type
    result =
      // `Query` type for `wrapFunctionsThatCanSpuriouslyWakeUpInLoop` query
      TQueryC(TConcurrency2PackageQuery(TWrapFunctionsThatCanSpuriouslyWakeUpInLoopQuery()))
  }
}
