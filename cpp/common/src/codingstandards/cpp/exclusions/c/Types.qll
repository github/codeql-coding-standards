//** THIS FILE IS AUTOGENERATED, DO NOT MODIFY DIRECTLY.  **/
import cpp
import RuleMetadata
import codingstandards.cpp.exclusions.RuleMetadata

newtype TypesQuery =
  TPreventOrDetectDomainAndRangeErrorsInMathFunctionsQuery() or
  TFloatingPointConversionsNotWithinRangeOfNewTypeQuery() or
  TFloatingPointOfIntegralValuesLosePrecisionQuery() or
  TObjectReprUsedForComparingFloatingPointValuesQuery() or
  TEnsureThatUnsignedIntegerOperationsDoNotWrapQuery() or
  TIntConversionCausesLostOrMisinterpretedDataQuery() or
  TOperationsOnSignedIntegersResultsInOverflowQuery() or
  TDivAndModOperationResultsInDivByZeroQuery() or
  TExprShiftedByNegativeBitsOrGreaterThanOperandQuery() or
  TUseCorrectIntegerPrecisionsQuery() or
  TConvertingAPointerToIntegerOrIntegerToPointerQuery() or
  TNumericTypedefsNotUsedInPlaceOfBasicNumericalTypesQuery() or
  TOperandsOfAnInappropriateEssentialTypeQuery() or
  TCharTypeExprsUsedInAddOrSubQuery() or
  TAssignmentToIncompatibleEssentialTypeQuery() or
  TArithConversionOperandHasDifferentEssTypeCategoryQuery() or
  TValueCastToInappropriateEssentialTypeQuery() or
  TCompositeExprValueAssignedToObjWithWiderEssTypeQuery() or
  TConvertedCompExprOperandHasWiderEssTypeThanOtherQuery() or
  TCompExprValCastToIncompatEssTypeQuery() or
  TConstExprEvalCausesUnsignedIntWraparoundQuery() or
  TArrayTypeParamAtSizeofOperandQuery() or
  TLoopCounterHaveEssentiallyFloatingTypeQuery() or
  TCtypeFuncNeitherReprAsUnsignedCharNorEOFQuery() or
  TMemcmpUsedToCompareNullTerminatedStringsQuery() or
  TMemcpyMemmoveMemcmpArgNotPointerToCompatTypesQuery() or
  TMemcmpArgNotPtsToSignedUnsignedBooleanEnumEssTypeQuery() or
  TBitFieldsShallOnlyBeDeclaredWithAnAppropriateTypeQuery() or
  TSingleBitNamedBitFieldsOfASignedTypeQuery() or
  TStringLiteralAssignedToObjPtrToConstQualifiedCharQuery()

predicate isTypesQueryMetadata(Query query, string queryId, string ruleId, string category) {
  query =
    // `Query` instance for the `preventOrDetectDomainAndRangeErrorsInMathFunctions` query
    TypesPackage::preventOrDetectDomainAndRangeErrorsInMathFunctionsQuery() and
  queryId =
    // `@id` for the `preventOrDetectDomainAndRangeErrorsInMathFunctions` query
    "c/cert/prevent-or-detect-domain-and-range-errors-in-math-functions" and
  ruleId = "FLP32-C" and
  category = "rule"
  or
  query =
    // `Query` instance for the `floatingPointConversionsNotWithinRangeOfNewType` query
    TypesPackage::floatingPointConversionsNotWithinRangeOfNewTypeQuery() and
  queryId =
    // `@id` for the `floatingPointConversionsNotWithinRangeOfNewType` query
    "c/cert/floating-point-conversions-not-within-range-of-new-type" and
  ruleId = "FLP34-C" and
  category = "rule"
  or
  query =
    // `Query` instance for the `floatingPointOfIntegralValuesLosePrecision` query
    TypesPackage::floatingPointOfIntegralValuesLosePrecisionQuery() and
  queryId =
    // `@id` for the `floatingPointOfIntegralValuesLosePrecision` query
    "c/cert/floating-point-of-integral-values-lose-precision" and
  ruleId = "FLP36-C" and
  category = "rule"
  or
  query =
    // `Query` instance for the `objectReprUsedForComparingFloatingPointValues` query
    TypesPackage::objectReprUsedForComparingFloatingPointValuesQuery() and
  queryId =
    // `@id` for the `objectReprUsedForComparingFloatingPointValues` query
    "c/cert/object-repr-used-for-comparing-floating-point-values" and
  ruleId = "FLP37-C" and
  category = "rule"
  or
  query =
    // `Query` instance for the `ensureThatUnsignedIntegerOperationsDoNotWrap` query
    TypesPackage::ensureThatUnsignedIntegerOperationsDoNotWrapQuery() and
  queryId =
    // `@id` for the `ensureThatUnsignedIntegerOperationsDoNotWrap` query
    "c/cert/ensure-that-unsigned-integer-operations-do-not-wrap" and
  ruleId = "INT30-C" and
  category = "rule"
  or
  query =
    // `Query` instance for the `intConversionCausesLostOrMisinterpretedData` query
    TypesPackage::intConversionCausesLostOrMisinterpretedDataQuery() and
  queryId =
    // `@id` for the `intConversionCausesLostOrMisinterpretedData` query
    "c/cert/int-conversion-causes-lost-or-misinterpreted-data" and
  ruleId = "INT31-C" and
  category = "rule"
  or
  query =
    // `Query` instance for the `operationsOnSignedIntegersResultsInOverflow` query
    TypesPackage::operationsOnSignedIntegersResultsInOverflowQuery() and
  queryId =
    // `@id` for the `operationsOnSignedIntegersResultsInOverflow` query
    "c/cert/operations-on-signed-integers-results-in-overflow" and
  ruleId = "INT32-C" and
  category = "rule"
  or
  query =
    // `Query` instance for the `divAndModOperationResultsInDivByZero` query
    TypesPackage::divAndModOperationResultsInDivByZeroQuery() and
  queryId =
    // `@id` for the `divAndModOperationResultsInDivByZero` query
    "c/cert/div-and-mod-operation-results-in-div-by-zero" and
  ruleId = "INT33-C" and
  category = "rule"
  or
  query =
    // `Query` instance for the `exprShiftedByNegativeBitsOrGreaterThanOperand` query
    TypesPackage::exprShiftedByNegativeBitsOrGreaterThanOperandQuery() and
  queryId =
    // `@id` for the `exprShiftedByNegativeBitsOrGreaterThanOperand` query
    "c/cert/expr-shifted-by-negative-bits-or-greater-than-operand" and
  ruleId = "INT34-C" and
  category = "rule"
  or
  query =
    // `Query` instance for the `useCorrectIntegerPrecisions` query
    TypesPackage::useCorrectIntegerPrecisionsQuery() and
  queryId =
    // `@id` for the `useCorrectIntegerPrecisions` query
    "c/cert/use-correct-integer-precisions" and
  ruleId = "INT35-C" and
  category = "rule"
  or
  query =
    // `Query` instance for the `convertingAPointerToIntegerOrIntegerToPointer` query
    TypesPackage::convertingAPointerToIntegerOrIntegerToPointerQuery() and
  queryId =
    // `@id` for the `convertingAPointerToIntegerOrIntegerToPointer` query
    "c/cert/converting-a-pointer-to-integer-or-integer-to-pointer" and
  ruleId = "INT36-C" and
  category = "rule"
  or
  query =
    // `Query` instance for the `numericTypedefsNotUsedInPlaceOfBasicNumericalTypes` query
    TypesPackage::numericTypedefsNotUsedInPlaceOfBasicNumericalTypesQuery() and
  queryId =
    // `@id` for the `numericTypedefsNotUsedInPlaceOfBasicNumericalTypes` query
    "c/misra/numeric-typedefs-not-used-in-place-of-basic-numerical-types" and
  ruleId = "DIR-4-6" and
  category = "advisory"
  or
  query =
    // `Query` instance for the `operandsOfAnInappropriateEssentialType` query
    TypesPackage::operandsOfAnInappropriateEssentialTypeQuery() and
  queryId =
    // `@id` for the `operandsOfAnInappropriateEssentialType` query
    "c/misra/operands-of-an-inappropriate-essential-type" and
  ruleId = "RULE-10-1" and
  category = "required"
  or
  query =
    // `Query` instance for the `charTypeExprsUsedInAddOrSub` query
    TypesPackage::charTypeExprsUsedInAddOrSubQuery() and
  queryId =
    // `@id` for the `charTypeExprsUsedInAddOrSub` query
    "c/misra/char-type-exprs-used-in-add-or-sub" and
  ruleId = "RULE-10-2" and
  category = "required"
  or
  query =
    // `Query` instance for the `assignmentToIncompatibleEssentialType` query
    TypesPackage::assignmentToIncompatibleEssentialTypeQuery() and
  queryId =
    // `@id` for the `assignmentToIncompatibleEssentialType` query
    "c/misra/assignment-to-incompatible-essential-type" and
  ruleId = "RULE-10-3" and
  category = "required"
  or
  query =
    // `Query` instance for the `arithConversionOperandHasDifferentEssTypeCategory` query
    TypesPackage::arithConversionOperandHasDifferentEssTypeCategoryQuery() and
  queryId =
    // `@id` for the `arithConversionOperandHasDifferentEssTypeCategory` query
    "c/misra/arith-conversion-operand-has-different-ess-type-category" and
  ruleId = "RULE-10-4" and
  category = "required"
  or
  query =
    // `Query` instance for the `valueCastToInappropriateEssentialType` query
    TypesPackage::valueCastToInappropriateEssentialTypeQuery() and
  queryId =
    // `@id` for the `valueCastToInappropriateEssentialType` query
    "c/misra/value-cast-to-inappropriate-essential-type" and
  ruleId = "RULE-10-5" and
  category = "advisory"
  or
  query =
    // `Query` instance for the `compositeExprValueAssignedToObjWithWiderEssType` query
    TypesPackage::compositeExprValueAssignedToObjWithWiderEssTypeQuery() and
  queryId =
    // `@id` for the `compositeExprValueAssignedToObjWithWiderEssType` query
    "c/misra/composite-expr-value-assigned-to-obj-with-wider-ess-type" and
  ruleId = "RULE-10-6" and
  category = "required"
  or
  query =
    // `Query` instance for the `convertedCompExprOperandHasWiderEssTypeThanOther` query
    TypesPackage::convertedCompExprOperandHasWiderEssTypeThanOtherQuery() and
  queryId =
    // `@id` for the `convertedCompExprOperandHasWiderEssTypeThanOther` query
    "c/misra/converted-comp-expr-operand-has-wider-ess-type-than-other" and
  ruleId = "RULE-10-7" and
  category = "required"
  or
  query =
    // `Query` instance for the `compExprValCastToIncompatEssType` query
    TypesPackage::compExprValCastToIncompatEssTypeQuery() and
  queryId =
    // `@id` for the `compExprValCastToIncompatEssType` query
    "c/misra/comp-expr-val-cast-to-incompat-ess-type" and
  ruleId = "RULE-10-8" and
  category = "required"
  or
  query =
    // `Query` instance for the `constExprEvalCausesUnsignedIntWraparound` query
    TypesPackage::constExprEvalCausesUnsignedIntWraparoundQuery() and
  queryId =
    // `@id` for the `constExprEvalCausesUnsignedIntWraparound` query
    "c/misra/const-expr-eval-causes-unsigned-int-wraparound" and
  ruleId = "RULE-12-4" and
  category = "advisory"
  or
  query =
    // `Query` instance for the `arrayTypeParamAtSizeofOperand` query
    TypesPackage::arrayTypeParamAtSizeofOperandQuery() and
  queryId =
    // `@id` for the `arrayTypeParamAtSizeofOperand` query
    "c/misra/array-type-param-at-sizeof-operand" and
  ruleId = "RULE-12-5" and
  category = "mandatory"
  or
  query =
    // `Query` instance for the `loopCounterHaveEssentiallyFloatingType` query
    TypesPackage::loopCounterHaveEssentiallyFloatingTypeQuery() and
  queryId =
    // `@id` for the `loopCounterHaveEssentiallyFloatingType` query
    "c/misra/loop-counter-have-essentially-floating-type" and
  ruleId = "RULE-14-1" and
  category = "required"
  or
  query =
    // `Query` instance for the `ctypeFuncNeitherReprAsUnsignedCharNorEOF` query
    TypesPackage::ctypeFuncNeitherReprAsUnsignedCharNorEOFQuery() and
  queryId =
    // `@id` for the `ctypeFuncNeitherReprAsUnsignedCharNorEOF` query
    "c/misra/ctype-func-neither-repr-as-unsigned-char-nor-eof" and
  ruleId = "RULE-21-13" and
  category = "mandatory"
  or
  query =
    // `Query` instance for the `memcmpUsedToCompareNullTerminatedStrings` query
    TypesPackage::memcmpUsedToCompareNullTerminatedStringsQuery() and
  queryId =
    // `@id` for the `memcmpUsedToCompareNullTerminatedStrings` query
    "c/misra/memcmp-used-to-compare-null-terminated-strings" and
  ruleId = "RULE-21-14" and
  category = "required"
  or
  query =
    // `Query` instance for the `memcpyMemmoveMemcmpArgNotPointerToCompatTypes` query
    TypesPackage::memcpyMemmoveMemcmpArgNotPointerToCompatTypesQuery() and
  queryId =
    // `@id` for the `memcpyMemmoveMemcmpArgNotPointerToCompatTypes` query
    "c/misra/memcpy-memmove-memcmp-arg-not-pointer-to-compat-types" and
  ruleId = "RULE-21-15" and
  category = "required"
  or
  query =
    // `Query` instance for the `memcmpArgNotPtsToSignedUnsignedBooleanEnumEssType` query
    TypesPackage::memcmpArgNotPtsToSignedUnsignedBooleanEnumEssTypeQuery() and
  queryId =
    // `@id` for the `memcmpArgNotPtsToSignedUnsignedBooleanEnumEssType` query
    "c/misra/memcmp-arg-not-pts-to-signed-unsigned-boolean-enum-ess-type" and
  ruleId = "RULE-21-16" and
  category = "required"
  or
  query =
    // `Query` instance for the `bitFieldsShallOnlyBeDeclaredWithAnAppropriateType` query
    TypesPackage::bitFieldsShallOnlyBeDeclaredWithAnAppropriateTypeQuery() and
  queryId =
    // `@id` for the `bitFieldsShallOnlyBeDeclaredWithAnAppropriateType` query
    "c/misra/bit-fields-shall-only-be-declared-with-an-appropriate-type" and
  ruleId = "RULE-6-1" and
  category = "required"
  or
  query =
    // `Query` instance for the `singleBitNamedBitFieldsOfASignedType` query
    TypesPackage::singleBitNamedBitFieldsOfASignedTypeQuery() and
  queryId =
    // `@id` for the `singleBitNamedBitFieldsOfASignedType` query
    "c/misra/single-bit-named-bit-fields-of-a-signed-type" and
  ruleId = "RULE-6-2" and
  category = "required"
  or
  query =
    // `Query` instance for the `stringLiteralAssignedToObjPtrToConstQualifiedChar` query
    TypesPackage::stringLiteralAssignedToObjPtrToConstQualifiedCharQuery() and
  queryId =
    // `@id` for the `stringLiteralAssignedToObjPtrToConstQualifiedChar` query
    "c/misra/string-literal-assigned-to-obj-ptr-to-const-qualified-char" and
  ruleId = "RULE-7-4" and
  category = "required"
}

module TypesPackage {
  Query preventOrDetectDomainAndRangeErrorsInMathFunctionsQuery() {
    //autogenerate `Query` type
    result =
      // `Query` type for `preventOrDetectDomainAndRangeErrorsInMathFunctions` query
      TQueryC(TTypesPackageQuery(TPreventOrDetectDomainAndRangeErrorsInMathFunctionsQuery()))
  }

  Query floatingPointConversionsNotWithinRangeOfNewTypeQuery() {
    //autogenerate `Query` type
    result =
      // `Query` type for `floatingPointConversionsNotWithinRangeOfNewType` query
      TQueryC(TTypesPackageQuery(TFloatingPointConversionsNotWithinRangeOfNewTypeQuery()))
  }

  Query floatingPointOfIntegralValuesLosePrecisionQuery() {
    //autogenerate `Query` type
    result =
      // `Query` type for `floatingPointOfIntegralValuesLosePrecision` query
      TQueryC(TTypesPackageQuery(TFloatingPointOfIntegralValuesLosePrecisionQuery()))
  }

  Query objectReprUsedForComparingFloatingPointValuesQuery() {
    //autogenerate `Query` type
    result =
      // `Query` type for `objectReprUsedForComparingFloatingPointValues` query
      TQueryC(TTypesPackageQuery(TObjectReprUsedForComparingFloatingPointValuesQuery()))
  }

  Query ensureThatUnsignedIntegerOperationsDoNotWrapQuery() {
    //autogenerate `Query` type
    result =
      // `Query` type for `ensureThatUnsignedIntegerOperationsDoNotWrap` query
      TQueryC(TTypesPackageQuery(TEnsureThatUnsignedIntegerOperationsDoNotWrapQuery()))
  }

  Query intConversionCausesLostOrMisinterpretedDataQuery() {
    //autogenerate `Query` type
    result =
      // `Query` type for `intConversionCausesLostOrMisinterpretedData` query
      TQueryC(TTypesPackageQuery(TIntConversionCausesLostOrMisinterpretedDataQuery()))
  }

  Query operationsOnSignedIntegersResultsInOverflowQuery() {
    //autogenerate `Query` type
    result =
      // `Query` type for `operationsOnSignedIntegersResultsInOverflow` query
      TQueryC(TTypesPackageQuery(TOperationsOnSignedIntegersResultsInOverflowQuery()))
  }

  Query divAndModOperationResultsInDivByZeroQuery() {
    //autogenerate `Query` type
    result =
      // `Query` type for `divAndModOperationResultsInDivByZero` query
      TQueryC(TTypesPackageQuery(TDivAndModOperationResultsInDivByZeroQuery()))
  }

  Query exprShiftedByNegativeBitsOrGreaterThanOperandQuery() {
    //autogenerate `Query` type
    result =
      // `Query` type for `exprShiftedByNegativeBitsOrGreaterThanOperand` query
      TQueryC(TTypesPackageQuery(TExprShiftedByNegativeBitsOrGreaterThanOperandQuery()))
  }

  Query useCorrectIntegerPrecisionsQuery() {
    //autogenerate `Query` type
    result =
      // `Query` type for `useCorrectIntegerPrecisions` query
      TQueryC(TTypesPackageQuery(TUseCorrectIntegerPrecisionsQuery()))
  }

  Query convertingAPointerToIntegerOrIntegerToPointerQuery() {
    //autogenerate `Query` type
    result =
      // `Query` type for `convertingAPointerToIntegerOrIntegerToPointer` query
      TQueryC(TTypesPackageQuery(TConvertingAPointerToIntegerOrIntegerToPointerQuery()))
  }

  Query numericTypedefsNotUsedInPlaceOfBasicNumericalTypesQuery() {
    //autogenerate `Query` type
    result =
      // `Query` type for `numericTypedefsNotUsedInPlaceOfBasicNumericalTypes` query
      TQueryC(TTypesPackageQuery(TNumericTypedefsNotUsedInPlaceOfBasicNumericalTypesQuery()))
  }

  Query operandsOfAnInappropriateEssentialTypeQuery() {
    //autogenerate `Query` type
    result =
      // `Query` type for `operandsOfAnInappropriateEssentialType` query
      TQueryC(TTypesPackageQuery(TOperandsOfAnInappropriateEssentialTypeQuery()))
  }

  Query charTypeExprsUsedInAddOrSubQuery() {
    //autogenerate `Query` type
    result =
      // `Query` type for `charTypeExprsUsedInAddOrSub` query
      TQueryC(TTypesPackageQuery(TCharTypeExprsUsedInAddOrSubQuery()))
  }

  Query assignmentToIncompatibleEssentialTypeQuery() {
    //autogenerate `Query` type
    result =
      // `Query` type for `assignmentToIncompatibleEssentialType` query
      TQueryC(TTypesPackageQuery(TAssignmentToIncompatibleEssentialTypeQuery()))
  }

  Query arithConversionOperandHasDifferentEssTypeCategoryQuery() {
    //autogenerate `Query` type
    result =
      // `Query` type for `arithConversionOperandHasDifferentEssTypeCategory` query
      TQueryC(TTypesPackageQuery(TArithConversionOperandHasDifferentEssTypeCategoryQuery()))
  }

  Query valueCastToInappropriateEssentialTypeQuery() {
    //autogenerate `Query` type
    result =
      // `Query` type for `valueCastToInappropriateEssentialType` query
      TQueryC(TTypesPackageQuery(TValueCastToInappropriateEssentialTypeQuery()))
  }

  Query compositeExprValueAssignedToObjWithWiderEssTypeQuery() {
    //autogenerate `Query` type
    result =
      // `Query` type for `compositeExprValueAssignedToObjWithWiderEssType` query
      TQueryC(TTypesPackageQuery(TCompositeExprValueAssignedToObjWithWiderEssTypeQuery()))
  }

  Query convertedCompExprOperandHasWiderEssTypeThanOtherQuery() {
    //autogenerate `Query` type
    result =
      // `Query` type for `convertedCompExprOperandHasWiderEssTypeThanOther` query
      TQueryC(TTypesPackageQuery(TConvertedCompExprOperandHasWiderEssTypeThanOtherQuery()))
  }

  Query compExprValCastToIncompatEssTypeQuery() {
    //autogenerate `Query` type
    result =
      // `Query` type for `compExprValCastToIncompatEssType` query
      TQueryC(TTypesPackageQuery(TCompExprValCastToIncompatEssTypeQuery()))
  }

  Query constExprEvalCausesUnsignedIntWraparoundQuery() {
    //autogenerate `Query` type
    result =
      // `Query` type for `constExprEvalCausesUnsignedIntWraparound` query
      TQueryC(TTypesPackageQuery(TConstExprEvalCausesUnsignedIntWraparoundQuery()))
  }

  Query arrayTypeParamAtSizeofOperandQuery() {
    //autogenerate `Query` type
    result =
      // `Query` type for `arrayTypeParamAtSizeofOperand` query
      TQueryC(TTypesPackageQuery(TArrayTypeParamAtSizeofOperandQuery()))
  }

  Query loopCounterHaveEssentiallyFloatingTypeQuery() {
    //autogenerate `Query` type
    result =
      // `Query` type for `loopCounterHaveEssentiallyFloatingType` query
      TQueryC(TTypesPackageQuery(TLoopCounterHaveEssentiallyFloatingTypeQuery()))
  }

  Query ctypeFuncNeitherReprAsUnsignedCharNorEOFQuery() {
    //autogenerate `Query` type
    result =
      // `Query` type for `ctypeFuncNeitherReprAsUnsignedCharNorEOF` query
      TQueryC(TTypesPackageQuery(TCtypeFuncNeitherReprAsUnsignedCharNorEOFQuery()))
  }

  Query memcmpUsedToCompareNullTerminatedStringsQuery() {
    //autogenerate `Query` type
    result =
      // `Query` type for `memcmpUsedToCompareNullTerminatedStrings` query
      TQueryC(TTypesPackageQuery(TMemcmpUsedToCompareNullTerminatedStringsQuery()))
  }

  Query memcpyMemmoveMemcmpArgNotPointerToCompatTypesQuery() {
    //autogenerate `Query` type
    result =
      // `Query` type for `memcpyMemmoveMemcmpArgNotPointerToCompatTypes` query
      TQueryC(TTypesPackageQuery(TMemcpyMemmoveMemcmpArgNotPointerToCompatTypesQuery()))
  }

  Query memcmpArgNotPtsToSignedUnsignedBooleanEnumEssTypeQuery() {
    //autogenerate `Query` type
    result =
      // `Query` type for `memcmpArgNotPtsToSignedUnsignedBooleanEnumEssType` query
      TQueryC(TTypesPackageQuery(TMemcmpArgNotPtsToSignedUnsignedBooleanEnumEssTypeQuery()))
  }

  Query bitFieldsShallOnlyBeDeclaredWithAnAppropriateTypeQuery() {
    //autogenerate `Query` type
    result =
      // `Query` type for `bitFieldsShallOnlyBeDeclaredWithAnAppropriateType` query
      TQueryC(TTypesPackageQuery(TBitFieldsShallOnlyBeDeclaredWithAnAppropriateTypeQuery()))
  }

  Query singleBitNamedBitFieldsOfASignedTypeQuery() {
    //autogenerate `Query` type
    result =
      // `Query` type for `singleBitNamedBitFieldsOfASignedType` query
      TQueryC(TTypesPackageQuery(TSingleBitNamedBitFieldsOfASignedTypeQuery()))
  }

  Query stringLiteralAssignedToObjPtrToConstQualifiedCharQuery() {
    //autogenerate `Query` type
    result =
      // `Query` type for `stringLiteralAssignedToObjPtrToConstQualifiedChar` query
      TQueryC(TTypesPackageQuery(TStringLiteralAssignedToObjPtrToConstQualifiedCharQuery()))
  }
}
