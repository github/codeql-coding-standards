//** THIS FILE IS AUTOGENERATED, DO NOT MODIFY DIRECTLY.  **/
import cpp
import RuleMetadata
import codingstandards.cpp.exclusions.RuleMetadata

newtype Pointers1Query =
  TConversionBetweenFunctionPointerAndOtherTypeQuery() or
  TConversionBetweenIncompleteTypePointerAndOtherTypeQuery() or
  TCastBetweenObjectPointerAndDifferentObjectTypeQuery() or
  TConversionBetweenPointerToObjectAndIntegerTypeQuery() or
  TConversionFromPointerToVoidIntoPointerToObjectQuery() or
  TCastBetweenPointerToVoidAndArithmeticTypeQuery() or
  TCastBetweenPointerToObjectAndNonIntArithmeticTypeQuery() or
  TCastRemovesConstOrVolatileQualificationQuery() or
  TMacroNullNotUsedAsIntegerNullPointerConstantQuery() or
  TPointerAndDerivedPointerMustAddressSameArrayQuery() or
  TSubtractionBetweenPointersMustAddressSameArrayQuery() or
  TRelationalOperatorComparesPointerToDifferentArrayQuery() or
  TDoNotUseAdditionOrSubtractionOperatorsOnPointersQuery() or
  TNoMoreThanTwoLevelsOfPointerNestingInDeclarationsQuery() or
  TAutomaticStorageObjectAddressCopiedToOtherObjectQuery() or
  TObjectWithNoPointerDereferenceShouldBeOpaqueQuery() or
  TPointerShouldPointToConstTypeWhenPossibleQuery()

predicate isPointers1QueryMetadata(Query query, string queryId, string ruleId) {
  query =
    // `Query` instance for the `conversionBetweenFunctionPointerAndOtherType` query
    Pointers1Package::conversionBetweenFunctionPointerAndOtherTypeQuery() and
  queryId =
    // `@id` for the `conversionBetweenFunctionPointerAndOtherType` query
    "c/misra/conversion-between-function-pointer-and-other-type" and
  ruleId = "RULE-11-1"
  or
  query =
    // `Query` instance for the `conversionBetweenIncompleteTypePointerAndOtherType` query
    Pointers1Package::conversionBetweenIncompleteTypePointerAndOtherTypeQuery() and
  queryId =
    // `@id` for the `conversionBetweenIncompleteTypePointerAndOtherType` query
    "c/misra/conversion-between-incomplete-type-pointer-and-other-type" and
  ruleId = "RULE-11-2"
  or
  query =
    // `Query` instance for the `castBetweenObjectPointerAndDifferentObjectType` query
    Pointers1Package::castBetweenObjectPointerAndDifferentObjectTypeQuery() and
  queryId =
    // `@id` for the `castBetweenObjectPointerAndDifferentObjectType` query
    "c/misra/cast-between-object-pointer-and-different-object-type" and
  ruleId = "RULE-11-3"
  or
  query =
    // `Query` instance for the `conversionBetweenPointerToObjectAndIntegerType` query
    Pointers1Package::conversionBetweenPointerToObjectAndIntegerTypeQuery() and
  queryId =
    // `@id` for the `conversionBetweenPointerToObjectAndIntegerType` query
    "c/misra/conversion-between-pointer-to-object-and-integer-type" and
  ruleId = "RULE-11-4"
  or
  query =
    // `Query` instance for the `conversionFromPointerToVoidIntoPointerToObject` query
    Pointers1Package::conversionFromPointerToVoidIntoPointerToObjectQuery() and
  queryId =
    // `@id` for the `conversionFromPointerToVoidIntoPointerToObject` query
    "c/misra/conversion-from-pointer-to-void-into-pointer-to-object" and
  ruleId = "RULE-11-5"
  or
  query =
    // `Query` instance for the `castBetweenPointerToVoidAndArithmeticType` query
    Pointers1Package::castBetweenPointerToVoidAndArithmeticTypeQuery() and
  queryId =
    // `@id` for the `castBetweenPointerToVoidAndArithmeticType` query
    "c/misra/cast-between-pointer-to-void-and-arithmetic-type" and
  ruleId = "RULE-11-6"
  or
  query =
    // `Query` instance for the `castBetweenPointerToObjectAndNonIntArithmeticType` query
    Pointers1Package::castBetweenPointerToObjectAndNonIntArithmeticTypeQuery() and
  queryId =
    // `@id` for the `castBetweenPointerToObjectAndNonIntArithmeticType` query
    "c/misra/cast-between-pointer-to-object-and-non-int-arithmetic-type" and
  ruleId = "RULE-11-7"
  or
  query =
    // `Query` instance for the `castRemovesConstOrVolatileQualification` query
    Pointers1Package::castRemovesConstOrVolatileQualificationQuery() and
  queryId =
    // `@id` for the `castRemovesConstOrVolatileQualification` query
    "c/misra/cast-removes-const-or-volatile-qualification" and
  ruleId = "RULE-11-8"
  or
  query =
    // `Query` instance for the `macroNullNotUsedAsIntegerNullPointerConstant` query
    Pointers1Package::macroNullNotUsedAsIntegerNullPointerConstantQuery() and
  queryId =
    // `@id` for the `macroNullNotUsedAsIntegerNullPointerConstant` query
    "c/misra/macro-null-not-used-as-integer-null-pointer-constant" and
  ruleId = "RULE-11-9"
  or
  query =
    // `Query` instance for the `pointerAndDerivedPointerMustAddressSameArray` query
    Pointers1Package::pointerAndDerivedPointerMustAddressSameArrayQuery() and
  queryId =
    // `@id` for the `pointerAndDerivedPointerMustAddressSameArray` query
    "c/misra/pointer-and-derived-pointer-must-address-same-array" and
  ruleId = "RULE-18-1"
  or
  query =
    // `Query` instance for the `subtractionBetweenPointersMustAddressSameArray` query
    Pointers1Package::subtractionBetweenPointersMustAddressSameArrayQuery() and
  queryId =
    // `@id` for the `subtractionBetweenPointersMustAddressSameArray` query
    "c/misra/subtraction-between-pointers-must-address-same-array" and
  ruleId = "RULE-18-2"
  or
  query =
    // `Query` instance for the `relationalOperatorComparesPointerToDifferentArray` query
    Pointers1Package::relationalOperatorComparesPointerToDifferentArrayQuery() and
  queryId =
    // `@id` for the `relationalOperatorComparesPointerToDifferentArray` query
    "c/misra/relational-operator-compares-pointer-to-different-array" and
  ruleId = "RULE-18-3"
  or
  query =
    // `Query` instance for the `doNotUseAdditionOrSubtractionOperatorsOnPointers` query
    Pointers1Package::doNotUseAdditionOrSubtractionOperatorsOnPointersQuery() and
  queryId =
    // `@id` for the `doNotUseAdditionOrSubtractionOperatorsOnPointers` query
    "c/misra/do-not-use-addition-or-subtraction-operators-on-pointers" and
  ruleId = "RULE-18-4"
  or
  query =
    // `Query` instance for the `noMoreThanTwoLevelsOfPointerNestingInDeclarations` query
    Pointers1Package::noMoreThanTwoLevelsOfPointerNestingInDeclarationsQuery() and
  queryId =
    // `@id` for the `noMoreThanTwoLevelsOfPointerNestingInDeclarations` query
    "c/misra/no-more-than-two-levels-of-pointer-nesting-in-declarations" and
  ruleId = "RULE-18-5"
  or
  query =
    // `Query` instance for the `automaticStorageObjectAddressCopiedToOtherObject` query
    Pointers1Package::automaticStorageObjectAddressCopiedToOtherObjectQuery() and
  queryId =
    // `@id` for the `automaticStorageObjectAddressCopiedToOtherObject` query
    "c/misra/automatic-storage-object-address-copied-to-other-object" and
  ruleId = "RULE-18-6"
  or
  query =
    // `Query` instance for the `objectWithNoPointerDereferenceShouldBeOpaque` query
    Pointers1Package::objectWithNoPointerDereferenceShouldBeOpaqueQuery() and
  queryId =
    // `@id` for the `objectWithNoPointerDereferenceShouldBeOpaque` query
    "c/misra/object-with-no-pointer-dereference-should-be-opaque" and
  ruleId = "RULE-4-8"
  or
  query =
    // `Query` instance for the `pointerShouldPointToConstTypeWhenPossible` query
    Pointers1Package::pointerShouldPointToConstTypeWhenPossibleQuery() and
  queryId =
    // `@id` for the `pointerShouldPointToConstTypeWhenPossible` query
    "c/misra/pointer-should-point-to-const-type-when-possible" and
  ruleId = "RULE-8-13"
}

module Pointers1Package {
  Query conversionBetweenFunctionPointerAndOtherTypeQuery() {
    //autogenerate `Query` type
    result =
      // `Query` type for `conversionBetweenFunctionPointerAndOtherType` query
      TQueryC(TPointers1PackageQuery(TConversionBetweenFunctionPointerAndOtherTypeQuery()))
  }

  Query conversionBetweenIncompleteTypePointerAndOtherTypeQuery() {
    //autogenerate `Query` type
    result =
      // `Query` type for `conversionBetweenIncompleteTypePointerAndOtherType` query
      TQueryC(TPointers1PackageQuery(TConversionBetweenIncompleteTypePointerAndOtherTypeQuery()))
  }

  Query castBetweenObjectPointerAndDifferentObjectTypeQuery() {
    //autogenerate `Query` type
    result =
      // `Query` type for `castBetweenObjectPointerAndDifferentObjectType` query
      TQueryC(TPointers1PackageQuery(TCastBetweenObjectPointerAndDifferentObjectTypeQuery()))
  }

  Query conversionBetweenPointerToObjectAndIntegerTypeQuery() {
    //autogenerate `Query` type
    result =
      // `Query` type for `conversionBetweenPointerToObjectAndIntegerType` query
      TQueryC(TPointers1PackageQuery(TConversionBetweenPointerToObjectAndIntegerTypeQuery()))
  }

  Query conversionFromPointerToVoidIntoPointerToObjectQuery() {
    //autogenerate `Query` type
    result =
      // `Query` type for `conversionFromPointerToVoidIntoPointerToObject` query
      TQueryC(TPointers1PackageQuery(TConversionFromPointerToVoidIntoPointerToObjectQuery()))
  }

  Query castBetweenPointerToVoidAndArithmeticTypeQuery() {
    //autogenerate `Query` type
    result =
      // `Query` type for `castBetweenPointerToVoidAndArithmeticType` query
      TQueryC(TPointers1PackageQuery(TCastBetweenPointerToVoidAndArithmeticTypeQuery()))
  }

  Query castBetweenPointerToObjectAndNonIntArithmeticTypeQuery() {
    //autogenerate `Query` type
    result =
      // `Query` type for `castBetweenPointerToObjectAndNonIntArithmeticType` query
      TQueryC(TPointers1PackageQuery(TCastBetweenPointerToObjectAndNonIntArithmeticTypeQuery()))
  }

  Query castRemovesConstOrVolatileQualificationQuery() {
    //autogenerate `Query` type
    result =
      // `Query` type for `castRemovesConstOrVolatileQualification` query
      TQueryC(TPointers1PackageQuery(TCastRemovesConstOrVolatileQualificationQuery()))
  }

  Query macroNullNotUsedAsIntegerNullPointerConstantQuery() {
    //autogenerate `Query` type
    result =
      // `Query` type for `macroNullNotUsedAsIntegerNullPointerConstant` query
      TQueryC(TPointers1PackageQuery(TMacroNullNotUsedAsIntegerNullPointerConstantQuery()))
  }

  Query pointerAndDerivedPointerMustAddressSameArrayQuery() {
    //autogenerate `Query` type
    result =
      // `Query` type for `pointerAndDerivedPointerMustAddressSameArray` query
      TQueryC(TPointers1PackageQuery(TPointerAndDerivedPointerMustAddressSameArrayQuery()))
  }

  Query subtractionBetweenPointersMustAddressSameArrayQuery() {
    //autogenerate `Query` type
    result =
      // `Query` type for `subtractionBetweenPointersMustAddressSameArray` query
      TQueryC(TPointers1PackageQuery(TSubtractionBetweenPointersMustAddressSameArrayQuery()))
  }

  Query relationalOperatorComparesPointerToDifferentArrayQuery() {
    //autogenerate `Query` type
    result =
      // `Query` type for `relationalOperatorComparesPointerToDifferentArray` query
      TQueryC(TPointers1PackageQuery(TRelationalOperatorComparesPointerToDifferentArrayQuery()))
  }

  Query doNotUseAdditionOrSubtractionOperatorsOnPointersQuery() {
    //autogenerate `Query` type
    result =
      // `Query` type for `doNotUseAdditionOrSubtractionOperatorsOnPointers` query
      TQueryC(TPointers1PackageQuery(TDoNotUseAdditionOrSubtractionOperatorsOnPointersQuery()))
  }

  Query noMoreThanTwoLevelsOfPointerNestingInDeclarationsQuery() {
    //autogenerate `Query` type
    result =
      // `Query` type for `noMoreThanTwoLevelsOfPointerNestingInDeclarations` query
      TQueryC(TPointers1PackageQuery(TNoMoreThanTwoLevelsOfPointerNestingInDeclarationsQuery()))
  }

  Query automaticStorageObjectAddressCopiedToOtherObjectQuery() {
    //autogenerate `Query` type
    result =
      // `Query` type for `automaticStorageObjectAddressCopiedToOtherObject` query
      TQueryC(TPointers1PackageQuery(TAutomaticStorageObjectAddressCopiedToOtherObjectQuery()))
  }

  Query objectWithNoPointerDereferenceShouldBeOpaqueQuery() {
    //autogenerate `Query` type
    result =
      // `Query` type for `objectWithNoPointerDereferenceShouldBeOpaque` query
      TQueryC(TPointers1PackageQuery(TObjectWithNoPointerDereferenceShouldBeOpaqueQuery()))
  }

  Query pointerShouldPointToConstTypeWhenPossibleQuery() {
    //autogenerate `Query` type
    result =
      // `Query` type for `pointerShouldPointToConstTypeWhenPossible` query
      TQueryC(TPointers1PackageQuery(TPointerShouldPointToConstTypeWhenPossibleQuery()))
  }
}
