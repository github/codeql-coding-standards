//** THIS FILE IS AUTOGENERATED, DO NOT MODIFY DIRECTLY.  **/
import cpp
import RuleMetadata
import codingstandards.cpp.exclusions.RuleMetadata

newtype Concurrency3Query =
  TDoNotAllowAMutexToGoOutOfScopeWhileLockedQuery() or
  TDoNotDestroyAMutexWhileItIsLockedQuery() or
  TPreserveSafetyWhenUsingConditionVariablesQuery() or
  TWrapFunctionsThatCanFailSpuriouslyInLoopQuery()

predicate isConcurrency3QueryMetadata(Query query, string queryId, string ruleId) {
  query =
    // `Query` instance for the `doNotAllowAMutexToGoOutOfScopeWhileLocked` query
    Concurrency3Package::doNotAllowAMutexToGoOutOfScopeWhileLockedQuery() and
  queryId =
    // `@id` for the `doNotAllowAMutexToGoOutOfScopeWhileLocked` query
    "c/cert/do-not-allow-a-mutex-to-go-out-of-scope-while-locked" and
  ruleId = "CON31-C"
  or
  query =
    // `Query` instance for the `doNotDestroyAMutexWhileItIsLocked` query
    Concurrency3Package::doNotDestroyAMutexWhileItIsLockedQuery() and
  queryId =
    // `@id` for the `doNotDestroyAMutexWhileItIsLocked` query
    "c/cert/do-not-destroy-a-mutex-while-it-is-locked" and
  ruleId = "CON31-C"
  or
  query =
    // `Query` instance for the `preserveSafetyWhenUsingConditionVariables` query
    Concurrency3Package::preserveSafetyWhenUsingConditionVariablesQuery() and
  queryId =
    // `@id` for the `preserveSafetyWhenUsingConditionVariables` query
    "c/cert/preserve-safety-when-using-condition-variables" and
  ruleId = "CON38-C"
  or
  query =
    // `Query` instance for the `wrapFunctionsThatCanFailSpuriouslyInLoop` query
    Concurrency3Package::wrapFunctionsThatCanFailSpuriouslyInLoopQuery() and
  queryId =
    // `@id` for the `wrapFunctionsThatCanFailSpuriouslyInLoop` query
    "c/cert/wrap-functions-that-can-fail-spuriously-in-loop" and
  ruleId = "CON41-C"
}

module Concurrency3Package {
  Query doNotAllowAMutexToGoOutOfScopeWhileLockedQuery() {
    //autogenerate `Query` type
    result =
      // `Query` type for `doNotAllowAMutexToGoOutOfScopeWhileLocked` query
      TQueryC(TConcurrency3PackageQuery(TDoNotAllowAMutexToGoOutOfScopeWhileLockedQuery()))
  }

  Query doNotDestroyAMutexWhileItIsLockedQuery() {
    //autogenerate `Query` type
    result =
      // `Query` type for `doNotDestroyAMutexWhileItIsLocked` query
      TQueryC(TConcurrency3PackageQuery(TDoNotDestroyAMutexWhileItIsLockedQuery()))
  }

  Query preserveSafetyWhenUsingConditionVariablesQuery() {
    //autogenerate `Query` type
    result =
      // `Query` type for `preserveSafetyWhenUsingConditionVariables` query
      TQueryC(TConcurrency3PackageQuery(TPreserveSafetyWhenUsingConditionVariablesQuery()))
  }

  Query wrapFunctionsThatCanFailSpuriouslyInLoopQuery() {
    //autogenerate `Query` type
    result =
      // `Query` type for `wrapFunctionsThatCanFailSpuriouslyInLoop` query
      TQueryC(TConcurrency3PackageQuery(TWrapFunctionsThatCanFailSpuriouslyInLoopQuery()))
  }
}
