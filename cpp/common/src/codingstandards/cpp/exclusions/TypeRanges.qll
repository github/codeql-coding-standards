//** THIS FILE IS AUTOGENERATED, DO NOT MODIFY DIRECTLY.  */
import cpp
import RuleMetadata

newtype TypeRangesQuery =
  TUncheckedRangeDomainPoleErrorsQuery() or
  TStringNumberConversionMissingErrorCheckQuery() or
  TUseOfUnsafeCStringToNumberConversionQuery() or
  TSignedValPassedToCharQuery() or
  TInputsFromIndependentComponentsNotValidatedQuery() or
  TNonEnumeratorEnumValueQuery() or
  TUseOfEnumForRelatedConstantsQuery() or
  TIntegerUsedForEnumQuery() or
  TDetectErrorsWhenConvertingAStringToANumberQuery() or
  TDoNotCastToAnOutOfRangeEnumerationValueQuery()

predicate isTypeRangesQueryMetadata(Query query, string queryId, string ruleId) {
  query =
    // `Query` instance for the `uncheckedRangeDomainPoleErrors` query
    TypeRangesPackage::uncheckedRangeDomainPoleErrorsQuery() and
  queryId =
    // `@id` for the `uncheckedRangeDomainPoleErrors` query
    "cpp/autosar/unchecked-range-domain-pole-errors" and
  ruleId = "A0-4-4"
  or
  query =
    // `Query` instance for the `stringNumberConversionMissingErrorCheck` query
    TypeRangesPackage::stringNumberConversionMissingErrorCheckQuery() and
  queryId =
    // `@id` for the `stringNumberConversionMissingErrorCheck` query
    "cpp/autosar/string-number-conversion-missing-error-check" and
  ruleId = "A18-0-2"
  or
  query =
    // `Query` instance for the `useOfUnsafeCStringToNumberConversion` query
    TypeRangesPackage::useOfUnsafeCStringToNumberConversionQuery() and
  queryId =
    // `@id` for the `useOfUnsafeCStringToNumberConversion` query
    "cpp/autosar/use-of-unsafe-c-string-to-number-conversion" and
  ruleId = "A18-0-2"
  or
  query =
    // `Query` instance for the `signedValPassedToChar` query
    TypeRangesPackage::signedValPassedToCharQuery() and
  queryId =
    // `@id` for the `signedValPassedToChar` query
    "cpp/autosar/signed-val-passed-to-char" and
  ruleId = "A21-8-1"
  or
  query =
    // `Query` instance for the `inputsFromIndependentComponentsNotValidated` query
    TypeRangesPackage::inputsFromIndependentComponentsNotValidatedQuery() and
  queryId =
    // `@id` for the `inputsFromIndependentComponentsNotValidated` query
    "cpp/autosar/inputs-from-independent-components-not-validated" and
  ruleId = "A27-0-1"
  or
  query =
    // `Query` instance for the `nonEnumeratorEnumValue` query
    TypeRangesPackage::nonEnumeratorEnumValueQuery() and
  queryId =
    // `@id` for the `nonEnumeratorEnumValue` query
    "cpp/autosar/non-enumerator-enum-value" and
  ruleId = "A7-2-1"
  or
  query =
    // `Query` instance for the `useOfEnumForRelatedConstants` query
    TypeRangesPackage::useOfEnumForRelatedConstantsQuery() and
  queryId =
    // `@id` for the `useOfEnumForRelatedConstants` query
    "cpp/autosar/use-of-enum-for-related-constants" and
  ruleId = "A7-2-5"
  or
  query =
    // `Query` instance for the `integerUsedForEnum` query
    TypeRangesPackage::integerUsedForEnumQuery() and
  queryId =
    // `@id` for the `integerUsedForEnum` query
    "cpp/autosar/integer-used-for-enum" and
  ruleId = "A7-2-5"
  or
  query =
    // `Query` instance for the `detectErrorsWhenConvertingAStringToANumber` query
    TypeRangesPackage::detectErrorsWhenConvertingAStringToANumberQuery() and
  queryId =
    // `@id` for the `detectErrorsWhenConvertingAStringToANumber` query
    "cpp/cert/detect-errors-when-converting-a-string-to-a-number" and
  ruleId = "ERR62-CPP"
  or
  query =
    // `Query` instance for the `doNotCastToAnOutOfRangeEnumerationValue` query
    TypeRangesPackage::doNotCastToAnOutOfRangeEnumerationValueQuery() and
  queryId =
    // `@id` for the `doNotCastToAnOutOfRangeEnumerationValue` query
    "cpp/cert/do-not-cast-to-an-out-of-range-enumeration-value" and
  ruleId = "INT50-CPP"
}

module TypeRangesPackage {
  Query uncheckedRangeDomainPoleErrorsQuery() {
    //autogenerate `Query` type
    result =
      // `Query` type for `uncheckedRangeDomainPoleErrors` query
      TTypeRangesPackageQuery(TUncheckedRangeDomainPoleErrorsQuery())
  }

  Query stringNumberConversionMissingErrorCheckQuery() {
    //autogenerate `Query` type
    result =
      // `Query` type for `stringNumberConversionMissingErrorCheck` query
      TTypeRangesPackageQuery(TStringNumberConversionMissingErrorCheckQuery())
  }

  Query useOfUnsafeCStringToNumberConversionQuery() {
    //autogenerate `Query` type
    result =
      // `Query` type for `useOfUnsafeCStringToNumberConversion` query
      TTypeRangesPackageQuery(TUseOfUnsafeCStringToNumberConversionQuery())
  }

  Query signedValPassedToCharQuery() {
    //autogenerate `Query` type
    result =
      // `Query` type for `signedValPassedToChar` query
      TTypeRangesPackageQuery(TSignedValPassedToCharQuery())
  }

  Query inputsFromIndependentComponentsNotValidatedQuery() {
    //autogenerate `Query` type
    result =
      // `Query` type for `inputsFromIndependentComponentsNotValidated` query
      TTypeRangesPackageQuery(TInputsFromIndependentComponentsNotValidatedQuery())
  }

  Query nonEnumeratorEnumValueQuery() {
    //autogenerate `Query` type
    result =
      // `Query` type for `nonEnumeratorEnumValue` query
      TTypeRangesPackageQuery(TNonEnumeratorEnumValueQuery())
  }

  Query useOfEnumForRelatedConstantsQuery() {
    //autogenerate `Query` type
    result =
      // `Query` type for `useOfEnumForRelatedConstants` query
      TTypeRangesPackageQuery(TUseOfEnumForRelatedConstantsQuery())
  }

  Query integerUsedForEnumQuery() {
    //autogenerate `Query` type
    result =
      // `Query` type for `integerUsedForEnum` query
      TTypeRangesPackageQuery(TIntegerUsedForEnumQuery())
  }

  Query detectErrorsWhenConvertingAStringToANumberQuery() {
    //autogenerate `Query` type
    result =
      // `Query` type for `detectErrorsWhenConvertingAStringToANumber` query
      TTypeRangesPackageQuery(TDetectErrorsWhenConvertingAStringToANumberQuery())
  }

  Query doNotCastToAnOutOfRangeEnumerationValueQuery() {
    //autogenerate `Query` type
    result =
      // `Query` type for `doNotCastToAnOutOfRangeEnumerationValue` query
      TTypeRangesPackageQuery(TDoNotCastToAnOutOfRangeEnumerationValueQuery())
  }
}
